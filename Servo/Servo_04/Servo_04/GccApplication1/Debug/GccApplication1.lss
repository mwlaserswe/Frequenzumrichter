
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000610  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000221  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	// F¸r PB1 ist Timer 1 zust‰ndig. Beschreibung Pin PB1: OCR1A 
	// es gibt zwei TC1 Control Register: TCCR1A und TCCR1B
	//    WGM13,WGM12,WGM10,WGM11,WGM10 = 0,1,0,1    heiﬂt Fast PWM 8-Bit
	//    COM1A1,COM1A0 = 1,0  heiﬂt Clear OC1A on compare match, set OC1A at BOTTOM (Non-inverting mode)
	//    CS01,CS00 = 1,1      heiﬂt clk/1 (no prescaling)
	TCCR1A = ((1 << COM1A1) | (1 << WGM10) );
  90:	81 e8       	ldi	r24, 0x81	; 129
  92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = ((1 << CS10) | ( 1<< WGM12));
  96:	89 e0       	ldi	r24, 0x09	; 9
  98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	DDRB = 0b00000010;		// Define Port B Bit 1 as Output
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000001;		// Define Port B Bit 0 as pull up
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	85 b9       	out	0x05, r24	; 5
	
	while(1)
	{
		// duty cycle setzen
		OCR1A = 70;
  a4:	e8 e8       	ldi	r30, 0x88	; 136
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	46 e4       	ldi	r20, 0x46	; 70
  aa:	50 e0       	ldi	r21, 0x00	; 0
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
		
		// duty cycle setzen
		OCR1A = 200;
  ac:	28 ec       	ldi	r18, 0xC8	; 200
  ae:	30 e0       	ldi	r19, 0x00	; 0
	PORTB = 0b00000001;		// Define Port B Bit 0 as pull up
	
	while(1)
	{
		// duty cycle setzen
		OCR1A = 70;
  b0:	51 83       	std	Z+1, r21	; 0x01
  b2:	40 83       	st	Z, r20
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
  b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  bc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
  c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  d4:	81 35       	cpi	r24, 0x51	; 81
  d6:	93 4c       	sbci	r25, 0xC3	; 195
  d8:	a1 05       	cpc	r26, r1
  da:	b1 05       	cpc	r27, r1
  dc:	00 f5       	brcc	.+64     	; 0x11e <main+0x8e>
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 100:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 110:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 114:	81 35       	cpi	r24, 0x51	; 81
 116:	93 4c       	sbci	r25, 0xC3	; 195
 118:	a1 05       	cpc	r26, r1
 11a:	b1 05       	cpc	r27, r1
 11c:	00 f3       	brcs	.-64     	; 0xde <main+0x4e>
		
		// duty cycle setzen
		OCR1A = 200;
 11e:	31 83       	std	Z+1, r19	; 0x01
 120:	20 83       	st	Z, r18
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
 122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 12e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 13e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 142:	81 35       	cpi	r24, 0x51	; 81
 144:	93 4c       	sbci	r25, 0xC3	; 195
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	08 f0       	brcs	.+2      	; 0x14e <main+0xbe>
 14c:	b1 cf       	rjmp	.-158    	; 0xb0 <main+0x20>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 156:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 15a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 168:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 170:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 178:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 17c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 180:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 184:	81 35       	cpi	r24, 0x51	; 81
 186:	93 4c       	sbci	r25, 0xC3	; 195
 188:	a1 05       	cpc	r26, r1
 18a:	b1 05       	cpc	r27, r1
 18c:	00 f3       	brcs	.-64     	; 0x14e <main+0xbe>
 18e:	90 cf       	rjmp	.-224    	; 0xb0 <main+0x20>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
