
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ef  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint16_t timediff;

int main(void)
{
	//LED as output
	DDRD = (1<<PIND7);
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0;				//no Pull-up on ICP1
  94:	15 b8       	out	0x05, r1	; 5
	
	TCCR1A = 0;						//Defaults
  96:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	//TCCR1B = 10x00101
	//Enable noise cancel, look for falling edge, Clock divided by 1024
	TCCR1B =  (1<<ICES1) | (1<<ICNC1) | (1<<CS12) | (1<<CS10);
  9a:	85 ec       	ldi	r24, 0xC5	; 197
  9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	TIMSK1 |= (1<<ICIE1);			//Input capture interrupt Enable
  a0:	ef e6       	ldi	r30, 0x6F	; 111
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	
	sei();							//Enable interrupts
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1c>

000000ae <__vector_10>:
		//////}
	}
}

ISR(TIMER1_CAPT_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	// ======= rining edge =======
	if(current_edge == 0)
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	81 11       	cpse	r24, r1
  ca:	11 c0       	rjmp	.+34     	; 0xee <__vector_10+0x40>
	{
		//Save timestamp
		starting_cnt = ICR1;
  cc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  d0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  d4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <starting_cnt+0x1>
  d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <starting_cnt>
		
		//Switch to falling edge
		TCCR1B &= ~(1<<ICES1);
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	80 83       	st	Z, r24
		
		current_edge = 1;	
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	57 c0       	rjmp	.+174    	; 0x19c <__vector_10+0xee>
	}
	
	// ======= falling edge =======
	else if (current_edge == 1)
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	09 f0       	breq	.+2      	; 0xf8 <__vector_10+0x4a>
  f6:	52 c0       	rjmp	.+164    	; 0x19c <__vector_10+0xee>
	{
		//Save timestamp
		ending_cnt = ICR1;
  f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  fc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 100:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ending_cnt+0x1>
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ending_cnt>
		
		//Switch to rising edge
		TCCR1B |= (1<<ICES1);
 108:	e1 e8       	ldi	r30, 0x81	; 129
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
		
		if (starting_cnt < ending_cnt)
 112:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <starting_cnt>
 116:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <starting_cnt+0x1>
 11a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ending_cnt>
 11e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ending_cnt+0x1>
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	78 f4       	brcc	.+30     	; 0x146 <__vector_10+0x98>
		{
			//A - B
			timediff = ending_cnt - starting_cnt;
 128:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ending_cnt>
 12c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ending_cnt+0x1>
 130:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <starting_cnt>
 134:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <starting_cnt+0x1>
 138:	82 1b       	sub	r24, r18
 13a:	93 0b       	sbc	r25, r19
 13c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timediff+0x1>
 140:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timediff>
 144:	18 c0       	rjmp	.+48     	; 0x176 <__vector_10+0xc8>
			} else {
			//wrap around
			//(0xffff + A) - B, done without requiring signed math
			timediff = starting_cnt - ending_cnt;
 146:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <starting_cnt>
 14a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <starting_cnt+0x1>
 14e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ending_cnt>
 152:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <ending_cnt+0x1>
 156:	82 1b       	sub	r24, r18
 158:	93 0b       	sbc	r25, r19
 15a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timediff+0x1>
 15e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timediff>
			timediff = 0xffff - timediff;
 162:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timediff>
 166:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timediff+0x1>
 16a:	80 95       	com	r24
 16c:	90 95       	com	r25
 16e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timediff+0x1>
 172:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timediff>
		}
			
		if ((timediff > 1000) && (timediff < 3000))
 176:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timediff>
 17a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timediff+0x1>
 17e:	89 3e       	cpi	r24, 0xE9	; 233
 180:	93 40       	sbci	r25, 0x03	; 3
 182:	48 f0       	brcs	.+18     	; 0x196 <__vector_10+0xe8>
 184:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timediff>
 188:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timediff+0x1>
 18c:	88 3b       	cpi	r24, 0xB8	; 184
 18e:	9b 40       	sbci	r25, 0x0B	; 11
 190:	10 f4       	brcc	.+4      	; 0x196 <__vector_10+0xe8>
		{
			LED_ON();	// Set Port D Bit 7
 192:	5f 9a       	sbi	0x0b, 7	; 11
 194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_10+0xee>
		}
		else
		{
			LED_OFF();  //Reset Port D Bit 7
 196:	5f 98       	cbi	0x0b, 7	; 11
			current_edge = 0;
 198:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		
		
	}
	TIFR1 |= (1<<ICF1);
 19c:	b5 9a       	sbi	0x16, 5	; 22
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
