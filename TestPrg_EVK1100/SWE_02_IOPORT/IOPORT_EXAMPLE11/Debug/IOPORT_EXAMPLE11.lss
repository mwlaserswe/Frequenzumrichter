
IOPORT_EXAMPLE11.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000005d4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a0  80002800  80002800  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000458  00000000  00000000  00002cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000bf9  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000053fe  00000000  00000000  00003d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000e62  00000000  00000000  0000911f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000037f0  00000000  00000000  00009f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a34  00000000  00000000  0000d774  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c82  00000000  00000000  0000e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001f28  00000000  00000000  0000fe2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00596669  00000000  00000000  00011d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000004e0  00000000  00000000  005a83c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf de 54 	sub	pc,pc,-8620

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fe 58 	sub	pc,pc,-424

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	30 3b       	mov	r11,3
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	33 bc       	mov	r12,59
8000200e:	f0 1f 00 1e 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002012:	30 3b       	mov	r11,3
80002014:	33 cc       	mov	r12,60
80002016:	f0 1f 00 1c 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201a:	30 3b       	mov	r11,3
8000201c:	33 dc       	mov	r12,61
8000201e:	f0 1f 00 1a 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002022:	30 3b       	mov	r11,3
80002024:	33 ec       	mov	r12,62
80002026:	f0 1f 00 18 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000202a:	30 3b       	mov	r11,3
8000202c:	33 3c       	mov	r12,51
8000202e:	f0 1f 00 16 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002032:	30 3b       	mov	r11,3
80002034:	33 4c       	mov	r12,52
80002036:	f0 1f 00 14 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000203a:	30 3b       	mov	r11,3
8000203c:	33 5c       	mov	r12,53
8000203e:	f0 1f 00 12 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002042:	30 3b       	mov	r11,3
80002044:	33 6c       	mov	r12,54
80002046:	f0 1f 00 10 	mcall	80002084 <board_init+0x7c>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000204a:	30 0b       	mov	r11,0
8000204c:	35 8c       	mov	r12,88
8000204e:	f0 1f 00 0e 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80002052:	30 0b       	mov	r11,0
80002054:	35 5c       	mov	r12,85
80002056:	f0 1f 00 0c 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000205a:	30 0b       	mov	r11,0
8000205c:	35 2c       	mov	r12,82
8000205e:	f0 1f 00 0a 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002062:	30 0b       	mov	r11,0
80002064:	31 4c       	mov	r12,20
80002066:	f0 1f 00 08 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000206a:	30 0b       	mov	r11,0
8000206c:	31 9c       	mov	r12,25
8000206e:	f0 1f 00 06 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002072:	30 0b       	mov	r11,0
80002074:	31 ac       	mov	r12,26
80002076:	f0 1f 00 04 	mcall	80002084 <board_init+0x7c>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000207a:	30 0b       	mov	r11,0
8000207c:	31 bc       	mov	r12,27
8000207e:	f0 1f 00 02 	mcall	80002084 <board_init+0x7c>
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80002082:	d8 02       	popm	pc
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	20 bc       	sub	r12,11

80002088 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002088:	fe 68 14 00 	mov	r8,-125952
8000208c:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000208e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002092:	91 09       	st.w	r8[0x0],r9
}
80002094:	5e fc       	retal	r12
80002096:	d7 03       	nop

80002098 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002098:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000209a:	e0 68 8a 3f 	mov	r8,35391
8000209e:	ea 18 01 f7 	orh	r8,0x1f7
800020a2:	10 3c       	cp.w	r12,r8
800020a4:	e0 88 00 06 	brls	800020b0 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
800020a8:	30 1c       	mov	r12,1
800020aa:	f0 1f 00 04 	mcall	800020b8 <flashc_set_bus_freq+0x20>
800020ae:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
800020b0:	30 0c       	mov	r12,0
800020b2:	f0 1f 00 02 	mcall	800020b8 <flashc_set_bus_freq+0x20>
800020b6:	d8 02       	popm	pc
800020b8:	80 00       	ld.sh	r0,r0[0x0]
800020ba:	20 88       	sub	r8,8

800020bc <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020bc:	f8 08 16 05 	lsr	r8,r12,0x5
800020c0:	a9 68       	lsl	r8,0x8
800020c2:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800020c6:	16 99       	mov	r9,r11
800020c8:	e2 19 00 04 	andl	r9,0x4,COH
800020cc:	c0 70       	breq	800020da <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800020ce:	30 19       	mov	r9,1
800020d0:	f2 0c 09 49 	lsl	r9,r9,r12
800020d4:	f1 49 00 74 	st.w	r8[116],r9
800020d8:	c0 68       	rjmp	800020e4 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800020da:	30 19       	mov	r9,1
800020dc:	f2 0c 09 49 	lsl	r9,r9,r12
800020e0:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800020e4:	16 99       	mov	r9,r11
800020e6:	e2 19 00 80 	andl	r9,0x80,COH
800020ea:	c2 40       	breq	80002132 <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800020ec:	16 99       	mov	r9,r11
800020ee:	e2 19 01 80 	andl	r9,0x180,COH
800020f2:	c0 90       	breq	80002104 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800020f4:	30 19       	mov	r9,1
800020f6:	f2 0c 09 49 	lsl	r9,r9,r12
800020fa:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800020fe:	f1 49 00 b8 	st.w	r8[184],r9
80002102:	c1 88       	rjmp	80002132 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80002104:	16 99       	mov	r9,r11
80002106:	e2 19 02 80 	andl	r9,0x280,COH
8000210a:	c0 90       	breq	8000211c <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
8000210c:	30 19       	mov	r9,1
8000210e:	f2 0c 09 49 	lsl	r9,r9,r12
80002112:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002116:	f1 49 00 b8 	st.w	r8[184],r9
8000211a:	c0 c8       	rjmp	80002132 <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
8000211c:	16 99       	mov	r9,r11
8000211e:	e2 19 03 80 	andl	r9,0x380,COH
80002122:	c0 80       	breq	80002132 <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002124:	30 19       	mov	r9,1
80002126:	f2 0c 09 49 	lsl	r9,r9,r12
8000212a:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000212e:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002132:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002136:	c1 50       	breq	80002160 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002138:	e2 1b 00 02 	andl	r11,0x2,COH
8000213c:	c0 70       	breq	8000214a <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000213e:	30 19       	mov	r9,1
80002140:	f2 0c 09 49 	lsl	r9,r9,r12
80002144:	f1 49 00 54 	st.w	r8[84],r9
80002148:	c0 68       	rjmp	80002154 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000214a:	30 19       	mov	r9,1
8000214c:	f2 0c 09 49 	lsl	r9,r9,r12
80002150:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002154:	30 19       	mov	r9,1
80002156:	f2 0c 09 49 	lsl	r9,r9,r12
8000215a:	f1 49 00 44 	st.w	r8[68],r9
8000215e:	c0 68       	rjmp	8000216a <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002160:	30 19       	mov	r9,1
80002162:	f2 0c 09 49 	lsl	r9,r9,r12
80002166:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000216a:	30 19       	mov	r9,1
8000216c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002170:	91 1c       	st.w	r8[0x4],r12
}
80002172:	5e fc       	retal	r12

80002174 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002174:	fe 78 08 00 	mov	r8,-63488
80002178:	e0 69 00 83 	mov	r9,131
8000217c:	f2 0c 01 0c 	sub	r12,r9,r12
80002180:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002184:	f2 ca ff c0 	sub	r10,r9,-64
80002188:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000218c:	58 08       	cp.w	r8,0
8000218e:	c0 21       	brne	80002192 <_get_interrupt_handler+0x1e>
80002190:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
80002192:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002196:	48 5a       	lddpc	r10,800021a8 <_get_interrupt_handler+0x34>
80002198:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000219c:	f0 08 11 1f 	rsub	r8,r8,31
800021a0:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800021a2:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800021a6:	5e fc       	retal	r12
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	28 00       	sub	r0,-128

800021ac <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800021ac:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800021b0:	fe c0 fb b0 	sub	r0,pc,-1104

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800021b4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800021b8:	d5 53       	csrf	0x15
  cp      r0, r1
800021ba:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800021bc:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800021be:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800021c0:	c0 72       	brcc	800021ce <idata_load_loop_end>
  st.d    r0++, r4
800021c2:	fe c2 f9 22 	sub	r2,pc,-1758

800021c6 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800021c6:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800021c8:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800021ca:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021cc:	cf d3       	brcs	800021c6 <idata_load_loop>

800021ce <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800021ce:	30 80       	mov	r0,8
  mov     r2, 0
800021d0:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800021d4:	02 30       	cp.w	r0,r1
  cp      r0, r1
800021d6:	c0 62       	brcc	800021e2 <udata_clear_loop_end>
  brlo    udata_clear_loop
800021d8:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800021da:	30 03       	mov	r3,0

800021dc <udata_clear_loop>:
800021dc:	a1 22       	st.d	r0++,r2
800021de:	02 30       	cp.w	r0,r1
800021e0:	cf e3       	brcs	800021dc <udata_clear_loop>

800021e2 <udata_clear_loop_end>:
800021e2:	fe cf ff 26 	sub	pc,pc,-218
800021e6:	d7 03       	nop

800021e8 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800021e8:	d4 01       	pushm	lr
800021ea:	20 1d       	sub	sp,4

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800021ec:	fe 78 0c 00 	mov	r8,-62464
800021f0:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
800021f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021f6:	c2 b1       	brne	8000224c <sysclk_init+0x64>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800021f8:	fe 78 0c 00 	mov	r8,-62464
800021fc:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
800021fe:	e2 18 00 80 	andl	r8,0x80,COH
80002202:	c1 91       	brne	80002234 <sysclk_init+0x4c>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002204:	e1 b8 00 00 	mfsr	r8,0x0
80002208:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000220a:	d3 03       	ssrf	0x10

	return flags;
8000220c:	40 09       	lddsp	r9,sp[0x0]
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000220e:	fe 78 0c 00 	mov	r8,-62464
80002212:	e0 6a 03 07 	mov	r10,775
80002216:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002218:	70 0a       	ld.w	r10,r8[0x0]
8000221a:	a3 aa       	sbr	r10,0x2
8000221c:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000221e:	12 98       	mov	r8,r9
80002220:	e6 18 00 01 	andh	r8,0x1,COH
80002224:	c0 21       	brne	80002228 <sysclk_init+0x40>
      cpu_irq_enable();
80002226:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80002228:	fe 79 0c 00 	mov	r9,-62464
8000222c:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
8000222e:	e2 18 00 80 	andl	r8,0x80,COH
80002232:	cf d0       	breq	8000222c <sysclk_init+0x44>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80002234:	fe 78 0c 00 	mov	r8,-62464
80002238:	e0 69 02 05 	mov	r9,517
8000223c:	ea 19 3f 0a 	orh	r9,0x3f0a
80002240:	91 89       	st.w	r8[0x20],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80002242:	10 99       	mov	r9,r8
80002244:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80002246:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000224a:	cf d0       	breq	80002244 <sysclk_init+0x5c>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000224c:	e0 6c 14 80 	mov	r12,5248
80002250:	ea 1c 03 ef 	orh	r12,0x3ef
80002254:	f0 1f 00 0b 	mcall	80002280 <sysclk_init+0x98>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002258:	e1 b8 00 00 	mfsr	r8,0x0
8000225c:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000225e:	d3 03       	ssrf	0x10

	return flags;
80002260:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80002262:	fe 78 0c 00 	mov	r8,-62464
80002266:	70 0a       	ld.w	r10,r8[0x0]
80002268:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000226c:	a1 ba       	sbr	r10,0x1
	AVR32_PM.mcctrl = mcctrl;
8000226e:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002270:	12 98       	mov	r8,r9
80002272:	e6 18 00 01 	andh	r8,0x1,COH
80002276:	c0 21       	brne	8000227a <sysclk_init+0x92>
      cpu_irq_enable();
80002278:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000227a:	2f fd       	sub	sp,-4
8000227c:	d8 02       	popm	pc
8000227e:	00 00       	add	r0,r0
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	20 98       	sub	r8,9

80002284 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80002284:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002286:	e1 b8 00 00 	mfsr	r8,0x0
8000228a:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000228c:	d3 03       	ssrf	0x10

	return flags;
8000228e:	40 0a       	lddsp	r10,sp[0x0]

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80002290:	fe 78 0c 00 	mov	r8,-62464
80002294:	71 59       	ld.w	r9,r8[0x54]
80002296:	e2 19 00 40 	andl	r9,0x40,COH
8000229a:	cf d0       	breq	80002294 <sysclk_priv_enable_module+0x10>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000229c:	a3 6c       	lsl	r12,0x2
8000229e:	e0 2c f3 f8 	sub	r12,62456
800022a2:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800022a4:	30 19       	mov	r9,1
800022a6:	f2 0b 09 4b 	lsl	r11,r9,r11
800022aa:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800022ac:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800022ae:	14 98       	mov	r8,r10
800022b0:	e6 18 00 01 	andh	r8,0x1,COH
800022b4:	c0 21       	brne	800022b8 <sysclk_priv_enable_module+0x34>
      cpu_irq_enable();
800022b6:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800022b8:	2f fd       	sub	sp,-4
800022ba:	5e fc       	retal	r12

800022bc <main>:
 */
#include <asf.h>
#include "conf_example.h"

int main(void)
{
800022bc:	eb cd 40 c0 	pushm	r6-r7,lr
	/* Use static volatile to make it available in debug watch */
	static volatile ioport_port_mask_t port_val;

	sysclk_init();
800022c0:	f0 1f 00 29 	mcall	80002364 <main+0xa8>
	board_init();
800022c4:	f0 1f 00 29 	mcall	80002368 <main+0xac>
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
800022c8:	30 1b       	mov	r11,1
800022ca:	30 2c       	mov	r12,2
800022cc:	f0 1f 00 28 	mcall	8000236c <main+0xb0>

__always_inline static void arch_ioport_set_port_dir(ioport_port_t port,
		ioport_port_mask_t mask, unsigned char group_direction)
{
	if (group_direction == IOPORT_DIR_OUTPUT) {
		arch_ioport_port_to_base(port)->oders = mask;
800022d0:	fe 78 11 00 	mov	r8,-61184
800022d4:	fc 19 78 00 	movh	r9,0x7800
800022d8:	f1 49 00 44 	st.w	r8[68],r9
	} else if (group_direction == IOPORT_DIR_INPUT) {
		arch_ioport_port_to_base(port)->oderc = mask;
800022dc:	fe 79 12 00 	mov	r9,-60928
800022e0:	fc 1a 01 24 	movh	r10,0x124
800022e4:	f3 4a 00 48 	st.w	r9[72],r10
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile avr32_gpio_port_t *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->puers = mask;
800022e8:	f3 4a 00 74 	st.w	r9[116],r10
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->gfers = mask;
	} else {
		base->gferc = mask;
800022ec:	f3 4a 00 c8 	st.w	r9[200],r10
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->pmr0s = mask;
	} else {
		base->pmr0c = mask;
800022f0:	93 6a       	st.w	r9[0x18],r10
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->pmr1s = mask;
	} else {
		base->pmr1c = mask;
800022f2:	93 aa       	st.w	r9[0x28],r10
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_value level)
{
	volatile avr32_gpio_port_t *base = arch_ioport_port_to_base(port);
	if (level) {
		base->ovrs |= mask;
800022f4:	71 59       	ld.w	r9,r8[0x54]
800022f6:	ea 19 78 00 	orh	r9,0x7800
800022fa:	f1 49 00 54 	st.w	r8[84],r9
		base->ovrc &= ~mask;
800022fe:	71 69       	ld.w	r9,r8[0x58]
80002300:	e4 19 87 ff 	andh	r9,0x87ff
80002304:	f1 49 00 58 	st.w	r8[88],r9
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002308:	e0 68 03 e8 	mov	r8,1000
8000230c:	30 09       	mov	r9,0
8000230e:	e0 6a 0d e7 	mov	r10,3559
80002312:	ea 1a ae f4 	orh	r10,0xaef4
80002316:	30 7b       	mov	r11,7
80002318:	f0 1f 00 16 	mcall	80002370 <main+0xb4>
8000231c:	14 96       	mov	r6,r10
}

__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->ovrt = mask;
8000231e:	fe 77 11 00 	mov	r7,-61184
80002322:	fc 1e 78 00 	movh	lr,0x7800
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->pvr & mask;
80002326:	fe 7a 12 00 	mov	r10,-60928
		delay_ms(500);

#ifdef EXAMPLE_BUTTON_PORT
		/* Get value from button port */
		/* Use watch with debugger to see it */
		port_val = ioport_get_port_level(EXAMPLE_BUTTON_PORT,
8000232a:	49 3c       	lddpc	r12,80002374 <main+0xb8>
}

__always_inline static void arch_ioport_toggle_port_level(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->ovrt = mask;
8000232c:	ef 4e 00 5c 	st.w	r7[92],lr
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002330:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002334:	f0 06 00 0b 	add	r11,r8,r6
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002338:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000233c:	16 38       	cp.w	r8,r11
8000233e:	e0 88 00 08 	brls	8000234e <main+0x92>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002342:	12 38       	cp.w	r8,r9
80002344:	fe 98 ff fa 	brls	80002338 <main+0x7c>
80002348:	12 3b       	cp.w	r11,r9
8000234a:	c0 73       	brcs	80002358 <main+0x9c>
8000234c:	cf 6b       	rjmp	80002338 <main+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000234e:	12 38       	cp.w	r8,r9
80002350:	e0 8b 00 04 	brhi	80002358 <main+0x9c>
80002354:	12 3b       	cp.w	r11,r9
80002356:	cf 12       	brcc	80002338 <main+0x7c>
}

__always_inline static ioport_port_mask_t arch_ioport_get_port_level(
		ioport_port_t port, ioport_port_mask_t mask)
{
	return arch_ioport_port_to_base(port)->pvr & mask;
80002358:	75 88       	ld.w	r8,r10[0x60]
8000235a:	e6 18 01 24 	andh	r8,0x124,COH
8000235e:	99 08       	st.w	r12[0x0],r8
				EXAMPLE_BUTTON_MASK);
#endif
	}
80002360:	ce 6b       	rjmp	8000232c <main+0x70>
80002362:	00 00       	add	r0,r0
80002364:	80 00       	ld.sh	r0,r0[0x0]
80002366:	21 e8       	sub	r8,30
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	20 08       	sub	r8,0
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 84       	sub	r4,40
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	23 78       	sub	r8,55
80002374:	00 00       	add	r0,r0
80002376:	00 f4       	st.b	--r0,r4

80002378 <__avr32_udiv64>:
80002378:	d4 31       	pushm	r0-r7,lr
8000237a:	1a 97       	mov	r7,sp
8000237c:	20 3d       	sub	sp,12
8000237e:	10 9c       	mov	r12,r8
80002380:	12 9e       	mov	lr,r9
80002382:	14 93       	mov	r3,r10
80002384:	58 09       	cp.w	r9,0
80002386:	e0 81 00 bd 	brne	80002500 <__avr32_udiv64+0x188>
8000238a:	16 38       	cp.w	r8,r11
8000238c:	e0 88 00 40 	brls	8000240c <__avr32_udiv64+0x94>
80002390:	f0 08 12 00 	clz	r8,r8
80002394:	c0 d0       	breq	800023ae <__avr32_udiv64+0x36>
80002396:	f6 08 09 4b 	lsl	r11,r11,r8
8000239a:	f0 09 11 20 	rsub	r9,r8,32
8000239e:	f8 08 09 4c 	lsl	r12,r12,r8
800023a2:	f4 09 0a 49 	lsr	r9,r10,r9
800023a6:	f4 08 09 43 	lsl	r3,r10,r8
800023aa:	f3 eb 10 0b 	or	r11,r9,r11
800023ae:	f8 0e 16 10 	lsr	lr,r12,0x10
800023b2:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800023b6:	f6 0e 0d 00 	divu	r0,r11,lr
800023ba:	e6 0b 16 10 	lsr	r11,r3,0x10
800023be:	00 99       	mov	r9,r0
800023c0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800023c4:	e0 0a 02 48 	mul	r8,r0,r10
800023c8:	10 3b       	cp.w	r11,r8
800023ca:	c0 a2       	brcc	800023de <__avr32_udiv64+0x66>
800023cc:	20 19       	sub	r9,1
800023ce:	18 0b       	add	r11,r12
800023d0:	18 3b       	cp.w	r11,r12
800023d2:	c0 63       	brcs	800023de <__avr32_udiv64+0x66>
800023d4:	10 3b       	cp.w	r11,r8
800023d6:	f7 b9 03 01 	sublo	r9,1
800023da:	f7 dc e3 0b 	addcs	r11,r11,r12
800023de:	f6 08 01 01 	sub	r1,r11,r8
800023e2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800023e6:	e2 0e 0d 00 	divu	r0,r1,lr
800023ea:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800023ee:	00 98       	mov	r8,r0
800023f0:	e0 0a 02 4a 	mul	r10,r0,r10
800023f4:	14 33       	cp.w	r3,r10
800023f6:	c0 82       	brcc	80002406 <__avr32_udiv64+0x8e>
800023f8:	20 18       	sub	r8,1
800023fa:	18 03       	add	r3,r12
800023fc:	18 33       	cp.w	r3,r12
800023fe:	c0 43       	brcs	80002406 <__avr32_udiv64+0x8e>
80002400:	14 33       	cp.w	r3,r10
80002402:	f7 b8 03 01 	sublo	r8,1
80002406:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000240a:	cd f8       	rjmp	800025c8 <__avr32_udiv64+0x250>
8000240c:	58 08       	cp.w	r8,0
8000240e:	c0 51       	brne	80002418 <__avr32_udiv64+0xa0>
80002410:	30 19       	mov	r9,1
80002412:	f2 08 0d 08 	divu	r8,r9,r8
80002416:	10 9c       	mov	r12,r8
80002418:	f8 06 12 00 	clz	r6,r12
8000241c:	c0 41       	brne	80002424 <__avr32_udiv64+0xac>
8000241e:	18 1b       	sub	r11,r12
80002420:	30 19       	mov	r9,1
80002422:	c4 08       	rjmp	800024a2 <__avr32_udiv64+0x12a>
80002424:	ec 01 11 20 	rsub	r1,r6,32
80002428:	f4 01 0a 49 	lsr	r9,r10,r1
8000242c:	f8 06 09 4c 	lsl	r12,r12,r6
80002430:	f6 06 09 48 	lsl	r8,r11,r6
80002434:	f6 01 0a 41 	lsr	r1,r11,r1
80002438:	f3 e8 10 08 	or	r8,r9,r8
8000243c:	f8 03 16 10 	lsr	r3,r12,0x10
80002440:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80002444:	e2 03 0d 00 	divu	r0,r1,r3
80002448:	f0 0b 16 10 	lsr	r11,r8,0x10
8000244c:	00 9e       	mov	lr,r0
8000244e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002452:	e0 05 02 49 	mul	r9,r0,r5
80002456:	12 3b       	cp.w	r11,r9
80002458:	c0 a2       	brcc	8000246c <__avr32_udiv64+0xf4>
8000245a:	20 1e       	sub	lr,1
8000245c:	18 0b       	add	r11,r12
8000245e:	18 3b       	cp.w	r11,r12
80002460:	c0 63       	brcs	8000246c <__avr32_udiv64+0xf4>
80002462:	12 3b       	cp.w	r11,r9
80002464:	f7 be 03 01 	sublo	lr,1
80002468:	f7 dc e3 0b 	addcs	r11,r11,r12
8000246c:	12 1b       	sub	r11,r9
8000246e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80002472:	f6 03 0d 02 	divu	r2,r11,r3
80002476:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000247a:	04 99       	mov	r9,r2
8000247c:	e4 05 02 4b 	mul	r11,r2,r5
80002480:	16 38       	cp.w	r8,r11
80002482:	c0 a2       	brcc	80002496 <__avr32_udiv64+0x11e>
80002484:	20 19       	sub	r9,1
80002486:	18 08       	add	r8,r12
80002488:	18 38       	cp.w	r8,r12
8000248a:	c0 63       	brcs	80002496 <__avr32_udiv64+0x11e>
8000248c:	16 38       	cp.w	r8,r11
8000248e:	f7 b9 03 01 	sublo	r9,1
80002492:	f1 dc e3 08 	addcs	r8,r8,r12
80002496:	f4 06 09 43 	lsl	r3,r10,r6
8000249a:	f0 0b 01 0b 	sub	r11,r8,r11
8000249e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800024a2:	f8 06 16 10 	lsr	r6,r12,0x10
800024a6:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800024aa:	f6 06 0d 00 	divu	r0,r11,r6
800024ae:	e6 0b 16 10 	lsr	r11,r3,0x10
800024b2:	00 9a       	mov	r10,r0
800024b4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800024b8:	e0 0e 02 48 	mul	r8,r0,lr
800024bc:	10 3b       	cp.w	r11,r8
800024be:	c0 a2       	brcc	800024d2 <__avr32_udiv64+0x15a>
800024c0:	20 1a       	sub	r10,1
800024c2:	18 0b       	add	r11,r12
800024c4:	18 3b       	cp.w	r11,r12
800024c6:	c0 63       	brcs	800024d2 <__avr32_udiv64+0x15a>
800024c8:	10 3b       	cp.w	r11,r8
800024ca:	f7 ba 03 01 	sublo	r10,1
800024ce:	f7 dc e3 0b 	addcs	r11,r11,r12
800024d2:	f6 08 01 01 	sub	r1,r11,r8
800024d6:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800024da:	e2 06 0d 00 	divu	r0,r1,r6
800024de:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800024e2:	00 98       	mov	r8,r0
800024e4:	e0 0e 02 4b 	mul	r11,r0,lr
800024e8:	16 33       	cp.w	r3,r11
800024ea:	c0 82       	brcc	800024fa <__avr32_udiv64+0x182>
800024ec:	20 18       	sub	r8,1
800024ee:	18 03       	add	r3,r12
800024f0:	18 33       	cp.w	r3,r12
800024f2:	c0 43       	brcs	800024fa <__avr32_udiv64+0x182>
800024f4:	16 33       	cp.w	r3,r11
800024f6:	f7 b8 03 01 	sublo	r8,1
800024fa:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800024fe:	c6 98       	rjmp	800025d0 <__avr32_udiv64+0x258>
80002500:	16 39       	cp.w	r9,r11
80002502:	e0 8b 00 65 	brhi	800025cc <__avr32_udiv64+0x254>
80002506:	f2 09 12 00 	clz	r9,r9
8000250a:	c0 b1       	brne	80002520 <__avr32_udiv64+0x1a8>
8000250c:	10 3a       	cp.w	r10,r8
8000250e:	5f 2a       	srhs	r10
80002510:	1c 3b       	cp.w	r11,lr
80002512:	5f b8       	srhi	r8
80002514:	10 4a       	or	r10,r8
80002516:	f2 0a 18 00 	cp.b	r10,r9
8000251a:	c5 90       	breq	800025cc <__avr32_udiv64+0x254>
8000251c:	30 18       	mov	r8,1
8000251e:	c5 98       	rjmp	800025d0 <__avr32_udiv64+0x258>
80002520:	f0 09 09 46 	lsl	r6,r8,r9
80002524:	f2 03 11 20 	rsub	r3,r9,32
80002528:	fc 09 09 4e 	lsl	lr,lr,r9
8000252c:	f0 03 0a 48 	lsr	r8,r8,r3
80002530:	f6 09 09 4c 	lsl	r12,r11,r9
80002534:	f4 03 0a 42 	lsr	r2,r10,r3
80002538:	ef 46 ff f4 	st.w	r7[-12],r6
8000253c:	f6 03 0a 43 	lsr	r3,r11,r3
80002540:	18 42       	or	r2,r12
80002542:	f1 ee 10 0c 	or	r12,r8,lr
80002546:	f8 01 16 10 	lsr	r1,r12,0x10
8000254a:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000254e:	e6 01 0d 04 	divu	r4,r3,r1
80002552:	e4 03 16 10 	lsr	r3,r2,0x10
80002556:	08 9e       	mov	lr,r4
80002558:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000255c:	e8 06 02 48 	mul	r8,r4,r6
80002560:	10 33       	cp.w	r3,r8
80002562:	c0 a2       	brcc	80002576 <__avr32_udiv64+0x1fe>
80002564:	20 1e       	sub	lr,1
80002566:	18 03       	add	r3,r12
80002568:	18 33       	cp.w	r3,r12
8000256a:	c0 63       	brcs	80002576 <__avr32_udiv64+0x1fe>
8000256c:	10 33       	cp.w	r3,r8
8000256e:	f7 be 03 01 	sublo	lr,1
80002572:	e7 dc e3 03 	addcs	r3,r3,r12
80002576:	10 13       	sub	r3,r8
80002578:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000257c:	e6 01 0d 00 	divu	r0,r3,r1
80002580:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002584:	00 98       	mov	r8,r0
80002586:	e0 06 02 46 	mul	r6,r0,r6
8000258a:	0c 3b       	cp.w	r11,r6
8000258c:	c0 a2       	brcc	800025a0 <__avr32_udiv64+0x228>
8000258e:	20 18       	sub	r8,1
80002590:	18 0b       	add	r11,r12
80002592:	18 3b       	cp.w	r11,r12
80002594:	c0 63       	brcs	800025a0 <__avr32_udiv64+0x228>
80002596:	0c 3b       	cp.w	r11,r6
80002598:	f7 dc e3 0b 	addcs	r11,r11,r12
8000259c:	f7 b8 03 01 	sublo	r8,1
800025a0:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800025a4:	ee f4 ff f4 	ld.w	r4,r7[-12]
800025a8:	0c 1b       	sub	r11,r6
800025aa:	f0 04 06 42 	mulu.d	r2,r8,r4
800025ae:	06 95       	mov	r5,r3
800025b0:	16 35       	cp.w	r5,r11
800025b2:	e0 8b 00 0a 	brhi	800025c6 <__avr32_udiv64+0x24e>
800025b6:	5f 0b       	sreq	r11
800025b8:	f4 09 09 49 	lsl	r9,r10,r9
800025bc:	12 32       	cp.w	r2,r9
800025be:	5f b9       	srhi	r9
800025c0:	f7 e9 00 09 	and	r9,r11,r9
800025c4:	c0 60       	breq	800025d0 <__avr32_udiv64+0x258>
800025c6:	20 18       	sub	r8,1
800025c8:	30 09       	mov	r9,0
800025ca:	c0 38       	rjmp	800025d0 <__avr32_udiv64+0x258>
800025cc:	30 09       	mov	r9,0
800025ce:	12 98       	mov	r8,r9
800025d0:	10 9a       	mov	r10,r8
800025d2:	12 93       	mov	r3,r9
800025d4:	10 92       	mov	r2,r8
800025d6:	12 9b       	mov	r11,r9
800025d8:	2f dd       	sub	sp,-12
800025da:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80002600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002600:	c0 08       	rjmp	80002600 <_evba>
	...

80002604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002604:	c0 08       	rjmp	80002604 <_handle_TLB_Multiple_Hit>
	...

80002608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002608:	c0 08       	rjmp	80002608 <_handle_Bus_Error_Data_Fetch>
	...

8000260c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000260c:	c0 08       	rjmp	8000260c <_handle_Bus_Error_Instruction_Fetch>
	...

80002610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002610:	c0 08       	rjmp	80002610 <_handle_NMI>
	...

80002614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002614:	c0 08       	rjmp	80002614 <_handle_Instruction_Address>
	...

80002618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002618:	c0 08       	rjmp	80002618 <_handle_ITLB_Protection>
	...

8000261c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000261c:	c0 08       	rjmp	8000261c <_handle_Breakpoint>
	...

80002620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002620:	c0 08       	rjmp	80002620 <_handle_Illegal_Opcode>
	...

80002624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002624:	c0 08       	rjmp	80002624 <_handle_Unimplemented_Instruction>
	...

80002628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002628:	c0 08       	rjmp	80002628 <_handle_Privilege_Violation>
	...

8000262c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000262c:	c0 08       	rjmp	8000262c <_handle_Floating_Point>
	...

80002630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002630:	c0 08       	rjmp	80002630 <_handle_Coprocessor_Absent>
	...

80002634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002634:	c0 08       	rjmp	80002634 <_handle_Data_Address_Read>
	...

80002638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002638:	c0 08       	rjmp	80002638 <_handle_Data_Address_Write>
	...

8000263c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000263c:	c0 08       	rjmp	8000263c <_handle_DTLB_Protection_Read>
	...

80002640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002640:	c0 08       	rjmp	80002640 <_handle_DTLB_Protection_Write>
	...

80002644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002644:	c0 08       	rjmp	80002644 <_handle_DTLB_Modified>
	...

80002650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002650:	c0 08       	rjmp	80002650 <_handle_ITLB_Miss>
	...

80002660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002660:	c0 08       	rjmp	80002660 <_handle_DTLB_Miss_Read>
	...

80002670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002670:	c0 08       	rjmp	80002670 <_handle_DTLB_Miss_Write>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002700:	c0 08       	rjmp	80002700 <_handle_Supervisor_Call>
80002702:	d7 03       	nop

80002704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002704:	30 0c       	mov	r12,0
80002706:	fe b0 fd 37 	rcall	80002174 <_get_interrupt_handler>
8000270a:	58 0c       	cp.w	r12,0
8000270c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002710:	d6 03       	rete

80002712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002712:	30 1c       	mov	r12,1
80002714:	fe b0 fd 30 	rcall	80002174 <_get_interrupt_handler>
80002718:	58 0c       	cp.w	r12,0
8000271a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000271e:	d6 03       	rete

80002720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002720:	30 2c       	mov	r12,2
80002722:	fe b0 fd 29 	rcall	80002174 <_get_interrupt_handler>
80002726:	58 0c       	cp.w	r12,0
80002728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000272c:	d6 03       	rete

8000272e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000272e:	30 3c       	mov	r12,3
80002730:	fe b0 fd 22 	rcall	80002174 <_get_interrupt_handler>
80002734:	58 0c       	cp.w	r12,0
80002736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000273a:	d6 03       	rete
8000273c:	d7 03       	nop
8000273e:	d7 03       	nop
80002740:	d7 03       	nop
80002742:	d7 03       	nop
80002744:	d7 03       	nop
80002746:	d7 03       	nop
80002748:	d7 03       	nop
8000274a:	d7 03       	nop
8000274c:	d7 03       	nop
8000274e:	d7 03       	nop
80002750:	d7 03       	nop
80002752:	d7 03       	nop
80002754:	d7 03       	nop
80002756:	d7 03       	nop
80002758:	d7 03       	nop
8000275a:	d7 03       	nop
8000275c:	d7 03       	nop
8000275e:	d7 03       	nop
80002760:	d7 03       	nop
80002762:	d7 03       	nop
80002764:	d7 03       	nop
80002766:	d7 03       	nop
80002768:	d7 03       	nop
8000276a:	d7 03       	nop
8000276c:	d7 03       	nop
8000276e:	d7 03       	nop
80002770:	d7 03       	nop
80002772:	d7 03       	nop
80002774:	d7 03       	nop
80002776:	d7 03       	nop
80002778:	d7 03       	nop
8000277a:	d7 03       	nop
8000277c:	d7 03       	nop
8000277e:	d7 03       	nop
80002780:	d7 03       	nop
80002782:	d7 03       	nop
80002784:	d7 03       	nop
80002786:	d7 03       	nop
80002788:	d7 03       	nop
8000278a:	d7 03       	nop
8000278c:	d7 03       	nop
8000278e:	d7 03       	nop
80002790:	d7 03       	nop
80002792:	d7 03       	nop
80002794:	d7 03       	nop
80002796:	d7 03       	nop
80002798:	d7 03       	nop
8000279a:	d7 03       	nop
8000279c:	d7 03       	nop
8000279e:	d7 03       	nop
800027a0:	d7 03       	nop
800027a2:	d7 03       	nop
800027a4:	d7 03       	nop
800027a6:	d7 03       	nop
800027a8:	d7 03       	nop
800027aa:	d7 03       	nop
800027ac:	d7 03       	nop
800027ae:	d7 03       	nop
800027b0:	d7 03       	nop
800027b2:	d7 03       	nop
800027b4:	d7 03       	nop
800027b6:	d7 03       	nop
800027b8:	d7 03       	nop
800027ba:	d7 03       	nop
800027bc:	d7 03       	nop
800027be:	d7 03       	nop
800027c0:	d7 03       	nop
800027c2:	d7 03       	nop
800027c4:	d7 03       	nop
800027c6:	d7 03       	nop
800027c8:	d7 03       	nop
800027ca:	d7 03       	nop
800027cc:	d7 03       	nop
800027ce:	d7 03       	nop
800027d0:	d7 03       	nop
800027d2:	d7 03       	nop
800027d4:	d7 03       	nop
800027d6:	d7 03       	nop
800027d8:	d7 03       	nop
800027da:	d7 03       	nop
800027dc:	d7 03       	nop
800027de:	d7 03       	nop
800027e0:	d7 03       	nop
800027e2:	d7 03       	nop
800027e4:	d7 03       	nop
800027e6:	d7 03       	nop
800027e8:	d7 03       	nop
800027ea:	d7 03       	nop
800027ec:	d7 03       	nop
800027ee:	d7 03       	nop
800027f0:	d7 03       	nop
800027f2:	d7 03       	nop
800027f4:	d7 03       	nop
800027f6:	d7 03       	nop
800027f8:	d7 03       	nop
800027fa:	d7 03       	nop
800027fc:	d7 03       	nop
800027fe:	d7 03       	nop
