
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000771  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069f  00000000  00000000  00000a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f2  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e1  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint16_t ending_cnt;

int main(void)
{
	//LED as output
	DDRD = (1<<PIND7);
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0;				//no Pull-up on ICP1
  94:	15 b8       	out	0x05, r1	; 5
	
	TCCR1A = 0;						//Defaults
  96:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	
	//TCCR1B = 10x00101
	//Enable noise cancel, look for falling edge, Clock divided by 1024
	TCCR1B =  (1<<ICES1) | (1<<ICNC1) | (1<<CS12) | (1<<CS10);
  9a:	85 ec       	ldi	r24, 0xC5	; 197
  9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	TIMSK1 |= (1<<ICIE1);			//Input capture interrupt Enable
  a0:	ef e6       	ldi	r30, 0x6F	; 111
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	
	sei();							//Enable interrupts
  aa:	78 94       	sei
	
	uint16_t timediff;
	while(1){
		if(current_edge == 2){
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x1c>
			//Check for normal (no wrap-around)
			if (starting_cnt < ending_cnt){
  b4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <starting_cnt>
  b8:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <starting_cnt+0x1>
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ending_cnt>
  c0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ending_cnt+0x1>
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	58 f4       	brcc	.+22     	; 0xe0 <main+0x50>
				//A - B
				timediff = ending_cnt - starting_cnt;
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ending_cnt>
  ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ending_cnt+0x1>
  d2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <starting_cnt>
  d6:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <starting_cnt+0x1>
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	0c c0       	rjmp	.+24     	; 0xf8 <main+0x68>
				} else {
				//wrap around
				//(0xffff + A) - B, done without requiring signed math
				timediff = starting_cnt - ending_cnt;
  e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <starting_cnt>
  e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <starting_cnt+0x1>
  e8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ending_cnt>
  ec:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <ending_cnt+0x1>
  f0:	82 1b       	sub	r24, r18
  f2:	93 0b       	sbc	r25, r19
				timediff = 0xffff - timediff;
  f4:	80 95       	com	r24
  f6:	90 95       	com	r25
			}
			if ((timediff > 1000) && (timediff < 3000)){
  f8:	89 5e       	subi	r24, 0xE9	; 233
  fa:	93 40       	sbci	r25, 0x03	; 3
  fc:	8f 3c       	cpi	r24, 0xCF	; 207
  fe:	97 40       	sbci	r25, 0x07	; 7
 100:	50 f4       	brcc	.+20     	; 0x116 <main+0x86>
				LED_ON();	// Set Port D Bit 7
 102:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	93 e2       	ldi	r25, 0x23	; 35
 108:	24 ef       	ldi	r18, 0xF4	; 244
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x7a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x84>
 114:	00 00       	nop
				_delay_ms(5000);
			}
			LED_OFF();  //Reset Port D Bit 7
 116:	5f 98       	cbi	0x0b, 7	; 11
			current_edge = 0;
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 11c:	c7 cf       	rjmp	.-114    	; 0xac <main+0x1c>

0000011e <__vector_10>:
		}
	}
}

ISR(TIMER1_CAPT_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	if(current_edge == 0){
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	81 11       	cpse	r24, r1
 136:	11 c0       	rjmp	.+34     	; 0x15a <__vector_10+0x3c>
		
		//Save timestamp
		starting_cnt = ICR1;
 138:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 13c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 140:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <starting_cnt+0x1>
 144:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <starting_cnt>
		
		//Switch to falling edge
		TCCR1B &= ~(1<<ICES1);
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	80 83       	st	Z, r24
		
		current_edge = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 158:	14 c0       	rjmp	.+40     	; 0x182 <__vector_10+0x64>
		
		} else if (current_edge == 1){
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	81 f4       	brne	.+32     	; 0x182 <__vector_10+0x64>
		//Save timestamp
		ending_cnt = ICR1;
 162:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 166:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 16a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <ending_cnt+0x1>
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ending_cnt>
		
		//Switch to rising edge
		TCCR1B |= (1<<ICES1);
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
		
		current_edge = 2;
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	TIFR1 |= (1<<ICF1);
 182:	b5 9a       	sbi	0x16, 5	; 22
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
