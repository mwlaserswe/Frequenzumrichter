
SWE_07_h_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000126  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000693  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000610  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000208  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint8_t BitMuster;

int main(void)
{
    /* Replace with your application code */
	DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		BitMuster = 0xAA;
  94:	2a ea       	ldi	r18, 0xAA	; 170
		PORTB = BitMuster;
//		_delay_ms(2000);
		BitMuster = 0x55;
  96:	95 e5       	ldi	r25, 0x55	; 85
    /* Replace with your application code */
	DDRB = 0xFF;
	
    while (1) 
    {
		BitMuster = 0xAA;
  98:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		PORTB = BitMuster;
  9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a0:	85 b9       	out	0x05, r24	; 5
//		_delay_ms(2000);
		BitMuster = 0x55;
  a2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		PORTB = BitMuster;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	f5 cf       	rjmp	.-22     	; 0x98 <main+0x8>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
