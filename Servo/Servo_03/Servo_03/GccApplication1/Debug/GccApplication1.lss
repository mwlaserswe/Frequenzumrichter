
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cd  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000246  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitInterrupt>:
volatile uint8_t State;


void InitInterrupt (void)
{
	DDRB |= 0x00;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4

	PCICR |= (1 << PCIE0);
  94:	e8 e6       	ldi	r30, 0x68	; 104
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);
  9e:	eb e6       	ldi	r30, 0x6B	; 107
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <__vector_3>:


// Damit rufe ich den Interrupt auf:

ISR(PCINT0_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
	if (State == 0)
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	81 11       	cpse	r24, r1
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <__vector_3+0x1e>
	{
		PORTD |= (1<<LED1);		// Bit set
  be:	5d 9a       	sbi	0x0b, 5	; 11
		State = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_3+0x24>
	}
	else
	{
		PORTD &= ~(1<<LED1);	// Bit reset (~ is complement)
  c8:	5d 98       	cbi	0x0b, 5	; 11
		State = 0;
  ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:


int main (void)
{	DDRD = 0b00100000;		// Define Port D Bit 5 as Output
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00000001;		// Define Port B Bit 0 as pull up
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	85 b9       	out	0x05, r24	; 5

	
	InitInterrupt();
  e2:	0e 94 48 00 	call	0x90	; 0x90 <InitInterrupt>
	sei();
  e6:	78 94       	sei

	while(1)
	{
		PORTD &= ~(1 << PD4);
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <main+0xe>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
