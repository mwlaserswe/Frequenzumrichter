
VFD_sinus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001226  000012da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001226  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800120  00800120  000012fa  2**0
                  ALLOC
  3 .eeprom       00000009  00810000  00810000  000012fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001370  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000027f8  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d0d  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012e3  00000000  00000000  00004a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e8  00000000  00000000  00005d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009be  00000000  00000000  00006128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014ca  00000000  00000000  00006ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	80 c1       	rjmp	.+768    	; 0x302 <__ctors_end>
       2:	9a c1       	rjmp	.+820    	; 0x338 <__bad_interrupt>
       4:	99 c1       	rjmp	.+818    	; 0x338 <__bad_interrupt>
       6:	98 c1       	rjmp	.+816    	; 0x338 <__bad_interrupt>
       8:	97 c1       	rjmp	.+814    	; 0x338 <__bad_interrupt>
       a:	9a c6       	rjmp	.+3380   	; 0xd40 <__vector_5>
       c:	95 c1       	rjmp	.+810    	; 0x338 <__bad_interrupt>
       e:	94 c1       	rjmp	.+808    	; 0x338 <__bad_interrupt>
      10:	93 c1       	rjmp	.+806    	; 0x338 <__bad_interrupt>
      12:	92 c1       	rjmp	.+804    	; 0x338 <__bad_interrupt>
      14:	c4 c6       	rjmp	.+3464   	; 0xd9e <__vector_10>
      16:	90 c1       	rjmp	.+800    	; 0x338 <__bad_interrupt>
      18:	8f c1       	rjmp	.+798    	; 0x338 <__bad_interrupt>
      1a:	8e c1       	rjmp	.+796    	; 0x338 <__bad_interrupt>
      1c:	bf c6       	rjmp	.+3454   	; 0xd9c <__vector_14>
      1e:	be c6       	rjmp	.+3452   	; 0xd9c <__vector_14>
      20:	bc c6       	rjmp	.+3448   	; 0xd9a <__vector_16>
      22:	8a c1       	rjmp	.+788    	; 0x338 <__bad_interrupt>
      24:	89 c1       	rjmp	.+786    	; 0x338 <__bad_interrupt>
      26:	88 c1       	rjmp	.+784    	; 0x338 <__bad_interrupt>
      28:	87 c1       	rjmp	.+782    	; 0x338 <__bad_interrupt>
      2a:	de c7       	rjmp	.+4028   	; 0xfe8 <__vector_21>
      2c:	85 c1       	rjmp	.+778    	; 0x338 <__bad_interrupt>
      2e:	84 c1       	rjmp	.+776    	; 0x338 <__bad_interrupt>
      30:	83 c1       	rjmp	.+774    	; 0x338 <__bad_interrupt>
      32:	82 c1       	rjmp	.+772    	; 0x338 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	46 72       	andi	r20, 0x26	; 38
      36:	65 71       	andi	r22, 0x15	; 21
      38:	20 20       	and	r2, r0
      3a:	56 2f       	mov	r21, r22
      3c:	48 7a       	andi	r20, 0xA8	; 168
      3e:	20 20       	and	r2, r0
      40:	41 6d       	ori	r20, 0xD1	; 209
      42:	70 20       	and	r7, r0
	...

00000045 <__c.2456>:
      45:	50 20 20 20 49 20 20 20 44 20 20 20 20 44 54 20     P   I   D    DT 
	...

00000056 <__c.2388>:
      56:	52 65 61 64 20 44 6f 6e 65 20 20 20 20 20 20 20     Read Done       
	...

00000067 <__c.2386>:
      67:	52 65 61 64 69 6e 67 20 45 45 50 52 4f 4d 20 20     Reading EEPROM  
	...

00000078 <__c.2529>:
      78:	46 72 65 71 20 20 56 2f 48 7a 20 20 41 6d 70 20     Freq  V/Hz  Amp 
	...

00000089 <__c.2527>:
      89:	56 46 20 4d 6f 74 6f 72 20 44 72 69 76 65 0a 00     VF Motor Drive..

00000099 <__c.2441>:
      99:	53 74 6f 72 65 64 20 20 20 20 20 20 20 20 20 20     Stored          
	...

000000aa <__c.2425>:
      aa:	53 74 6f 72 69 6e 67 20 45 45 50 52 4f 4d 20 20     Storing EEPROM  
	...

000000bb <cursorpos>:
      bb:	00 06                                               ..

000000bd <cursorextpos>:
      bd:	00 04 08 0d                                         ....

000000c1 <sineTable>:
      c1:	00 00 dd 08 00 e1 11 00 e5 19 00 e8 21 00 ec 2a     ............!..*
      d1:	00 ef 32 00 f1 3a 00 f4 42 00 f6 4a 00 f8 52 00     ..2..:..B..J..R.
      e1:	fa 5a 00 fc 62 00 fd 69 00 fe 71 00 fe 78 00 ff     .Z..b..i..q..x..
      f1:	80 00 ff 87 00 ff 8e 00 fe 95 00 fe 9b 00 fd a2     ................
     101:	00 fc a8 00 fa ae 00 f8 b4 00 f6 ba 00 f4 c0 00     ................
     111:	f1 c5 00 ef ca 00 ec cf 00 e8 d4 00 e5 d9 00 e1     ................
     121:	dd 00 dd e1 00 d9 e5 00 d4 e8 00 cf ec 00 ca ef     ................
     131:	00 c5 f1 00 c0 f4 00 ba f6 00 b4 f8 00 ae fa 00     ................
     141:	a8 fc 00 a2 fd 00 9b fe 00 95 fe 00 8e ff 00 87     ................
     151:	ff 00 7f ff 00 78 fe 00 71 fe 00 69 fd 00 62 fc     .....x..q..i..b.
     161:	00 5a fa 00 52 f8 00 4a f6 00 42 f4 00 3a f1 00     .Z..R..J..B..:..
     171:	32 ef 00 2a ec 00 21 e8 00 19 e5 00 11 e1 00 08     2..*..!.........
     181:	dd 00 00 e1 08 00 e5 11 00 e8 19 00 ec 21 00 ef     .............!..
     191:	2a 00 f1 32 00 f4 3a 00 f6 42 00 f8 4a 00 fa 52     *..2..:..B..J..R
     1a1:	00 fc 5a 00 fd 62 00 fe 69 00 fe 71 00 ff 78 00     ..Z..b..i..q..x.
     1b1:	ff 7f 00 ff 87 00 fe 8e 00 fe 95 00 fd 9b 00 fc     ................
     1c1:	a2 00 fa a8 00 f8 ae 00 f6 b4 00 f4 ba 00 f1 c0     ................
     1d1:	00 ef c5 00 ec ca 00 e8 cf 00 e5 d4 00 e1 d9 00     ................
     1e1:	dd dd 00 d9 e1 00 d4 e5 00 cf e8 00 ca ec 00 c5     ................
     1f1:	ef 00 c0 f1 00 ba f4 00 b4 f6 00 ae f8 00 a8 fa     ................
     201:	00 a2 fc 00 9b fd 00 95 fe 00 8e fe 00 87 ff 00     ................
     211:	80 ff 00 78 ff 00 71 fe 00 69 fe 00 62 fd 00 5a     ...x..q..i..b..Z
     221:	fc 00 52 fa 00 4a f8 00 42 f6 00 3a f4 00 32 f1     ..R..J..B..:..2.
     231:	00 2a ef 00 21 ec 00 19 e8 00 11 e5 00 08 e1 00     .*..!...........
     241:	00 dd 00 00 e1 08 00 e5 11 00 e8 19 00 ec 21 00     ..............!.
     251:	ef 2a 00 f1 32 00 f4 3a 00 f6 42 00 f8 4a 00 fa     .*..2..:..B..J..
     261:	52 00 fc 5a 00 fd 62 00 fe 69 00 fe 71 00 ff 78     R..Z..b..i..q..x
     271:	00 ff 80 00 ff 87 00 fe 8e 00 fe 95 00 fd 9b 00     ................
     281:	fc a2 00 fa a8 00 f8 ae 00 f6 b4 00 f4 ba 00 f1     ................
     291:	c0 00 ef c5 00 ec ca 00 e8 cf 00 e5 d4 00 e1 d9     ................
     2a1:	00 dd dd 00 d9 e1 00 d4 e5 00 cf e8 00 ca ec 00     ................
     2b1:	c5 ef 00 c0 f1 00 ba f4 00 b4 f6 00 ae f8 00 a8     ................
     2c1:	fa 00 a2 fc 00 9b fd 00 95 fe 00 8e fe 00 87 ff     ................
     2d1:	00 80 ff 00 78 ff 00 71 fe 00 69 fe 00 62 fd 00     ....x..q..i..b..
     2e1:	5a fc 00 52 fa 00 4a f8 00 42 f6 00 3a f4 00 32     Z..R..J..B..:..2
     2f1:	f1 00 2a ef 00 21 ec 00 19 e8 00 11 e5 00 08 e1     ..*..!..........
	...

00000302 <__ctors_end>:
     302:	11 24       	eor	r1, r1
     304:	1f be       	out	0x3f, r1	; 63
     306:	cf ef       	ldi	r28, 0xFF	; 255
     308:	d4 e0       	ldi	r29, 0x04	; 4
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	cd bf       	out	0x3d, r28	; 61

0000030e <__do_copy_data>:
     30e:	11 e0       	ldi	r17, 0x01	; 1
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b1 e0       	ldi	r27, 0x01	; 1
     314:	e6 e2       	ldi	r30, 0x26	; 38
     316:	f2 e1       	ldi	r31, 0x12	; 18
     318:	02 c0       	rjmp	.+4      	; 0x31e <__do_copy_data+0x10>
     31a:	05 90       	lpm	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	a0 32       	cpi	r26, 0x20	; 32
     320:	b1 07       	cpc	r27, r17
     322:	d9 f7       	brne	.-10     	; 0x31a <__do_copy_data+0xc>

00000324 <__do_clear_bss>:
     324:	21 e0       	ldi	r18, 0x01	; 1
     326:	a0 e2       	ldi	r26, 0x20	; 32
     328:	b1 e0       	ldi	r27, 0x01	; 1
     32a:	01 c0       	rjmp	.+2      	; 0x32e <.do_clear_bss_start>

0000032c <.do_clear_bss_loop>:
     32c:	1d 92       	st	X+, r1

0000032e <.do_clear_bss_start>:
     32e:	ab 33       	cpi	r26, 0x3B	; 59
     330:	b2 07       	cpc	r27, r18
     332:	e1 f7       	brne	.-8      	; 0x32c <.do_clear_bss_loop>
     334:	69 d3       	rcall	.+1746   	; 0xa08 <main>
     336:	75 c7       	rjmp	.+3818   	; 0x1222 <_exit>

00000338 <__bad_interrupt>:
     338:	63 ce       	rjmp	.-826    	; 0x0 <__vectors>

0000033a <PID_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void PID_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, pidData_t *pid)
// Set up PID controller parameters
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	dc 01       	movw	r26, r24
     340:	fb 01       	movw	r30, r22
     342:	e9 01       	movw	r28, r18
  // Start values for PID controller
  pid->sumError = 0;
     344:	1a 82       	std	Y+2, r1	; 0x02
     346:	1b 82       	std	Y+3, r1	; 0x03
     348:	1c 82       	std	Y+4, r1	; 0x04
     34a:	1d 82       	std	Y+5, r1	; 0x05
  pid->lastProcessValue = 0;
     34c:	19 82       	std	Y+1, r1	; 0x01
     34e:	18 82       	st	Y, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
     350:	9f 83       	std	Y+7, r25	; 0x07
     352:	8e 83       	std	Y+6, r24	; 0x06
  pid->I_Factor = i_factor;
     354:	79 87       	std	Y+9, r23	; 0x09
     356:	68 87       	std	Y+8, r22	; 0x08
  pid->D_Factor = d_factor;
     358:	5b 87       	std	Y+11, r21	; 0x0b
     35a:	4a 87       	std	Y+10, r20	; 0x0a
  // Limits to avoid overflow
  pid->maxError = MAX_INT / pid->P_Factor;
     35c:	8f ef       	ldi	r24, 0xFF	; 255
     35e:	9f e7       	ldi	r25, 0x7F	; 127
     360:	bd 01       	movw	r22, r26
     362:	91 d6       	rcall	.+3362   	; 0x1086 <__divmodhi4>
     364:	7d 87       	std	Y+13, r23	; 0x0d
     366:	6c 87       	std	Y+12, r22	; 0x0c
  pid->maxSumError = MAX_I_TERM / pid->I_Factor;
     368:	9f 01       	movw	r18, r30
     36a:	ff 0f       	add	r31, r31
     36c:	44 0b       	sbc	r20, r20
     36e:	55 0b       	sbc	r21, r21
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	9f e7       	ldi	r25, 0x7F	; 127
     378:	bb d6       	rcall	.+3446   	; 0x10f0 <__divmodsi4>
     37a:	2e 87       	std	Y+14, r18	; 0x0e
     37c:	3f 87       	std	Y+15, r19	; 0x0f
     37e:	48 8b       	std	Y+16, r20	; 0x10
     380:	59 8b       	std	Y+17, r21	; 0x11
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <PID_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t PID_Controller(int16_t setPoint, int16_t processValue, pidData_t *pid_st)
{
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	8b 01       	movw	r16, r22
     396:	fa 01       	movw	r30, r20
  int16_t error, p_term, d_term;
  int32_t i_term;
  int32_t ret;
  int32_t temp;

  error = setPoint - processValue;
     398:	86 1b       	sub	r24, r22
     39a:	97 0b       	sbc	r25, r23

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError)
     39c:	24 85       	ldd	r18, Z+12	; 0x0c
     39e:	35 85       	ldd	r19, Z+13	; 0x0d
     3a0:	28 17       	cp	r18, r24
     3a2:	39 07       	cpc	r19, r25
     3a4:	84 f0       	brlt	.+32     	; 0x3c6 <PID_Controller+0x3e>
  {
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError)
     3a6:	31 95       	neg	r19
     3a8:	21 95       	neg	r18
     3aa:	31 09       	sbc	r19, r1
     3ac:	82 17       	cp	r24, r18
     3ae:	93 07       	cpc	r25, r19
     3b0:	6c f0       	brlt	.+26     	; 0x3cc <PID_Controller+0x44>
  {
    p_term = -MAX_INT;
  }
  else
  {
    p_term = pid_st->P_Factor * error;
     3b2:	26 81       	ldd	r18, Z+6	; 0x06
     3b4:	37 81       	ldd	r19, Z+7	; 0x07
     3b6:	82 9f       	mul	r24, r18
     3b8:	e0 01       	movw	r28, r0
     3ba:	83 9f       	mul	r24, r19
     3bc:	d0 0d       	add	r29, r0
     3be:	92 9f       	mul	r25, r18
     3c0:	d0 0d       	add	r29, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <PID_Controller+0x48>
  error = setPoint - processValue;

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError)
  {
    p_term = MAX_INT;
     3c6:	cf ef       	ldi	r28, 0xFF	; 255
     3c8:	df e7       	ldi	r29, 0x7F	; 127
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <PID_Controller+0x48>
  }
  else if (error < -pid_st->maxError)
  {
    p_term = -MAX_INT;
     3cc:	c1 e0       	ldi	r28, 0x01	; 1
     3ce:	d0 e8       	ldi	r29, 0x80	; 128
  {
    p_term = pid_st->P_Factor * error;
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
     3d0:	09 2e       	mov	r0, r25
     3d2:	00 0c       	add	r0, r0
     3d4:	aa 0b       	sbc	r26, r26
     3d6:	bb 0b       	sbc	r27, r27
     3d8:	42 81       	ldd	r20, Z+2	; 0x02
     3da:	53 81       	ldd	r21, Z+3	; 0x03
     3dc:	64 81       	ldd	r22, Z+4	; 0x04
     3de:	75 81       	ldd	r23, Z+5	; 0x05
     3e0:	9a 01       	movw	r18, r20
     3e2:	ab 01       	movw	r20, r22
     3e4:	28 0f       	add	r18, r24
     3e6:	39 1f       	adc	r19, r25
     3e8:	4a 1f       	adc	r20, r26
     3ea:	5b 1f       	adc	r21, r27
  if(temp > pid_st->maxSumError)
     3ec:	86 85       	ldd	r24, Z+14	; 0x0e
     3ee:	97 85       	ldd	r25, Z+15	; 0x0f
     3f0:	a0 89       	ldd	r26, Z+16	; 0x10
     3f2:	b1 89       	ldd	r27, Z+17	; 0x11
     3f4:	82 17       	cp	r24, r18
     3f6:	93 07       	cpc	r25, r19
     3f8:	a4 07       	cpc	r26, r20
     3fa:	b5 07       	cpc	r27, r21
     3fc:	4c f4       	brge	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
  {
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	93 83       	std	Z+3, r25	; 0x03
     402:	a4 83       	std	Z+4, r26	; 0x04
     404:	b5 83       	std	Z+5, r27	; 0x05

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
  if(temp > pid_st->maxSumError)
  {
    i_term = MAX_I_TERM;
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	9f e7       	ldi	r25, 0x7F	; 127
     40e:	1c c0       	rjmp	.+56     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError)
     410:	b0 95       	com	r27
     412:	a0 95       	com	r26
     414:	90 95       	com	r25
     416:	81 95       	neg	r24
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	af 4f       	sbci	r26, 0xFF	; 255
     41c:	bf 4f       	sbci	r27, 0xFF	; 255
     41e:	28 17       	cp	r18, r24
     420:	39 07       	cpc	r19, r25
     422:	4a 07       	cpc	r20, r26
     424:	5b 07       	cpc	r21, r27
     426:	4c f4       	brge	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
  {
    i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
     428:	82 83       	std	Z+2, r24	; 0x02
     42a:	93 83       	std	Z+3, r25	; 0x03
     42c:	a4 83       	std	Z+4, r26	; 0x04
     42e:	b5 83       	std	Z+5, r27	; 0x05
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError)
  {
    i_term = -MAX_I_TERM;
     430:	6f ef       	ldi	r22, 0xFF	; 255
     432:	7f ef       	ldi	r23, 0xFF	; 255
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	90 e8       	ldi	r25, 0x80	; 128
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    pid_st->sumError = -pid_st->maxSumError;
  }
  else
  {
    pid_st->sumError = temp;
     43a:	22 83       	std	Z+2, r18	; 0x02
     43c:	33 83       	std	Z+3, r19	; 0x03
     43e:	44 83       	std	Z+4, r20	; 0x04
     440:	55 83       	std	Z+5, r21	; 0x05
    i_term = pid_st->I_Factor * pid_st->sumError;
     442:	a0 85       	ldd	r26, Z+8	; 0x08
     444:	b1 85       	ldd	r27, Z+9	; 0x09
     446:	7c d6       	rcall	.+3320   	; 0x1140 <__mulshisi3>
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     448:	20 81       	ld	r18, Z
     44a:	31 81       	ldd	r19, Z+1	; 0x01
     44c:	20 1b       	sub	r18, r16
     44e:	31 0b       	sbc	r19, r17
     450:	a2 85       	ldd	r26, Z+10	; 0x0a
     452:	b3 85       	ldd	r27, Z+11	; 0x0b
     454:	2a 9f       	mul	r18, r26
     456:	70 01       	movw	r14, r0
     458:	2b 9f       	mul	r18, r27
     45a:	f0 0c       	add	r15, r0
     45c:	3a 9f       	mul	r19, r26
     45e:	f0 0c       	add	r15, r0
     460:	11 24       	eor	r1, r1

  pid_st->lastProcessValue = processValue;
     462:	11 83       	std	Z+1, r17	; 0x01
     464:	00 83       	st	Z, r16

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     466:	8e 01       	movw	r16, r28
     468:	dd 0f       	add	r29, r29
     46a:	22 0b       	sbc	r18, r18
     46c:	33 0b       	sbc	r19, r19
     46e:	ab 01       	movw	r20, r22
     470:	bc 01       	movw	r22, r24
     472:	40 0f       	add	r20, r16
     474:	51 1f       	adc	r21, r17
     476:	62 1f       	adc	r22, r18
     478:	73 1f       	adc	r23, r19
     47a:	c7 01       	movw	r24, r14
     47c:	ff 0c       	add	r15, r15
     47e:	aa 0b       	sbc	r26, r26
     480:	bb 0b       	sbc	r27, r27
     482:	48 0f       	add	r20, r24
     484:	59 1f       	adc	r21, r25
     486:	6a 1f       	adc	r22, r26
     488:	7b 1f       	adc	r23, r27
     48a:	db 01       	movw	r26, r22
     48c:	ca 01       	movw	r24, r20
     48e:	77 23       	and	r23, r23
     490:	24 f4       	brge	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	81 50       	subi	r24, 0x01	; 1
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	af 4f       	sbci	r26, 0xFF	; 255
     498:	bf 4f       	sbci	r27, 0xFF	; 255
     49a:	89 2f       	mov	r24, r25
     49c:	9a 2f       	mov	r25, r26
     49e:	ab 2f       	mov	r26, r27
     4a0:	bb 27       	eor	r27, r27
     4a2:	a7 fd       	sbrc	r26, 7
     4a4:	ba 95       	dec	r27
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	20 e8       	ldi	r18, 0x80	; 128
     4aa:	92 07       	cpc	r25, r18
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	a2 07       	cpc	r26, r18
     4b0:	b2 07       	cpc	r27, r18
     4b2:	24 f4       	brge	.+8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e8       	ldi	r25, 0x80	; 128
     4b8:	af ef       	ldi	r26, 0xFF	; 255
     4ba:	bf ef       	ldi	r27, 0xFF	; 255
  else if(ret < -MAX_INT)
  {
    ret = -MAX_INT;
  }

  return((int16_t)ret);
     4bc:	81 15       	cp	r24, r1
     4be:	20 e8       	ldi	r18, 0x80	; 128
     4c0:	92 07       	cpc	r25, r18
     4c2:	a1 05       	cpc	r26, r1
     4c4:	b1 05       	cpc	r27, r1
     4c6:	24 f0       	brlt	.+8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	9f e7       	ldi	r25, 0x7F	; 127
     4cc:	a0 e0       	ldi	r26, 0x00	; 0
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <toggle_e>:

    while ( (c = *s++) ) {
        lcd_putc(c);
    }

}/* lcd_puts */
     4de:	28 9a       	sbi	0x05, 0	; 5
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <toggle_e+0x4>
     4e2:	28 98       	cbi	0x05, 0	; 5
     4e4:	08 95       	ret

000004e6 <lcd_write>:
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	d8 2f       	mov	r29, r24
     4ec:	66 23       	and	r22, r22
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <lcd_write+0xe>
     4f0:	2c 9a       	sbi	0x05, 4	; 5
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <lcd_write+0x10>
     4f4:	2c 98       	cbi	0x05, 4	; 5
     4f6:	2d 98       	cbi	0x05, 5	; 5
     4f8:	87 b1       	in	r24, 0x07	; 7
     4fa:	8f 60       	ori	r24, 0x0F	; 15
     4fc:	87 b9       	out	0x07, r24	; 7
     4fe:	c8 b1       	in	r28, 0x08	; 8
     500:	c0 7f       	andi	r28, 0xF0	; 240
     502:	8d 2f       	mov	r24, r29
     504:	82 95       	swap	r24
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	8c 2b       	or	r24, r28
     50a:	88 b9       	out	0x08, r24	; 8
     50c:	e8 df       	rcall	.-48     	; 0x4de <toggle_e>
     50e:	df 70       	andi	r29, 0x0F	; 15
     510:	dc 2b       	or	r29, r28
     512:	d8 b9       	out	0x08, r29	; 8
     514:	e4 df       	rcall	.-56     	; 0x4de <toggle_e>
     516:	cf 60       	ori	r28, 0x0F	; 15
     518:	c8 b9       	out	0x08, r28	; 8
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <lcd_read>:
     520:	88 23       	and	r24, r24
     522:	11 f0       	breq	.+4      	; 0x528 <lcd_read+0x8>
     524:	2c 9a       	sbi	0x05, 4	; 5
     526:	01 c0       	rjmp	.+2      	; 0x52a <lcd_read+0xa>
     528:	2c 98       	cbi	0x05, 4	; 5
     52a:	2d 9a       	sbi	0x05, 5	; 5
     52c:	87 b1       	in	r24, 0x07	; 7
     52e:	80 7f       	andi	r24, 0xF0	; 240
     530:	87 b9       	out	0x07, r24	; 7
     532:	28 9a       	sbi	0x05, 0	; 5
     534:	00 c0       	rjmp	.+0      	; 0x536 <lcd_read+0x16>
     536:	96 b1       	in	r25, 0x06	; 6
     538:	28 98       	cbi	0x05, 0	; 5
     53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_read+0x1c>
     53c:	28 9a       	sbi	0x05, 0	; 5
     53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_read+0x20>
     540:	26 b1       	in	r18, 0x06	; 6
     542:	2f 70       	andi	r18, 0x0F	; 15
     544:	89 2f       	mov	r24, r25
     546:	82 95       	swap	r24
     548:	80 7f       	andi	r24, 0xF0	; 240
     54a:	28 98       	cbi	0x05, 0	; 5
     54c:	82 2b       	or	r24, r18
     54e:	08 95       	ret

00000550 <lcd_waitbusy>:
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	e6 df       	rcall	.-52     	; 0x520 <lcd_read>
     554:	88 23       	and	r24, r24
     556:	e4 f3       	brlt	.-8      	; 0x550 <lcd_waitbusy>
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <lcd_waitbusy+0xc>
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	de df       	rcall	.-68     	; 0x520 <lcd_read>
     564:	08 95       	ret

00000566 <lcd_command>:
     566:	cf 93       	push	r28
     568:	c8 2f       	mov	r28, r24
     56a:	f2 df       	rcall	.-28     	; 0x550 <lcd_waitbusy>
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8c 2f       	mov	r24, r28
     570:	ba df       	rcall	.-140    	; 0x4e6 <lcd_write>
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <lcd_gotoxy>:
     576:	61 11       	cpse	r22, r1
     578:	03 c0       	rjmp	.+6      	; 0x580 <lcd_gotoxy+0xa>
     57a:	80 58       	subi	r24, 0x80	; 128
     57c:	f4 df       	rcall	.-24     	; 0x566 <lcd_command>
     57e:	08 95       	ret
     580:	80 54       	subi	r24, 0x40	; 64
     582:	f1 df       	rcall	.-30     	; 0x566 <lcd_command>
     584:	08 95       	ret

00000586 <lcd_clrscr>:
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	ee df       	rcall	.-36     	; 0x566 <lcd_command>
     58a:	08 95       	ret

0000058c <lcd_home>:
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	eb df       	rcall	.-42     	; 0x566 <lcd_command>
     590:	08 95       	ret

00000592 <lcd_putc>:
     592:	cf 93       	push	r28
     594:	c8 2f       	mov	r28, r24
     596:	dc df       	rcall	.-72     	; 0x550 <lcd_waitbusy>
     598:	ca 30       	cpi	r28, 0x0A	; 10
     59a:	41 f4       	brne	.+16     	; 0x5ac <lcd_putc+0x1a>
     59c:	80 34       	cpi	r24, 0x40	; 64
     59e:	10 f0       	brcs	.+4      	; 0x5a4 <lcd_putc+0x12>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <lcd_putc+0x14>
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	80 58       	subi	r24, 0x80	; 128
     5a8:	de df       	rcall	.-68     	; 0x566 <lcd_command>
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <lcd_putc+0x20>
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	8c 2f       	mov	r24, r28
     5b0:	9a df       	rcall	.-204    	; 0x4e6 <lcd_write>
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     5ba:	ec 01       	movw	r28, r24
     5bc:	21 96       	adiw	r28, 0x01	; 1
     5be:	fc 01       	movw	r30, r24
     5c0:	84 91       	lpm	r24, Z
     5c2:	88 23       	and	r24, r24
     5c4:	31 f0       	breq	.+12     	; 0x5d2 <lcd_puts_p+0x1c>
        lcd_putc(c);
     5c6:	e5 df       	rcall	.-54     	; 0x592 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     5c8:	fe 01       	movw	r30, r28
     5ca:	84 91       	lpm	r24, Z
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	81 11       	cpse	r24, r1
     5d0:	fa cf       	rjmp	.-12     	; 0x5c6 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     5e0:	87 b1       	in	r24, 0x07	; 7
     5e2:	8f 60       	ori	r24, 0x0F	; 15
     5e4:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     5e6:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     5e8:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     5ea:	20 9a       	sbi	0x04, 0	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	9a ef       	ldi	r25, 0xFA	; 250
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     5f4:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     5f6:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
     5f8:	72 df       	rcall	.-284    	; 0x4de <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	9e e4       	ldi	r25, 0x4E	; 78
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     602:	6d df       	rcall	.-294    	; 0x4de <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     604:	c0 e0       	ldi	r28, 0x00	; 0
     606:	d1 e0       	ldi	r29, 0x01	; 1
     608:	ce 01       	movw	r24, r28
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     60e:	67 df       	rcall	.-306    	; 0x4de <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     610:	ce 01       	movw	r24, r28
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     616:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
     618:	62 df       	rcall	.-316    	; 0x4de <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     61a:	21 97       	sbiw	r28, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <lcd_init+0x42>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     61e:	88 e2       	ldi	r24, 0x28	; 40
     620:	a2 df       	rcall	.-188    	; 0x566 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     622:	88 e0       	ldi	r24, 0x08	; 8
     624:	a0 df       	rcall	.-192    	; 0x566 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     626:	af df       	rcall	.-162    	; 0x586 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     628:	86 e0       	ldi	r24, 0x06	; 6
     62a:	9d df       	rcall	.-198    	; 0x566 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     62c:	81 2f       	mov	r24, r17
     62e:	9b df       	rcall	.-202    	; 0x566 <lcd_command>

}/* lcd_init */
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <DisablePWMOutputs>:
 *  all PWM pins as inputs, thus overriding the PWM. The PWM configuration
 *  itself is not altered in any way by running this function.
 */
static void DisablePWMOutputs(void)
{
  DDRB &= ~PWM_PATTERN_PORTB;
     638:	84 b1       	in	r24, 0x04	; 4
     63a:	81 7f       	andi	r24, 0xF1	; 241
     63c:	84 b9       	out	0x04, r24	; 4
  DDRD &= ~PWM_PATTERN_PORTD;
     63e:	8a b1       	in	r24, 0x0a	; 10
     640:	87 79       	andi	r24, 0x97	; 151
     642:	8a b9       	out	0x0a, r24	; 10
     644:	08 95       	ret

00000646 <InsertDeadband>:
 * \param compareHighPtr Pointer used to return high side compare value with dead band.
 * \param compareLowPtr  Pointer used to return low side compare value with dead band.
 */
static void InsertDeadband(const uint8_t compareValue, uint8_t * compareHighPtr, uint8_t * compareLowPtr)
{
  if (compareValue <= DEAD_TIME_HALF)
     646:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     64a:	98 17       	cp	r25, r24
     64c:	28 f0       	brcs	.+10     	; 0x658 <InsertDeadband+0x12>
  {
    *compareHighPtr = 0x00;
     64e:	fb 01       	movw	r30, r22
     650:	10 82       	st	Z, r1
    *compareLowPtr = compareValue;
     652:	fa 01       	movw	r30, r20
     654:	80 83       	st	Z, r24
     656:	08 95       	ret
  }
  else if (compareValue >= (0xff - DEAD_TIME_HALF))
     658:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     65c:	e8 2f       	mov	r30, r24
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	29 1b       	sub	r18, r25
     666:	31 09       	sbc	r19, r1
     668:	e2 17       	cp	r30, r18
     66a:	f3 07       	cpc	r31, r19
     66c:	54 f0       	brlt	.+20     	; 0x682 <InsertDeadband+0x3c>
  {
    *compareHighPtr = 0xff - (2 * DEAD_TIME_HALF);
     66e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     672:	88 0f       	add	r24, r24
     674:	80 95       	com	r24
     676:	fb 01       	movw	r30, r22
     678:	80 83       	st	Z, r24
    *compareLowPtr = 0xff;
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	fa 01       	movw	r30, r20
     67e:	80 83       	st	Z, r24
     680:	08 95       	ret
  }
  else
  {
    *compareHighPtr = compareValue - DEAD_TIME_HALF;
     682:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     686:	f8 2f       	mov	r31, r24
     688:	f9 1b       	sub	r31, r25
     68a:	9f 2f       	mov	r25, r31
     68c:	fb 01       	movw	r30, r22
     68e:	90 83       	st	Z, r25
    *compareLowPtr = compareValue + DEAD_TIME_HALF;
     690:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     694:	89 0f       	add	r24, r25
     696:	fa 01       	movw	r30, r20
     698:	80 83       	st	Z, r24
     69a:	08 95       	ret

0000069c <printbyte>:
 * but hey, no money back for saved memory
*/
char hextable[18] = "0123456789ABCDEF";
/* very simple output to hex */
static void printbyte(const unsigned char data)
{
     69c:	cf 93       	push	r28
     69e:	c8 2f       	mov	r28, r24
	lcd_putc(hextable[data >> 4]);
     6a0:	e8 2f       	mov	r30, r24
     6a2:	e2 95       	swap	r30
     6a4:	ef 70       	andi	r30, 0x0F	; 15
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	e4 5f       	subi	r30, 0xF4	; 244
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	80 81       	ld	r24, Z
     6ae:	71 df       	rcall	.-286    	; 0x592 <lcd_putc>
	lcd_putc(hextable[data & 0x0f]);
     6b0:	cf 70       	andi	r28, 0x0F	; 15
     6b2:	ec 2f       	mov	r30, r28
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e4 5f       	subi	r30, 0xF4	; 244
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	80 81       	ld	r24, Z
     6bc:	6a df       	rcall	.-300    	; 0x592 <lcd_putc>
}
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <printword>:
static void printword(const unsigned int data)
{
     6c2:	cf 93       	push	r28
     6c4:	c8 2f       	mov	r28, r24
	printbyte(data >> 8);
     6c6:	89 2f       	mov	r24, r25
     6c8:	e9 df       	rcall	.-46     	; 0x69c <printbyte>
	printbyte(data);
     6ca:	8c 2f       	mov	r24, r28
     6cc:	e7 df       	rcall	.-50     	; 0x69c <printbyte>
}
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <printspc>:
 return i; 
}
// Console//LCD utilities
static void printspc(void)
{
 lcd_putc(' ');
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	5e df       	rcall	.-324    	; 0x592 <lcd_putc>
     6d6:	08 95       	ret

000006d8 <printdec>:
	printbyte(data);
}
/* output a number in decimal style */
char dectable[12] = "000000000000";
char a;
static void printdec(int16_t number) {
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6e6:	4a e0       	ldi	r20, 0x0A	; 10
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	39 d5       	rcall	.+2674   	; 0x1160 <__itoa_ncheck>
uint8_t n,i;
/* yeah, yeah warning "pointer to integer without a cast" 
 * Am i tired of this or what 
 */
	a = itoa(number,dectable,10);
     6ee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <a>
	i = strlen(dectable);
     6f2:	e0 e0       	ldi	r30, 0x00	; 0
     6f4:	f1 e0       	ldi	r31, 0x01	; 1
     6f6:	01 90       	ld	r0, Z+
     6f8:	00 20       	and	r0, r0
     6fa:	e9 f7       	brne	.-6      	; 0x6f6 <printdec+0x1e>
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	e0 50       	subi	r30, 0x00	; 0
     700:	f1 40       	sbci	r31, 0x01	; 1
     702:	de 2e       	mov	r13, r30
	for (n=0;n < i;n++) {
     704:	ee 23       	and	r30, r30
     706:	a9 f0       	breq	.+42     	; 0x732 <printdec+0x5a>
     708:	00 e0       	ldi	r16, 0x00	; 0
     70a:	11 e0       	ldi	r17, 0x01	; 1
     70c:	c0 e0       	ldi	r28, 0x00	; 0
     70e:	d0 e0       	ldi	r29, 0x00	; 0
		if (n == i-1) lcd_putc('.');		
     710:	ff 27       	eor	r31, r31
     712:	7f 01       	movw	r14, r30
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	e8 1a       	sub	r14, r24
     718:	f1 08       	sbc	r15, r1
     71a:	ce 15       	cp	r28, r14
     71c:	df 05       	cpc	r29, r15
     71e:	11 f4       	brne	.+4      	; 0x724 <printdec+0x4c>
     720:	8e e2       	ldi	r24, 0x2E	; 46
     722:	37 df       	rcall	.-402    	; 0x592 <lcd_putc>
		lcd_putc(dectable[n]);
     724:	f8 01       	movw	r30, r16
     726:	81 91       	ld	r24, Z+
     728:	8f 01       	movw	r16, r30
     72a:	33 df       	rcall	.-410    	; 0x592 <lcd_putc>
     72c:	21 96       	adiw	r28, 0x01	; 1
/* yeah, yeah warning "pointer to integer without a cast" 
 * Am i tired of this or what 
 */
	a = itoa(number,dectable,10);
	i = strlen(dectable);
	for (n=0;n < i;n++) {
     72e:	cd 15       	cp	r28, r13
     730:	a0 f3       	brcs	.-24     	; 0x71a <printdec+0x42>
		if (n == i-1) lcd_putc('.');		
		lcd_putc(dectable[n]);
	}
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	08 95       	ret

00000742 <keyin>:
 * note that debouncing is not really necessary here as the polling routine 
 * just happens to pass by.
 */
char keyin(void){
uint8_t i = 0;
i = ~BUTTON_PORT;
     742:	89 b1       	in	r24, 0x09	; 9
     744:	80 95       	com	r24
i &= BUTTON_MASK;
 return i; 
}
     746:	87 70       	andi	r24, 0x07	; 7
     748:	08 95       	ret

0000074a <wrEEPROM>:
 * IRQs must be disabled before writing and are re-enabled afterwards
 * therefore disabling the PWM is safest. Reestablishing sine driving is done
 * by resetting the waveform to undefined. The timer IRQ will handle the remains. 
 */
void wrEEPROM(void) {
 	lcd_gotoxy(0,1);
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	13 df       	rcall	.-474    	; 0x576 <lcd_gotoxy>
	lcd_puts_P( "Storing EEPROM  " );
     750:	8a ea       	ldi	r24, 0xAA	; 170
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	30 df       	rcall	.-416    	; 0x5b6 <lcd_puts_p>
	cli();
     756:	f8 94       	cli
	DisablePWMOutputs();
     758:	6f df       	rcall	.-290    	; 0x638 <DisablePWMOutputs>
// real writing is here
	eeprom_busy_wait();
     75a:	f9 99       	sbic	0x1f, 1	; 31
     75c:	fe cf       	rjmp	.-4      	; 0x75a <wrEEPROM+0x10>
	eeprom_write_byte(&ee_DEAD_TIME_HALF,DEAD_TIME_HALF);
     75e:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	3c d5       	rcall	.+2680   	; 0x11e0 <eeprom_write_byte>
	eeprom_busy_wait();
     768:	f9 99       	sbic	0x1f, 1	; 31
     76a:	fe cf       	rjmp	.-4      	; 0x768 <wrEEPROM+0x1e>
	eeprom_write_byte(&ee_Inco,Inco);
     76c:	68 2d       	mov	r22, r8
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	36 d5       	rcall	.+2668   	; 0x11e0 <eeprom_write_byte>
	eeprom_busy_wait();
     774:	f9 99       	sbic	0x1f, 1	; 31
     776:	fe cf       	rjmp	.-4      	; 0x774 <wrEEPROM+0x2a>
	eeprom_write_byte(&ee_VperHz,VperHz);
     778:	67 2d       	mov	r22, r7
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	30 d5       	rcall	.+2656   	; 0x11e0 <eeprom_write_byte>
	eeprom_busy_wait();
     780:	f9 99       	sbic	0x1f, 1	; 31
     782:	fe cf       	rjmp	.-4      	; 0x780 <wrEEPROM+0x36>
// write PID values
	eeprom_write_word(&ee_pid_P,pidParameters.P_Factor);
     784:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <pidParameters+0x6>
     788:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <pidParameters+0x7>
     78c:	84 e0       	ldi	r24, 0x04	; 4
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	35 d5       	rcall	.+2666   	; 0x11fc <eeprom_write_word>
	eeprom_busy_wait();
     792:	f9 99       	sbic	0x1f, 1	; 31
     794:	fe cf       	rjmp	.-4      	; 0x792 <wrEEPROM+0x48>
	eeprom_write_word(&ee_pid_I,pidParameters.I_Factor);
     796:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <pidParameters+0x8>
     79a:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <pidParameters+0x9>
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	2c d5       	rcall	.+2648   	; 0x11fc <eeprom_write_word>
	eeprom_busy_wait();
     7a4:	f9 99       	sbic	0x1f, 1	; 31
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <wrEEPROM+0x5a>
	eeprom_write_word(&ee_pid_D,pidParameters.D_Factor);
     7a8:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <pidParameters+0xa>
     7ac:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <pidParameters+0xb>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	23 d5       	rcall	.+2630   	; 0x11fc <eeprom_write_word>
	eeprom_busy_wait();
     7b6:	f9 99       	sbic	0x1f, 1	; 31
     7b8:	fe cf       	rjmp	.-4      	; 0x7b6 <wrEEPROM+0x6c>
// tell the interrupt to reestablish Sine Driving
	fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     7ba:	29 2d       	mov	r18, r9
     7bc:	2c 60       	ori	r18, 0x0C	; 12
     7be:	92 2e       	mov	r9, r18
	sei();
     7c0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c2:	8f e9       	ldi	r24, 0x9F	; 159
     7c4:	96 e8       	ldi	r25, 0x86	; 134
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	81 50       	subi	r24, 0x01	; 1
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	20 40       	sbci	r18, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <wrEEPROM+0x7e>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <wrEEPROM+0x88>
     7d2:	00 00       	nop
// tell the user
	_delay_ms(500);
	lcd_gotoxy(0,1);
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	ce de       	rcall	.-612    	; 0x576 <lcd_gotoxy>
	lcd_puts_P( "Stored          " );
     7da:	89 e9       	ldi	r24, 0x99	; 153
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	eb de       	rcall	.-554    	; 0x5b6 <lcd_puts_p>
     7e0:	8f e9       	ldi	r24, 0x9F	; 159
     7e2:	96 e8       	ldi	r25, 0x86	; 134
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	90 40       	sbci	r25, 0x00	; 0
     7ea:	20 40       	sbci	r18, 0x00	; 0
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <wrEEPROM+0x9c>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <wrEEPROM+0xa6>
     7f0:	00 00       	nop
	_delay_ms(500);
	// wait for button release
	if (keyin() > 0){};
     7f2:	a7 df       	rcall	.-178    	; 0x742 <keyin>
     7f4:	08 95       	ret

000007f6 <execExtendedCommand>:
 * Adjust in a safe environment with current monitoring. 
 * Place on the LCD is limited, thus PID and DT is displayed as Hex.
 * Wrap around on these values should be avoided, thus the range check
*/
static void execExtendedCommand(void)
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
char n=0;
uint8_t j=0;

 lcd_home();  
     806:	c2 de       	rcall	.-636    	; 0x58c <lcd_home>
 // this line is  only written once, actual values are always displayed in line 2
 lcd_puts_P( "P   I   D    DT " );
     808:	85 e4       	ldi	r24, 0x45	; 69
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	d4 de       	rcall	.-600    	; 0x5b6 <lcd_puts_p>
 parameter = 0;
     80e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
 // wait for button release
 while (keyin()!=0){};
     812:	97 df       	rcall	.-210    	; 0x742 <keyin>
     814:	81 11       	cpse	r24, r1
     816:	fd cf       	rjmp	.-6      	; 0x812 <execExtendedCommand+0x1c>
     818:	10 e0       	ldi	r17, 0x00	; 0
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     81a:	c5 e2       	ldi	r28, 0x25	; 37
     81c:	d1 e0       	ldi	r29, 0x01	; 1
					 break;
				case 2 : if (pidParameters.D_Factor > 65534) pidParameters.D_Factor = 65534; 
 					  pidParameters.D_Factor++;
					  break;
				case 3 : DEAD_TIME_HALF++; 
					if (DEAD_TIME_HALF > 200) DEAD_TIME_HALF = 200;
     81e:	0f 2e       	mov	r0, r31
     820:	f8 ec       	ldi	r31, 0xC8	; 200
     822:	cf 2e       	mov	r12, r31
     824:	f0 2d       	mov	r31, r0
		case 2 : 
			switch (parameter) {
			 	case 0 : if (pidParameters.P_Factor < 1) pidParameters.P_Factor = 1; 
				 	 pidParameters.P_Factor--; 
					 break;
				case 1 : if (pidParameters.I_Factor < 1) pidParameters.I_Factor = 1; 
     826:	ee 24       	eor	r14, r14
     828:	e3 94       	inc	r14
     82a:	f1 2c       	mov	r15, r1
					 break;
				case 2 : if (pidParameters.D_Factor < 1) pidParameters.D_Factor = 1;
					 pidParameters.D_Factor--;
					 break;
				case 3 : DEAD_TIME_HALF--; 
					 if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     82c:	68 94       	set
     82e:	dd 24       	eor	r13, r13
     830:	d3 f8       	bld	r13, 3
 parameter = 0;
 // wait for button release
 while (keyin()!=0){};
// pressing black and green button simultaneously exits this menu
while (n != 5) {
	n = keyin();
     832:	87 df       	rcall	.-242    	; 0x742 <keyin>
     834:	08 2f       	mov	r16, r24
	switch (n) 
     836:	83 30       	cpi	r24, 0x03	; 3
     838:	09 f4       	brne	.+2      	; 0x83c <execExtendedCommand+0x46>
     83a:	85 c0       	rjmp	.+266    	; 0x946 <execExtendedCommand+0x150>
     83c:	28 f4       	brcc	.+10     	; 0x848 <execExtendedCommand+0x52>
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	51 f0       	breq	.+20     	; 0x856 <execExtendedCommand+0x60>
     842:	82 30       	cpi	r24, 0x02	; 2
     844:	a9 f0       	breq	.+42     	; 0x870 <execExtendedCommand+0x7a>
     846:	ca c0       	rjmp	.+404    	; 0x9dc <execExtendedCommand+0x1e6>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f4       	brne	.+2      	; 0x84e <execExtendedCommand+0x58>
     84c:	4e c0       	rjmp	.+156    	; 0x8ea <execExtendedCommand+0xf4>
     84e:	85 30       	cpi	r24, 0x05	; 5
     850:	09 f4       	brne	.+2      	; 0x854 <execExtendedCommand+0x5e>
     852:	7a c0       	rjmp	.+244    	; 0x948 <execExtendedCommand+0x152>
     854:	c3 c0       	rjmp	.+390    	; 0x9dc <execExtendedCommand+0x1e6>
		{
// cycle through parameters
		case 1 : parameter++; if (parameter > EXTNUMPARAMS) parameter = 0;
     856:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <parameter>
     860:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     864:	84 30       	cpi	r24, 0x04	; 4
     866:	08 f4       	brcc	.+2      	; 0x86a <execExtendedCommand+0x74>
     868:	6f c0       	rjmp	.+222    	; 0x948 <execExtendedCommand+0x152>
     86a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
     86e:	6c c0       	rjmp	.+216    	; 0x948 <execExtendedCommand+0x152>
			break;
// red button decrements parameter
		case 2 : 
			switch (parameter) {
     870:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	99 f0       	breq	.+38     	; 0x89e <execExtendedCommand+0xa8>
     878:	28 f0       	brcs	.+10     	; 0x884 <execExtendedCommand+0x8e>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	e9 f0       	breq	.+58     	; 0x8b8 <execExtendedCommand+0xc2>
     87e:	83 30       	cpi	r24, 0x03	; 3
     880:	41 f1       	breq	.+80     	; 0x8d2 <execExtendedCommand+0xdc>
     882:	62 c0       	rjmp	.+196    	; 0x948 <execExtendedCommand+0x152>
			 	case 0 : if (pidParameters.P_Factor < 1) pidParameters.P_Factor = 1; 
     884:	8e 81       	ldd	r24, Y+6	; 0x06
     886:	9f 81       	ldd	r25, Y+7	; 0x07
     888:	18 16       	cp	r1, r24
     88a:	19 06       	cpc	r1, r25
     88c:	14 f0       	brlt	.+4      	; 0x892 <execExtendedCommand+0x9c>
     88e:	ff 82       	std	Y+7, r15	; 0x07
     890:	ee 82       	std	Y+6, r14	; 0x06
				 	 pidParameters.P_Factor--; 
     892:	8e 81       	ldd	r24, Y+6	; 0x06
     894:	9f 81       	ldd	r25, Y+7	; 0x07
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	9f 83       	std	Y+7, r25	; 0x07
     89a:	8e 83       	std	Y+6, r24	; 0x06
					 break;
     89c:	55 c0       	rjmp	.+170    	; 0x948 <execExtendedCommand+0x152>
				case 1 : if (pidParameters.I_Factor < 1) pidParameters.I_Factor = 1; 
     89e:	88 85       	ldd	r24, Y+8	; 0x08
     8a0:	99 85       	ldd	r25, Y+9	; 0x09
     8a2:	18 16       	cp	r1, r24
     8a4:	19 06       	cpc	r1, r25
     8a6:	14 f0       	brlt	.+4      	; 0x8ac <execExtendedCommand+0xb6>
     8a8:	f9 86       	std	Y+9, r15	; 0x09
     8aa:	e8 86       	std	Y+8, r14	; 0x08
					 pidParameters.I_Factor--;
     8ac:	88 85       	ldd	r24, Y+8	; 0x08
     8ae:	99 85       	ldd	r25, Y+9	; 0x09
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	99 87       	std	Y+9, r25	; 0x09
     8b4:	88 87       	std	Y+8, r24	; 0x08
					 break;
     8b6:	48 c0       	rjmp	.+144    	; 0x948 <execExtendedCommand+0x152>
				case 2 : if (pidParameters.D_Factor < 1) pidParameters.D_Factor = 1;
     8b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     8ba:	9b 85       	ldd	r25, Y+11	; 0x0b
     8bc:	18 16       	cp	r1, r24
     8be:	19 06       	cpc	r1, r25
     8c0:	14 f0       	brlt	.+4      	; 0x8c6 <execExtendedCommand+0xd0>
     8c2:	fb 86       	std	Y+11, r15	; 0x0b
     8c4:	ea 86       	std	Y+10, r14	; 0x0a
					 pidParameters.D_Factor--;
     8c6:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c8:	9b 85       	ldd	r25, Y+11	; 0x0b
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	9b 87       	std	Y+11, r25	; 0x0b
     8ce:	8a 87       	std	Y+10, r24	; 0x0a
					 break;
     8d0:	3b c0       	rjmp	.+118    	; 0x948 <execExtendedCommand+0x152>
				case 3 : DEAD_TIME_HALF--; 
     8d2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     8d6:	81 50       	subi	r24, 0x01	; 1
     8d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
					 if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     8dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     8e0:	88 30       	cpi	r24, 0x08	; 8
     8e2:	90 f5       	brcc	.+100    	; 0x948 <execExtendedCommand+0x152>
     8e4:	d0 92 1e 01 	sts	0x011E, r13	; 0x80011e <DEAD_TIME_HALF>
     8e8:	2f c0       	rjmp	.+94     	; 0x948 <execExtendedCommand+0x152>
				default : break;
			}
			break;
// green button increments parameter
		case 4 : 
			switch (parameter) {
     8ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	71 f0       	breq	.+28     	; 0x90e <execExtendedCommand+0x118>
     8f2:	28 f0       	brcs	.+10     	; 0x8fe <execExtendedCommand+0x108>
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	99 f0       	breq	.+38     	; 0x91e <execExtendedCommand+0x128>
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	c9 f0       	breq	.+50     	; 0x92e <execExtendedCommand+0x138>
     8fc:	25 c0       	rjmp	.+74     	; 0x948 <execExtendedCommand+0x152>
			 	case 0 : if (pidParameters.P_Factor > 65534) pidParameters.P_Factor = 65534; 
     8fe:	8e 81       	ldd	r24, Y+6	; 0x06
     900:	9f 81       	ldd	r25, Y+7	; 0x07
 					 pidParameters.P_Factor++;
     902:	8e 81       	ldd	r24, Y+6	; 0x06
     904:	9f 81       	ldd	r25, Y+7	; 0x07
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	9f 83       	std	Y+7, r25	; 0x07
     90a:	8e 83       	std	Y+6, r24	; 0x06
					 break;
     90c:	1d c0       	rjmp	.+58     	; 0x948 <execExtendedCommand+0x152>
				case 1 : if (pidParameters.I_Factor > 65534) pidParameters.I_Factor = 65534; 
     90e:	88 85       	ldd	r24, Y+8	; 0x08
     910:	99 85       	ldd	r25, Y+9	; 0x09
 					 pidParameters.I_Factor++;
     912:	88 85       	ldd	r24, Y+8	; 0x08
     914:	99 85       	ldd	r25, Y+9	; 0x09
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	99 87       	std	Y+9, r25	; 0x09
     91a:	88 87       	std	Y+8, r24	; 0x08
					 break;
     91c:	15 c0       	rjmp	.+42     	; 0x948 <execExtendedCommand+0x152>
				case 2 : if (pidParameters.D_Factor > 65534) pidParameters.D_Factor = 65534; 
     91e:	8a 85       	ldd	r24, Y+10	; 0x0a
     920:	9b 85       	ldd	r25, Y+11	; 0x0b
 					  pidParameters.D_Factor++;
     922:	8a 85       	ldd	r24, Y+10	; 0x0a
     924:	9b 85       	ldd	r25, Y+11	; 0x0b
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	9b 87       	std	Y+11, r25	; 0x0b
     92a:	8a 87       	std	Y+10, r24	; 0x0a
					  break;
     92c:	0d c0       	rjmp	.+26     	; 0x948 <execExtendedCommand+0x152>
				case 3 : DEAD_TIME_HALF++; 
     92e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
					if (DEAD_TIME_HALF > 200) DEAD_TIME_HALF = 200;
     938:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     93c:	89 3c       	cpi	r24, 0xC9	; 201
     93e:	20 f0       	brcs	.+8      	; 0x948 <execExtendedCommand+0x152>
     940:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <DEAD_TIME_HALF>
     944:	01 c0       	rjmp	.+2      	; 0x948 <execExtendedCommand+0x152>
					 break;
				default : break;
				}
			break;
// pressing black (1) and red (2) button simultaneously writes EEPROM
		case 3 : wrEEPROM(); break;
     946:	01 df       	rcall	.-510    	; 0x74a <wrEEPROM>
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     948:	4a 85       	ldd	r20, Y+10	; 0x0a
     94a:	5b 85       	ldd	r21, Y+11	; 0x0b
     94c:	68 85       	ldd	r22, Y+8	; 0x08
     94e:	79 85       	ldd	r23, Y+9	; 0x09
     950:	8e 81       	ldd	r24, Y+6	; 0x06
     952:	9f 81       	ldd	r25, Y+7	; 0x07
     954:	9e 01       	movw	r18, r28
     956:	f1 dc       	rcall	.-1566   	; 0x33a <PID_Init>
// includes a little autorepeat accelerator
	if (keyin() > 0) {
     958:	f4 de       	rcall	.-536    	; 0x742 <keyin>
     95a:	88 23       	and	r24, r24
     95c:	99 f0       	breq	.+38     	; 0x984 <execExtendedCommand+0x18e>
		j++;
     95e:	1f 5f       	subi	r17, 0xFF	; 255
		if (j<10) _delay_ms(60);
     960:	1a 30       	cpi	r17, 0x0A	; 10
     962:	48 f4       	brcc	.+18     	; 0x976 <execExtendedCommand+0x180>
     964:	01 c0       	rjmp	.+2      	; 0x968 <execExtendedCommand+0x172>
		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
// includes a little autorepeat accelerator
	if (keyin() > 0) {
		j++;
     966:	11 e0       	ldi	r17, 0x01	; 1
     968:	87 e9       	ldi	r24, 0x97	; 151
     96a:	9a e3       	ldi	r25, 0x3A	; 58
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <execExtendedCommand+0x176>
     970:	00 c0       	rjmp	.+0      	; 0x972 <execExtendedCommand+0x17c>
     972:	00 00       	nop
     974:	07 c0       	rjmp	.+14     	; 0x984 <execExtendedCommand+0x18e>
     976:	83 ec       	ldi	r24, 0xC3	; 195
     978:	99 e0       	ldi	r25, 0x09	; 9
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <execExtendedCommand+0x184>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <execExtendedCommand+0x18a>
     980:	00 00       	nop
		if (j<10) _delay_ms(60);
		else {
			_delay_ms(10);
			j = 11;
     982:	1b e0       	ldi	r17, 0x0B	; 11

static void showExtendedPars(void)
{
const uint8_t *p = cursorextpos;

	lcd_gotoxy(0,1);  	
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	f6 dd       	rcall	.-1044   	; 0x576 <lcd_gotoxy>
	printword(pidParameters.P_Factor);
     98a:	8e 81       	ldd	r24, Y+6	; 0x06
     98c:	9f 81       	ldd	r25, Y+7	; 0x07
     98e:	99 de       	rcall	.-718    	; 0x6c2 <printword>
	printword(pidParameters.I_Factor);
     990:	88 85       	ldd	r24, Y+8	; 0x08
     992:	99 85       	ldd	r25, Y+9	; 0x09
     994:	96 de       	rcall	.-724    	; 0x6c2 <printword>
	printword(pidParameters.D_Factor);printspc();
     996:	8a 85       	ldd	r24, Y+10	; 0x0a
     998:	9b 85       	ldd	r25, Y+11	; 0x0b
     99a:	93 de       	rcall	.-730    	; 0x6c2 <printword>
     99c:	9a de       	rcall	.-716    	; 0x6d2 <printspc>
	printbyte(DEAD_TIME_HALF);printspc();
     99e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     9a2:	7c de       	rcall	.-776    	; 0x69c <printbyte>
     9a4:	96 de       	rcall	.-724    	; 0x6d2 <printspc>
	lcd_gotoxy(pgm_read_byte(p+parameter),1); // set cursor below active parameter
     9a6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <parameter>
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	e3 54       	subi	r30, 0x43	; 67
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	84 91       	lpm	r24, Z
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	e0 dd       	rcall	.-1088   	; 0x576 <lcd_gotoxy>
     9b6:	81 ee       	ldi	r24, 0xE1	; 225
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <execExtendedCommand+0x1c4>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <execExtendedCommand+0x1ca>
     9c0:	00 00       	nop
 lcd_puts_P( "P   I   D    DT " );
 parameter = 0;
 // wait for button release
 while (keyin()!=0){};
// pressing black and green button simultaneously exits this menu
while (n != 5) {
     9c2:	05 30       	cpi	r16, 0x05	; 5
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <execExtendedCommand+0x1d2>
     9c6:	35 cf       	rjmp	.-406    	; 0x832 <execExtendedCommand+0x3c>
			j = 11;
			}
	}
	showExtendedPars();
	} // while
  parameter = 0;
     9c8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
  lcd_clrscr();
     9cc:	dc dd       	rcall	.-1096   	; 0x586 <lcd_clrscr>
 // restore original diplay
  lcd_puts_P( "Freq  V/Hz  Amp " );
     9ce:	84 e3       	ldi	r24, 0x34	; 52
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	f1 dd       	rcall	.-1054   	; 0x5b6 <lcd_puts_p>
 // wait for button release
 while (keyin()!=0){};
     9d4:	b6 de       	rcall	.-660    	; 0x742 <keyin>
     9d6:	81 11       	cpse	r24, r1
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <execExtendedCommand+0x1de>
     9da:	0d c0       	rjmp	.+26     	; 0x9f6 <execExtendedCommand+0x200>
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     9dc:	4a 85       	ldd	r20, Y+10	; 0x0a
     9de:	5b 85       	ldd	r21, Y+11	; 0x0b
     9e0:	68 85       	ldd	r22, Y+8	; 0x08
     9e2:	79 85       	ldd	r23, Y+9	; 0x09
     9e4:	8e 81       	ldd	r24, Y+6	; 0x06
     9e6:	9f 81       	ldd	r25, Y+7	; 0x07
     9e8:	9e 01       	movw	r18, r28
     9ea:	a7 dc       	rcall	.-1714   	; 0x33a <PID_Init>
// includes a little autorepeat accelerator
	if (keyin() > 0) {
     9ec:	aa de       	rcall	.-684    	; 0x742 <keyin>
     9ee:	81 11       	cpse	r24, r1
     9f0:	ba cf       	rjmp	.-140    	; 0x966 <execExtendedCommand+0x170>
// pressing black (1) and red (2) button simultaneously writes EEPROM
		case 3 : wrEEPROM(); break;
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	c7 cf       	rjmp	.-114    	; 0x984 <execExtendedCommand+0x18e>
  lcd_clrscr();
 // restore original diplay
  lcd_puts_P( "Freq  V/Hz  Amp " );
 // wait for button release
 while (keyin()!=0){};
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <main>:
 *  Lets initialize all variables here - even if its only for completeness
 *******************************************************************************************+
 */
int main(void)
{
  cli();
     a08:	f8 94       	cli
//  variables
  amplitude = 0 ;
     a0a:	61 2c       	mov	r6, r1
  speedInput = 0 ;
     a0c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <speedInput>
  Inco = 1;
     a10:	88 24       	eor	r8, r8
     a12:	83 94       	inc	r8
  parameter = 0;
     a14:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
 */
static void PortsInit(void)
{
// Port C is LCD Data Output and ADC Input
// the LCD lib does this on its own, but here for completeness
  DDRC = 0b00001111;
     a18:	8f e0       	ldi	r24, 0x0F	; 15
     a1a:	87 b9       	out	0x07, r24	; 7
// PORTB, PORTD outputs
// clr pullups but do nothing else here. The sine driver will take care of the output states
  PORTB &= ~(PWM_PATTERN_PORTB);
     a1c:	85 b1       	in	r24, 0x05	; 5
     a1e:	81 7f       	andi	r24, 0xF1	; 241
     a20:	85 b9       	out	0x05, r24	; 5
  PORTD &= ~(PWM_PATTERN_PORTD);
     a22:	8b b1       	in	r24, 0x0b	; 11
     a24:	87 79       	andi	r24, 0x97	; 151
     a26:	8b b9       	out	0x0b, r24	; 11
// Set the inputs on Port D for the three buttons
  DDRD &= ~BUTTON_MASK;
     a28:	8a b1       	in	r24, 0x0a	; 10
     a2a:	88 7f       	andi	r24, 0xF8	; 248
     a2c:	8a b9       	out	0x0a, r24	; 10
// Enable pull-up on input signals.
  PORTD |= _BV(DIRECTION_COMMAND_PIN) | _BV(EXTERNAL_CONTROL_PIN) | BUTTON_MASK ;
     a2e:	8b b1       	in	r24, 0x0b	; 11
     a30:	87 69       	ori	r24, 0x97	; 151
     a32:	8b b9       	out	0x0b, r24	; 11
  Inco = 1;
  parameter = 0;
 //Initialize peripherals.
  PortsInit();
 /* initialize display, cursor off */
  lcd_init(LCD_DISP_ON);
     a34:	8c e0       	ldi	r24, 0x0C	; 12
     a36:	d0 dd       	rcall	.-1120   	; 0x5d8 <lcd_init>
  lcd_home();
     a38:	a9 dd       	rcall	.-1198   	; 0x58c <lcd_home>
#ifdef PURE_SINE_DRIVE
  lcd_puts_P( "VF Sinus Drive\n" );
#else
  lcd_puts_P( "VF Motor Drive\n" );
     a3a:	89 e8       	ldi	r24, 0x89	; 137
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	bb dd       	rcall	.-1162   	; 0x5b6 <lcd_puts_p>
#endif
 lcd_putc('0');  // diagnostic outputs
     a40:	80 e3       	ldi	r24, 0x30	; 48
     a42:	a7 dd       	rcall	.-1202   	; 0x592 <lcd_putc>
 *  all PWM signals are aligned.
 */
static void TimersInit(void)
{
  //Set all timers in "Phase correct mode". Do not enable outputs yet.
  TCCR0A = (1 << WGM00);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	84 bd       	out	0x24, r24	; 36
  TCCR1A = (1 << WGM11);	
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  TCCR2A = (1 << WGM20);
     a4e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__EEPROM_REGION_LENGTH__+0x7f00b0>
//Set top value of Timer/counter1.
  ICR1 = 0xff;
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
     a5a:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
//Synchronize timers. These values were determined by running the simulator
  TCNT0 = 0;
     a5e:	16 bc       	out	0x26, r1	; 38
  TCNT1 = 3;
     a60:	23 e0       	ldi	r18, 0x03	; 3
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     a68:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
  TCNT2 = 5;
     a6c:	95 e0       	ldi	r25, 0x05	; 5
     a6e:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__EEPROM_REGION_LENGTH__+0x7f00b2>
  // Start all 3 timers.
  TCCR0B = (0 << CS01) | (1 << CS00);
     a72:	85 bd       	out	0x25, r24	; 37
  TCCR1B = (1 << WGM13) | (0 << CS11) | (1 << CS10);
     a74:	91 e1       	ldi	r25, 0x11	; 17
     a76:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
  TCCR2B = (0 << CS21) | (1 << CS20);
     a7a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__EEPROM_REGION_LENGTH__+0x7f00b1>
  lcd_puts_P( "VF Motor Drive\n" );
#endif
 lcd_putc('0');  // diagnostic outputs
// timers
  TimersInit();
  lcd_putc('1');
     a7e:	81 e3       	ldi	r24, 0x31	; 49
     a80:	88 dd       	rcall	.-1264   	; 0x592 <lcd_putc>
 */
static void PinChangeIntInit(void)
{
  // Initialize pin change interrupt on direction command pin
  // PD7 is PCINT23
  PCMSK2 = _BV(PCINT23);
     a82:	80 e8       	ldi	r24, 0x80	; 128
     a84:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__EEPROM_REGION_LENGTH__+0x7f006d>
  // Enable pin change interrupt on ports with pin change signals
  PCICR = (1 << PCIE2);
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
// timers
  TimersInit();
  lcd_putc('1');
// jumpers 
  PinChangeIntInit();
  lcd_putc('2');
     a8e:	82 e3       	ldi	r24, 0x32	; 50
     a90:	80 dd       	rcall	.-1280   	; 0x592 <lcd_putc>
 * remember this is init only and will only be run ONCE... 
*/

static void ADCInit(void)
{
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (1 << ADIF) | (0 << ADIE) | (ADC_PRESCALER);
     a92:	ca e7       	ldi	r28, 0x7A	; 122
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	86 e9       	ldi	r24, 0x96	; 150
     a98:	88 83       	st	Y, r24
  // disable digital inputs on analog channels
  DIDR0 = ( 1 << ADC_CHANNEL_FREQUENCY) | (1 << ADC_CHANNEL_AMPLITUDE ); 
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__EEPROM_REGION_LENGTH__+0x7f007e>
 //Select initial AD conversion channel.
  ADMUX = ADMUX_FREQUENCY;
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
  //Set trigger source to free run
  ADCSRB = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
     aa6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__EEPROM_REGION_LENGTH__+0x7f007b>
  //Initialize ADC and start once, no IRQ 
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (ADC_PRESCALER);
     aaa:	86 ec       	ldi	r24, 0xC6	; 198
     aac:	88 83       	st	Y, r24
/* This really does nothing except restarting the ADC with IRQ enabled
 * If you want to calibrate, do it here.
 */
static void CalibADC(void)
{
 DisablePWMOutputs();
     aae:	c4 dd       	rcall	.-1144   	; 0x638 <DisablePWMOutputs>
     ab0:	8f e4       	ldi	r24, 0x4F	; 79
     ab2:	93 ec       	ldi	r25, 0xC3	; 195
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <main+0xac>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <main+0xb2>
     aba:	00 00       	nop
 _delay_ms(200);
//Initialize ADC and restart, now with IRQ 
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (1 << ADIF) | (1 << ADIE) | (ADC_PRESCALER); 
     abc:	8e ed       	ldi	r24, 0xDE	; 222
     abe:	88 83       	st	Y, r24
// jumpers 
  PinChangeIntInit();
  lcd_putc('2');
// analog 
  ADCInit();
  lcd_putc('3');
     ac0:	83 e3       	ldi	r24, 0x33	; 51
     ac2:	67 dd       	rcall	.-1330   	; 0x592 <lcd_putc>
  PID_Init(PID_K_P, PID_K_I, PID_K_D,(pidData_t *) &pidParameters);
     ac4:	25 e2       	ldi	r18, 0x25	; 37
     ac6:	31 e0       	ldi	r19, 0x01	; 1
     ac8:	40 e1       	ldi	r20, 0x10	; 16
     aca:	50 e0       	ldi	r21, 0x00	; 0
     acc:	68 e0       	ldi	r22, 0x08	; 8
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e6       	ldi	r24, 0x60	; 96
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	32 dc       	rcall	.-1948   	; 0x33a <PID_Init>
  lcd_putc('4');
     ad6:	84 e3       	ldi	r24, 0x34	; 52
     ad8:	5c dd       	rcall	.-1352   	; 0x592 <lcd_putc>
  //Initialize fastflags
  {
    fastFlags.externalControl = FALSE;
     ada:	e8 94       	clt
     adc:	90 f8       	bld	r9, 0
    fastFlags.desiredDirection = DIRECTION_FORWARD;
     ade:	e8 94       	clt
     ae0:	91 f8       	bld	r9, 1
    fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     ae2:	99 2d       	mov	r25, r9
     ae4:	9c 60       	ori	r25, 0x0C	; 12
     ae6:	99 2e       	mov	r9, r25
  }
  lcd_putc('5');
     ae8:	85 e3       	ldi	r24, 0x35	; 53
     aea:	53 dd       	rcall	.-1370   	; 0x592 <lcd_putc>
 *  Running this function triggers a reading of the direction
 *  input pin. The desiredDirection flag is set accordingly.
 */
static void DesiredDirectionUpdate(void)
{
 if ( bit_is_clear(PIND,DIRECTION_COMMAND_PIN) )
     aec:	89 b1       	in	r24, 0x09	; 9
  {
    fastFlags.desiredDirection = DIRECTION_REVERSE;
     aee:	80 95       	com	r24
     af0:	88 1f       	adc	r24, r24
     af2:	88 27       	eor	r24, r24
     af4:	88 1f       	adc	r24, r24
     af6:	80 fb       	bst	r24, 0
     af8:	91 f8       	bld	r9, 1
/* select control method by examining the EXTERNAL_CONTROL_PIN
 * if it is jumpered to ground, we derive V/Hz and Inco from analog signals
 */
static void DesiredControlUpdate(void)
{
 if ( bit_is_clear(PIND,EXTERNAL_CONTROL_PIN) )
     afa:	4c 99       	sbic	0x09, 4	; 9
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <main+0xfc>
  {
    fastFlags.externalControl = TRUE;
     afe:	68 94       	set
     b00:	90 f8       	bld	r9, 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <main+0x100>
  }
  else
  {
    fastFlags.externalControl = FALSE;
     b04:	e8 94       	clt
     b06:	90 f8       	bld	r9, 0
  lcd_putc('5');
// read the port pins and set fastFlags accordingly
  DesiredDirectionUpdate();
  DesiredControlUpdate();
// Enable Timer1 capture event interrupt.
  TIFR1 = _BV(ICF1) | _BV(OCF1B) | _BV(OCF1A) | _BV(TOV1) ;
     b08:	87 e2       	ldi	r24, 0x27	; 39
     b0a:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = _BV(ICIE1);
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
  lcd_putc('6');
     b12:	86 e3       	ldi	r24, 0x36	; 54
     b14:	3e dd       	rcall	.-1412   	; 0x592 <lcd_putc>
     b16:	2f e9       	ldi	r18, 0x9F	; 159
     b18:	86 e8       	ldi	r24, 0x86	; 134
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	80 40       	sbci	r24, 0x00	; 0
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <main+0x114>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <main+0x11e>
     b26:	00 00       	nop
 * A fail here would be fatal to the PA. So if somehow a wrong value is read
 * we set to MIN_DEAD_TIME to save the life of the PA.
 */
static void EEPROMInit(void)
{
 	lcd_gotoxy(0,1);
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	24 dd       	rcall	.-1464   	; 0x576 <lcd_gotoxy>
	lcd_puts_P( "Reading EEPROM  ");
     b2e:	87 e6       	ldi	r24, 0x67	; 103
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	41 dd       	rcall	.-1406   	; 0x5b6 <lcd_puts_p>
	DEAD_TIME_HALF = eeprom_read_byte(&ee_DEAD_TIME_HALF);
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	46 d3       	rcall	.+1676   	; 0x11c6 <eeprom_read_byte>
     b3a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>

	if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     b3e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     b42:	88 30       	cpi	r24, 0x08	; 8
     b44:	18 f4       	brcc	.+6      	; 0xb4c <main+0x144>
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
// Working parameters
	Inco = eeprom_read_byte(&ee_Inco);
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	3a d3       	rcall	.+1652   	; 0x11c6 <eeprom_read_byte>
     b52:	88 2e       	mov	r8, r24
	VperHz = eeprom_read_byte(&ee_VperHz);
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	36 d3       	rcall	.+1644   	; 0x11c6 <eeprom_read_byte>
     b5a:	78 2e       	mov	r7, r24
// PID values
	pidParameters.P_Factor = eeprom_read_word(&ee_pid_P);
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	3a d3       	rcall	.+1652   	; 0x11d6 <eeprom_read_word>
     b62:	c5 e2       	ldi	r28, 0x25	; 37
     b64:	d1 e0       	ldi	r29, 0x01	; 1
     b66:	9f 83       	std	Y+7, r25	; 0x07
     b68:	8e 83       	std	Y+6, r24	; 0x06
	pidParameters.I_Factor = eeprom_read_word(&ee_pid_I);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	33 d3       	rcall	.+1638   	; 0x11d6 <eeprom_read_word>
     b70:	99 87       	std	Y+9, r25	; 0x09
     b72:	88 87       	std	Y+8, r24	; 0x08
	pidParameters.D_Factor = eeprom_read_word(&ee_pid_D);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	2e d3       	rcall	.+1628   	; 0x11d6 <eeprom_read_word>
     b7a:	9b 87       	std	Y+11, r25	; 0x0b
     b7c:	8a 87       	std	Y+10, r24	; 0x0a
     b7e:	2f e9       	ldi	r18, 0x9F	; 159
     b80:	86 e8       	ldi	r24, 0x86	; 134
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	80 40       	sbci	r24, 0x00	; 0
     b88:	90 40       	sbci	r25, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <main+0x17c>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <main+0x186>
     b8e:	00 00       	nop
	_delay_ms(500);
	lcd_gotoxy(0,1);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	f0 dc       	rcall	.-1568   	; 0x576 <lcd_gotoxy>
	lcd_puts_P( "Read Done       ");
     b96:	86 e5       	ldi	r24, 0x56	; 86
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0d dd       	rcall	.-1510   	; 0x5b6 <lcd_puts_p>
     b9c:	2f e9       	ldi	r18, 0x9F	; 159
     b9e:	86 e8       	ldi	r24, 0x86	; 134
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 40       	sbci	r24, 0x00	; 0
     ba6:	90 40       	sbci	r25, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <main+0x19a>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <main+0x1a4>
     bac:	00 00       	nop
/* wait for button release
 * Don't ask why this is here --- ok, you may ask: Its here if some fool powers
 * up the VFD and keeps the buttons pressed or the buttons somehow are stuck.
 * That would probly lead to undesired operation and so - - - lets wait
 */ 
	if (keyin() > 0){};   
     bae:	c9 dd       	rcall	.-1134   	; 0x742 <keyin>
  TIMSK1 = _BV(ICIE1);
  lcd_putc('6');
  _delay_ms(500);
// read in stored values
  EEPROMInit();
  lcd_putc('7');
     bb0:	87 e3       	ldi	r24, 0x37	; 55
     bb2:	ef dc       	rcall	.-1570   	; 0x592 <lcd_putc>
  lcd_clrscr();
     bb4:	e8 dc       	rcall	.-1584   	; 0x586 <lcd_clrscr>
  lcd_command(LCD_DISP_ON_CURSOR);
     bb6:	8e e0       	ldi	r24, 0x0E	; 14
     bb8:	d6 dc       	rcall	.-1620   	; 0x566 <lcd_command>
 // this line is  only written once, actual values are always displayed in line 2
  lcd_puts_P( "Freq  V/Hz  Amp " );
     bba:	88 e7       	ldi	r24, 0x78	; 120
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fb dc       	rcall	.-1546   	; 0x5b6 <lcd_puts_p>
/* activate the engine by  enabling interrupts globally and let sine driver take over. */
  sei();
     bc0:	78 94       	sei
	if (keyin() > 0) {
	i++;
	if (i<10) _delay_ms(60);
	else {
		_delay_ms(10);
		i = 11;
     bc2:	0f 2e       	mov	r0, r31
     bc4:	fb e0       	ldi	r31, 0x0B	; 11
     bc6:	ef 2e       	mov	r14, r31
     bc8:	f0 2d       	mov	r31, r0
     bca:	0f 2e       	mov	r0, r31
     bcc:	f4 e6       	ldi	r31, 0x64	; 100
     bce:	ff 2e       	mov	r15, r31
     bd0:	f0 2d       	mov	r31, r0
 */
static void execCommand(void)
{
char n;
static uint8_t i;
n = keyin();
     bd2:	b7 dd       	rcall	.-1170   	; 0x742 <keyin>
// first make sure we get inputs from buttons and not from analog inputs
if (!fastFlags.externalControl){
     bd4:	90 fc       	sbrc	r9, 0
     bd6:	48 c0       	rjmp	.+144    	; 0xc68 <main+0x260>
		switch (n) 
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	a9 f0       	breq	.+42     	; 0xc06 <main+0x1fe>
     bdc:	18 f4       	brcc	.+6      	; 0xbe4 <main+0x1dc>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	31 f0       	breq	.+12     	; 0xbee <main+0x1e6>
     be2:	3f c0       	rjmp	.+126    	; 0xc62 <main+0x25a>
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	d9 f1       	breq	.+118    	; 0xc5e <main+0x256>
     be8:	84 30       	cpi	r24, 0x04	; 4
     bea:	01 f1       	breq	.+64     	; 0xc2c <main+0x224>
     bec:	3a c0       	rjmp	.+116    	; 0xc62 <main+0x25a>
		{
// black button - cycle through parameters
		case 1 : parameter++; if (parameter > NUMPARAMS) parameter = 0;
     bee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <parameter>
     bf8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	d0 f1       	brcs	.+116    	; 0xc74 <main+0x26c>
     c00:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
     c04:	37 c0       	rjmp	.+110    	; 0xc74 <main+0x26c>
			break;
// red button  - decrement parameter
		case 2 :
			switch (parameter) {
     c06:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     c0a:	88 23       	and	r24, r24
     c0c:	19 f0       	breq	.+6      	; 0xc14 <main+0x20c>
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	39 f0       	breq	.+14     	; 0xc20 <main+0x218>
     c12:	30 c0       	rjmp	.+96     	; 0xc74 <main+0x26c>
			case 0 : if (Inco < 1) Inco = 1; 
     c14:	81 10       	cpse	r8, r1
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <main+0x214>
     c18:	88 24       	eor	r8, r8
     c1a:	83 94       	inc	r8
				Inco--; 
     c1c:	8a 94       	dec	r8
     c1e:	2a c0       	rjmp	.+84     	; 0xc74 <main+0x26c>
				break;
			case 1 : if (VperHz < 1) VperHz = 1; 
     c20:	71 10       	cpse	r7, r1
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <main+0x220>
     c24:	77 24       	eor	r7, r7
     c26:	73 94       	inc	r7
 				VperHz--; 
     c28:	7a 94       	dec	r7
     c2a:	24 c0       	rjmp	.+72     	; 0xc74 <main+0x26c>
			default : break;
			}
			break;
// green button - increment parameter
		case 4 : 
			switch (parameter) {
     c2c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     c30:	88 23       	and	r24, r24
     c32:	19 f0       	breq	.+6      	; 0xc3a <main+0x232>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	51 f0       	breq	.+20     	; 0xc4c <main+0x244>
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <main+0x26c>
			case 0 :if (Inco > 254) Inco = 254; 
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	82 12       	cpse	r8, r18
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <main+0x240>
     c40:	0f 2e       	mov	r0, r31
     c42:	fe ef       	ldi	r31, 0xFE	; 254
     c44:	8f 2e       	mov	r8, r31
     c46:	f0 2d       	mov	r31, r0
 				Inco++;  
     c48:	83 94       	inc	r8
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <main+0x26c>
				break;
			case 1 :if (VperHz > 254) VperHz = 254; 
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	78 12       	cpse	r7, r24
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <main+0x252>
     c52:	0f 2e       	mov	r0, r31
     c54:	fe ef       	ldi	r31, 0xFE	; 254
     c56:	7f 2e       	mov	r7, r31
     c58:	f0 2d       	mov	r31, r0
 				VperHz++; 
     c5a:	73 94       	inc	r7
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <main+0x26c>
				break;
			default : break;
			}
			break;
// pressing first black (1) and then red (2) button simultaneously goes to extended menu
		case 3 : execExtendedCommand();
     c5e:	cb dd       	rcall	.-1130   	; 0x7f6 <execExtendedCommand>
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <main+0x26c>
			 break;
		default: i = 0; break;
     c62:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i.2500>
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <main+0x26c>
		} // switch
    } else { // external control
// with external control we only can go to the extended menu
		switch (n) 
     c68:	83 30       	cpi	r24, 0x03	; 3
     c6a:	11 f4       	brne	.+4      	; 0xc70 <main+0x268>
		{
// pressing black (1) and red (2) button simultaneously goes to sub menu
		case 3 : execExtendedCommand();
     c6c:	c4 dd       	rcall	.-1144   	; 0x7f6 <execExtendedCommand>
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <main+0x26c>
			 break;
		default: i = 0; break;
     c70:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i.2500>
		} // switch
   }  // external control
// simple autorepeater
	if (keyin() > 0) {
     c74:	66 dd       	rcall	.-1332   	; 0x742 <keyin>
     c76:	88 23       	and	r24, r24
     c78:	b1 f0       	breq	.+44     	; 0xca6 <main+0x29e>
	i++;
     c7a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <i.2500>
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <i.2500>
	if (i<10) _delay_ms(60);
     c84:	8a 30       	cpi	r24, 0x0A	; 10
     c86:	38 f4       	brcc	.+14     	; 0xc96 <main+0x28e>
     c88:	87 e9       	ldi	r24, 0x97	; 151
     c8a:	9a e3       	ldi	r25, 0x3A	; 58
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <main+0x284>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <main+0x28a>
     c92:	00 00       	nop
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <main+0x29e>
     c96:	83 ec       	ldi	r24, 0xC3	; 195
     c98:	99 e0       	ldi	r25, 0x09	; 9
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x292>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <main+0x298>
     ca0:	00 00       	nop
	else {
		_delay_ms(10);
		i = 11;
     ca2:	e0 92 21 01 	sts	0x0121, r14	; 0x800121 <i.2500>
 */
static void showPars(void)
{
const uint8_t *p = cursorpos;

	lcd_gotoxy(0,1);  	
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	65 dc       	rcall	.-1846   	; 0x576 <lcd_gotoxy>
	printdec(freq);printspc();lcd_gotoxy(6,1);
     cac:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
     cb0:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <freq+0x1>
     cb4:	11 dd       	rcall	.-1502   	; 0x6d8 <printdec>
     cb6:	0d dd       	rcall	.-1510   	; 0x6d2 <printspc>
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	5c dc       	rcall	.-1864   	; 0x576 <lcd_gotoxy>
	printdec(VperHz);printspc();printspc();lcd_gotoxy(12,1);
     cbe:	87 2d       	mov	r24, r7
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0a dd       	rcall	.-1516   	; 0x6d8 <printdec>
     cc4:	06 dd       	rcall	.-1524   	; 0x6d2 <printspc>
     cc6:	05 dd       	rcall	.-1526   	; 0x6d2 <printspc>
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	8c e0       	ldi	r24, 0x0C	; 12
     ccc:	54 dc       	rcall	.-1880   	; 0x576 <lcd_gotoxy>
     cce:	f6 9c       	mul	r15, r6
     cd0:	90 01       	movw	r18, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	a1 e8       	ldi	r26, 0x81	; 129
     cd6:	b0 e8       	ldi	r27, 0x80	; 128
     cd8:	27 d2       	rcall	.+1102   	; 0x1128 <__umulhisi3>
     cda:	4a e0       	ldi	r20, 0x0A	; 10
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	88 0f       	add	r24, r24
     ce2:	89 2f       	mov	r24, r25
     ce4:	88 1f       	adc	r24, r24
     ce6:	99 0b       	sbc	r25, r25
     ce8:	91 95       	neg	r25
     cea:	3a d2       	rcall	.+1140   	; 0x1160 <__itoa_ncheck>
		lcd_putc(dectable[n]);
	}
}
static void printnum(int16_t number) {
uint8_t n,i;
	a = itoa(number,dectable,10);
     cec:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <a>
	i = strlen(dectable);
     cf0:	e0 e0       	ldi	r30, 0x00	; 0
     cf2:	f1 e0       	ldi	r31, 0x01	; 1
     cf4:	01 90       	ld	r0, Z+
     cf6:	00 20       	and	r0, r0
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <main+0x2ec>
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	e0 50       	subi	r30, 0x00	; 0
     cfe:	f1 40       	sbci	r31, 0x01	; 1
	for (n=0;n < i;n++) {
     d00:	ee 23       	and	r30, r30
     d02:	61 f0       	breq	.+24     	; 0xd1c <main+0x314>
     d04:	c0 e0       	ldi	r28, 0x00	; 0
     d06:	d1 e0       	ldi	r29, 0x01	; 1
     d08:	e1 50       	subi	r30, 0x01	; 1
     d0a:	0e 2f       	mov	r16, r30
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1e 4f       	sbci	r17, 0xFE	; 254
		lcd_putc(dectable[n]);
     d12:	89 91       	ld	r24, Y+
     d14:	3e dc       	rcall	.-1924   	; 0x592 <lcd_putc>
}
static void printnum(int16_t number) {
uint8_t n,i;
	a = itoa(number,dectable,10);
	i = strlen(dectable);
	for (n=0;n < i;n++) {
     d16:	c0 17       	cp	r28, r16
     d18:	d1 07       	cpc	r29, r17
     d1a:	d9 f7       	brne	.-10     	; 0xd12 <main+0x30a>
const uint8_t *p = cursorpos;

	lcd_gotoxy(0,1);  	
	printdec(freq);printspc();lcd_gotoxy(6,1);
	printdec(VperHz);printspc();printspc();lcd_gotoxy(12,1);
	printnum((uint16_t)(amplitude*100)/255);lcd_putc('%');printspc();
     d1c:	85 e2       	ldi	r24, 0x25	; 37
     d1e:	39 dc       	rcall	.-1934   	; 0x592 <lcd_putc>
     d20:	d8 dc       	rcall	.-1616   	; 0x6d2 <printspc>
	lcd_gotoxy(pgm_read_byte(p+parameter),1); // set cursor below active parameter
     d22:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <parameter>
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	e5 54       	subi	r30, 0x45	; 69
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	84 91       	lpm	r24, Z
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	22 dc       	rcall	.-1980   	; 0x576 <lcd_gotoxy>
     d32:	81 ee       	ldi	r24, 0xE1	; 225
     d34:	94 e0       	ldi	r25, 0x04	; 4
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <main+0x32e>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <main+0x334>
     d3c:	00 00       	nop
     d3e:	49 cf       	rjmp	.-366    	; 0xbd2 <main+0x1ca>

00000d40 <__vector_5>:
 *
 *  This ISR is called every time the direction input pin changes
 *  state. The desired direction flag is updated accordingly. 
 */
ISR(PCINT2_vect)
{
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	2f 93       	push	r18
     d4c:	3f 93       	push	r19
     d4e:	4f 93       	push	r20
     d50:	5f 93       	push	r21
     d52:	6f 93       	push	r22
     d54:	7f 93       	push	r23
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
 *  Running this function triggers a reading of the direction
 *  input pin. The desiredDirection flag is set accordingly.
 */
static void DesiredDirectionUpdate(void)
{
 if ( bit_is_clear(PIND,DIRECTION_COMMAND_PIN) )
     d62:	89 b1       	in	r24, 0x09	; 9
  {
    fastFlags.desiredDirection = DIRECTION_REVERSE;
     d64:	80 95       	com	r24
     d66:	88 1f       	adc	r24, r24
     d68:	88 27       	eor	r24, r24
     d6a:	88 1f       	adc	r24, r24
     d6c:	80 fb       	bst	r24, 0
     d6e:	91 f8       	bld	r9, 1
}
void ChangeDirection(void)
{
  DesiredDirectionUpdate();
  //Disable driver signals
  DisablePWMOutputs();
     d70:	63 dc       	rcall	.-1850   	; 0x638 <DisablePWMOutputs>
  fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     d72:	89 2d       	mov	r24, r9
     d74:	8c 60       	ori	r24, 0x0C	; 12
     d76:	98 2e       	mov	r9, r24
 */
ISR(PCINT2_vect)
{
  //Call the routine to actually stop the motor and reverse
	ChangeDirection();
}
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	7f 91       	pop	r23
     d86:	6f 91       	pop	r22
     d88:	5f 91       	pop	r21
     d8a:	4f 91       	pop	r20
     d8c:	3f 91       	pop	r19
     d8e:	2f 91       	pop	r18
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_16>:
// 
EMPTY_INTERRUPT(TIMER0_OVF_vect);
     d9a:	18 95       	reti

00000d9c <__vector_14>:

// ISR stub for  unused irqs. The AVRs sometimes need to fire an interupt and 
// execute it before OC registers are updated
EMPTY_INTERRUPT(TIMER0_COMPB_vect);
     d9c:	18 95       	reti

00000d9e <__vector_10>:
 * reaches TOP (0xff). New sinusoidal output values are calculated and the
 * timers are updated to reflect the new values.
 * The core routine of the VF Drive
 */
ISR(TIMER1_CAPT_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <__vector_10+0x34>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
static uint8_t speedRegTicks = 0;
uint8_t tempU, tempV, tempW;
    {
  if (fastFlags.driveWaveform != WAVEFORM_SINUSOIDAL) TimersSetModeSinusoidal();
     dd6:	89 2d       	mov	r24, r9
     dd8:	86 95       	lsr	r24
     dda:	86 95       	lsr	r24
     ddc:	83 70       	andi	r24, 0x03	; 3
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	09 f1       	breq	.+66     	; 0xe24 <__vector_10+0x86>
 *  through.
 */
static void TimersSetModeSinusoidal(void)
{
  //Set PWM pins to input (Hi-Z) while changing modes.
  DisablePWMOutputs();
     de2:	2a dc       	rcall	.-1964   	; 0x638 <DisablePWMOutputs>

  //Sets all 3 timers in inverted pair mode.
  TCCR0A = (1 << COM0A1) | (0 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM00);
     de4:	81 eb       	ldi	r24, 0xB1	; 177
     de6:	84 bd       	out	0x24, r24	; 36
  TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << WGM11);
     de8:	92 eb       	ldi	r25, 0xB2	; 178
     dea:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  TCCR2A = (1 << COM2A1) | (0 << COM2A0) | (1 << COM2B1) | (1 << COM2B0) | (1 << WGM20);
     dee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__EEPROM_REGION_LENGTH__+0x7f00b0>

  //Make sure all outputs are turned off before PWM outputs are enabled.
  OCR0A = OCR1AL = OCR2A = 0;
     df2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
     df6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
     dfa:	17 bc       	out	0x27, r1	; 39
  OCR0B = OCR1BL = OCR2B = 0xff;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__EEPROM_REGION_LENGTH__+0x7f00b4>
     e02:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
     e06:	88 bd       	out	0x28, r24	; 40
 *  does not occur in the transition between two output waveform generation modes.
 */
static void TimersWaitForNextPWMCycle(void)
{
  //Clear Timer1 Capture event flag.
  TIFR1 = (1 << ICF1);
     e08:	80 e2       	ldi	r24, 0x20	; 32
     e0a:	86 bb       	out	0x16, r24	; 22

  //Wait for new Timer1 Capture event flag.
  while ( !(TIFR1 & (1 << ICF1)) )
     e0c:	b5 9b       	sbis	0x16, 5	; 22
     e0e:	fe cf       	rjmp	.-4      	; 0xe0c <__vector_10+0x6e>
  OCR0B = OCR1BL = OCR2B = 0xff;

  //Wait for next PWM cycle to ensure that all outputs are updated.
  TimersWaitForNextPWMCycle();

  fastFlags.driveWaveform = WAVEFORM_SINUSOIDAL;
     e10:	89 2d       	mov	r24, r9
     e12:	83 7f       	andi	r24, 0xF3	; 243
     e14:	84 60       	ori	r24, 0x04	; 4
     e16:	98 2e       	mov	r9, r24
 *  all PWM pins as output. The PWM configuration itself is not altered
 *  in any way by running this function.
 */
static void EnablePWMOutputs(void)
{
  DDRB |= PWM_PATTERN_PORTB;
     e18:	84 b1       	in	r24, 0x04	; 4
     e1a:	8e 60       	ori	r24, 0x0E	; 14
     e1c:	84 b9       	out	0x04, r24	; 4
  DDRD |= PWM_PATTERN_PORTD;
     e1e:	8a b1       	in	r24, 0x0a	; 10
     e20:	88 66       	ori	r24, 0x68	; 104
     e22:	8a b9       	out	0x0a, r24	; 10
static uint8_t speedRegTicks = 0;
uint8_t tempU, tempV, tempW;
    {
  if (fastFlags.driveWaveform != WAVEFORM_SINUSOIDAL) TimersSetModeSinusoidal();
      const uint8_t *sineTablePtr = sineTable ;  // set to start of sine table
      sineTableIncrement = Inco;			// stepwidth = frequency selection
     e24:	28 2c       	mov	r2, r8
     e26:	31 2c       	mov	r3, r1
 *
 *  \param increment The increment (in 8.8 format) added to the sine table index.
 */
static void AdjustSineTableIndex(const uint16_t increment)
{
  sineTableIndex += increment ;
     e28:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     e2c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     e30:	82 0d       	add	r24, r2
     e32:	93 1d       	adc	r25, r3
     e34:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sineTableIndex+0x1>
     e38:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sineTableIndex>

  // If the table index is out of bounds, wrap the index around the table end
  // to continue from the beginning. Also wrap the next sector start index.
  if ((sineTableIndex >> 8) >= SINE_TABLE_LENGTH)
     e3c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     e40:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     e44:	81 15       	cp	r24, r1
     e46:	90 4c       	sbci	r25, 0xC0	; 192
     e48:	48 f0       	brcs	.+18     	; 0xe5c <__vector_10+0xbe>
  {
    sineTableIndex -= (SINE_TABLE_LENGTH << 8);
     e4a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     e4e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     e52:	90 5c       	subi	r25, 0xC0	; 192
     e54:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sineTableIndex+0x1>
     e58:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sineTableIndex>
      sineTableIncrement = Inco;			// stepwidth = frequency selection
      AdjustSineTableIndex(sineTableIncrement);  // call the routine to update the pointer

      //Add sine table offset to pointer. Must be multiplied by 3, since one
      //value for each phase is stored in the table.
      sineTablePtr += (sineTableIndex >> 8) * 3;
     e5c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <sineTableIndex>
     e60:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <sineTableIndex+0x1>
     e64:	ef 2f       	mov	r30, r31
     e66:	ff 27       	eor	r31, r31
     e68:	cf 01       	movw	r24, r30
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	e8 0f       	add	r30, r24
     e70:	f9 1f       	adc	r31, r25
     e72:	9f 01       	movw	r18, r30
     e74:	2f 53       	subi	r18, 0x3F	; 63
     e76:	3f 4f       	sbci	r19, 0xFF	; 255

      tempU = pgm_read_byte(sineTablePtr++);
     e78:	cf 01       	movw	r24, r30
     e7a:	8e 53       	subi	r24, 0x3E	; 62
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	f9 01       	movw	r30, r18
     e80:	44 91       	lpm	r20, Z
      if (fastFlags.desiredDirection == DIRECTION_FORWARD)
     e82:	91 fc       	sbrc	r9, 1
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <__vector_10+0xf4>
      {
        tempW = pgm_read_byte(sineTablePtr++);
     e86:	fc 01       	movw	r30, r24
     e88:	e4 90       	lpm	r14, Z
     e8a:	f9 01       	movw	r30, r18
     e8c:	32 96       	adiw	r30, 0x02	; 2
        tempV = pgm_read_byte(sineTablePtr);
     e8e:	04 91       	lpm	r16, Z
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <__vector_10+0xfe>
      }
      else
      {
        tempV = pgm_read_byte(sineTablePtr++);
     e92:	fc 01       	movw	r30, r24
     e94:	04 91       	lpm	r16, Z
     e96:	f9 01       	movw	r30, r18
     e98:	32 96       	adiw	r30, 0x02	; 2
        tempW = pgm_read_byte(sineTablePtr);
     e9a:	e4 90       	lpm	r14, Z
#ifdef PURE_SINE_DRIVE
    tempU = 128 - ((uint16_t)(amplitude * tempU) >> 9);
    tempV = 128 - ((uint16_t)(amplitude * tempV) >> 9);
    tempW = 128 - ((uint16_t)(amplitude * tempW) >> 9);
#else
    tempU = ((uint16_t)(amplitude * tempU) >> 8);
     e9c:	64 9e       	mul	r6, r20
     e9e:	f0 01       	movw	r30, r0
     ea0:	11 24       	eor	r1, r1
    tempV = ((uint16_t)(amplitude * tempV) >> 8);
     ea2:	60 9e       	mul	r6, r16
     ea4:	80 01       	movw	r16, r0
     ea6:	11 24       	eor	r1, r1
    tempW = ((uint16_t)(amplitude * tempW) >> 8);
     ea8:	6e 9c       	mul	r6, r14
     eaa:	70 01       	movw	r14, r0
     eac:	11 24       	eor	r1, r1
#endif
    {
    	uint8_t compareHigh, compareLow;
    	InsertDeadband(tempU, &compareHigh, &compareLow);
     eae:	ae 01       	movw	r20, r28
     eb0:	4f 5f       	subi	r20, 0xFF	; 255
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	be 01       	movw	r22, r28
     eb6:	6e 5f       	subi	r22, 0xFE	; 254
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8f 2f       	mov	r24, r31
     ebc:	c4 db       	rcall	.-2168   	; 0x646 <InsertDeadband>
		OCR0A = compareHigh;
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	87 bd       	out	0x27, r24	; 39
		OCR0B = compareLow;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	88 bd       	out	0x28, r24	; 40

    	InsertDeadband(tempV, &compareHigh, &compareLow);
     ec6:	ae 01       	movw	r20, r28
     ec8:	4f 5f       	subi	r20, 0xFF	; 255
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	be 01       	movw	r22, r28
     ece:	6e 5f       	subi	r22, 0xFE	; 254
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	81 2f       	mov	r24, r17
     ed4:	b8 db       	rcall	.-2192   	; 0x646 <InsertDeadband>
		OCR1AL = compareHigh;
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
		OCR1BL = compareLow;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>

    	InsertDeadband(tempW, &compareHigh, &compareLow);
     ee2:	ae 01       	movw	r20, r28
     ee4:	4f 5f       	subi	r20, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	be 01       	movw	r22, r28
     eea:	6e 5f       	subi	r22, 0xFE	; 254
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 2d       	mov	r24, r15
     ef0:	aa db       	rcall	.-2220   	; 0x646 <InsertDeadband>
		OCR2A = compareHigh;
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
		OCR2B = compareLow;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__EEPROM_REGION_LENGTH__+0x7f00b4>
    }
// regular task calls the SpeedController 
  	speedRegTicks++;
     efe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
    if (speedRegTicks >= SPEED_CONTROLLER_TIME_BASE)
     f08:	88 3c       	cpi	r24, 0xC8	; 200
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__vector_10+0x170>
     f0c:	52 c0       	rjmp	.+164    	; 0xfb2 <__vector_10+0x214>
 */
static void SpeedController(void)
{
int32_t outputValue, amplitudeValue;
 // calculate the frequency
if (fastFlags.externalControl) {
     f0e:	90 fe       	sbrs	r9, 0
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <__vector_10+0x19c>
//Calculate an increment setpoint from the analog speed input.
	  int16_t incrementSetpoint = ((uint32_t)speedInput * SPEED_CONTROLLER_MAX_INCREMENT) / SPEED_CONTROLLER_MAX_INPUT;
     f12:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <speedInput>
//PID regulator with feed forward from speed input.
	  outputValue = (uint32_t)speedInput;
     f16:	c0 90 39 01 	lds	r12, 0x0139	; 0x800139 <speedInput>
	  outputValue += PID_Controller(incrementSetpoint, ((uint16_t)Inco),(pidData_t *) &pidParameters);
     f1a:	e8 2d       	mov	r30, r8
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	af ef       	ldi	r26, 0xFF	; 255
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	01 d1       	rcall	.+514    	; 0x1128 <__umulhisi3>
     f26:	bb 27       	eor	r27, r27
     f28:	a9 2f       	mov	r26, r25
     f2a:	98 2f       	mov	r25, r24
     f2c:	87 2f       	mov	r24, r23
     f2e:	45 e2       	ldi	r20, 0x25	; 37
     f30:	51 e0       	ldi	r21, 0x01	; 1
     f32:	bf 01       	movw	r22, r30
     f34:	29 da       	rcall	.-2990   	; 0x388 <PID_Controller>
	  Inco = (uint16_t)outputValue;
     f36:	8c 0d       	add	r24, r12
     f38:	88 2e       	mov	r8, r24
 }
// clamp
 freq = DIVISIONEER/(SINE_TABLE_DISP/Inco);
     f3a:	68 2d       	mov	r22, r8
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	9b e4       	ldi	r25, 0x4B	; 75
     f42:	8d d0       	rcall	.+282    	; 0x105e <__udivmodhi4>
     f44:	9b 01       	movw	r18, r22
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	66 ed       	ldi	r22, 0xD6	; 214
     f4c:	7c ed       	ldi	r23, 0xDC	; 220
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	ac d0       	rcall	.+344    	; 0x10ac <__udivmodsi4>
     f54:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <freq+0x1>
     f58:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <freq>
 amplitudeValue = (freq/10)*VperHz;
     f5c:	ad ec       	ldi	r26, 0xCD	; 205
     f5e:	bc ec       	ldi	r27, 0xCC	; 204
     f60:	e3 d0       	rcall	.+454    	; 0x1128 <__umulhisi3>
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	78 9e       	mul	r7, r24
     f70:	b0 01       	movw	r22, r0
     f72:	79 9e       	mul	r7, r25
     f74:	70 0d       	add	r23, r0
     f76:	11 24       	eor	r1, r1
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
 if (amplitudeValue < 1)
     f7c:	16 16       	cp	r1, r22
     f7e:	17 06       	cpc	r1, r23
     f80:	18 06       	cpc	r1, r24
     f82:	19 06       	cpc	r1, r25
     f84:	5c f4       	brge	.+22     	; 0xf9c <__vector_10+0x1fe>
  	{
    		amplitudeValue = 0;
  	}
 else if (amplitudeValue > 2549)
     f86:	66 3f       	cpi	r22, 0xF6	; 246
     f88:	f9 e0       	ldi	r31, 0x09	; 9
     f8a:	7f 07       	cpc	r23, r31
     f8c:	81 05       	cpc	r24, r1
     f8e:	91 05       	cpc	r25, r1
     f90:	44 f0       	brlt	.+16     	; 0xfa2 <__vector_10+0x204>
  	{
    		amplitudeValue = 2550;
     f92:	66 ef       	ldi	r22, 0xF6	; 246
     f94:	79 e0       	ldi	r23, 0x09	; 9
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <__vector_10+0x204>
// clamp
 freq = DIVISIONEER/(SINE_TABLE_DISP/Inco);
 amplitudeValue = (freq/10)*VperHz;
 if (amplitudeValue < 1)
  	{
    		amplitudeValue = 0;
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	cb 01       	movw	r24, r22
  	}
 else if (amplitudeValue > 2549)
  	{
    		amplitudeValue = 2550;
  	}
 amplitude = amplitudeValue / 10;
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	a2 d0       	rcall	.+324    	; 0x10f0 <__divmodsi4>
     fac:	62 2e       	mov	r6, r18
// regular task calls the SpeedController 
  	speedRegTicks++;
    if (speedRegTicks >= SPEED_CONTROLLER_TIME_BASE)
    {
		SpeedController();
     	speedRegTicks = 0; 
     fae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	}
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	ff 91       	pop	r31
     fbc:	ef 91       	pop	r30
     fbe:	bf 91       	pop	r27
     fc0:	af 91       	pop	r26
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	7f 91       	pop	r23
     fc8:	6f 91       	pop	r22
     fca:	5f 91       	pop	r21
     fcc:	4f 91       	pop	r20
     fce:	3f 91       	pop	r19
     fd0:	2f 91       	pop	r18
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_21>:
 *  this is declared as non-blocking
 *
 *  Only the 8 most significant bits of the ADC result are used.
 */
ISR(ADC_vect, ISR_NOBLOCK)
{
     fe8:	78 94       	sei
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
  if (fastFlags.externalControl) {
     ffa:	90 fe       	sbrs	r9, 0
     ffc:	28 c0       	rjmp	.+80     	; 0x104e <__vector_21+0x66>
  switch (ADMUX)
     ffe:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    1002:	84 36       	cpi	r24, 0x64	; 100
    1004:	19 f0       	breq	.+6      	; 0x100c <__vector_21+0x24>
    1006:	85 36       	cpi	r24, 0x65	; 101
    1008:	81 f0       	breq	.+32     	; 0x102a <__vector_21+0x42>
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <__vector_21+0x5a>
  {
  case ADMUX_FREQUENCY:
    	speedInput = (speedInput + ADCH) >> 1; // do some averaging
    100c:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <speedInput>
    1010:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	82 0f       	add	r24, r18
    1018:	91 1d       	adc	r25, r1
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <speedInput>
    	ADMUX = ADMUX_AMPLITUDE;
    1022:	85 e6       	ldi	r24, 0x65	; 101
    1024:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    	break;
    1028:	0f c0       	rjmp	.+30     	; 0x1048 <__vector_21+0x60>
  case ADMUX_AMPLITUDE:
    	VperHz = (VperHz + ADCH) >> 1;
    102a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	87 0d       	add	r24, r7
    1032:	91 1d       	adc	r25, r1
    1034:	95 95       	asr	r25
    1036:	87 95       	ror	r24
    1038:	78 2e       	mov	r7, r24
    	ADMUX = ADMUX_FREQUENCY; 
    103a:	84 e6       	ldi	r24, 0x64	; 100
    103c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    	break;
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <__vector_21+0x60>
  default:
    //This is probably an error and should be handled. Instead we set the multiplexer and just run away
    	ADMUX = ADMUX_FREQUENCY; 
    1042:	84 e6       	ldi	r24, 0x64	; 100
    1044:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
    break;
  } 
// restart the ADC
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (1 << ADIF) | (1 << ADIE) | ADC_PRESCALER;
    1048:	8e ed       	ldi	r24, 0xDE	; 222
    104a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 }
}
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <__udivmodhi4>:
    105e:	aa 1b       	sub	r26, r26
    1060:	bb 1b       	sub	r27, r27
    1062:	51 e1       	ldi	r21, 0x11	; 17
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <__udivmodhi4_ep>

00001066 <__udivmodhi4_loop>:
    1066:	aa 1f       	adc	r26, r26
    1068:	bb 1f       	adc	r27, r27
    106a:	a6 17       	cp	r26, r22
    106c:	b7 07       	cpc	r27, r23
    106e:	10 f0       	brcs	.+4      	; 0x1074 <__udivmodhi4_ep>
    1070:	a6 1b       	sub	r26, r22
    1072:	b7 0b       	sbc	r27, r23

00001074 <__udivmodhi4_ep>:
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	5a 95       	dec	r21
    107a:	a9 f7       	brne	.-22     	; 0x1066 <__udivmodhi4_loop>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	08 95       	ret

00001086 <__divmodhi4>:
    1086:	97 fb       	bst	r25, 7
    1088:	07 2e       	mov	r0, r23
    108a:	16 f4       	brtc	.+4      	; 0x1090 <__divmodhi4+0xa>
    108c:	00 94       	com	r0
    108e:	06 d0       	rcall	.+12     	; 0x109c <__divmodhi4_neg1>
    1090:	77 fd       	sbrc	r23, 7
    1092:	08 d0       	rcall	.+16     	; 0x10a4 <__divmodhi4_neg2>
    1094:	e4 df       	rcall	.-56     	; 0x105e <__udivmodhi4>
    1096:	07 fc       	sbrc	r0, 7
    1098:	05 d0       	rcall	.+10     	; 0x10a4 <__divmodhi4_neg2>
    109a:	3e f4       	brtc	.+14     	; 0x10aa <__divmodhi4_exit>

0000109c <__divmodhi4_neg1>:
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	08 95       	ret

000010a4 <__divmodhi4_neg2>:
    10a4:	70 95       	com	r23
    10a6:	61 95       	neg	r22
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255

000010aa <__divmodhi4_exit>:
    10aa:	08 95       	ret

000010ac <__udivmodsi4>:
    10ac:	a1 e2       	ldi	r26, 0x21	; 33
    10ae:	1a 2e       	mov	r1, r26
    10b0:	aa 1b       	sub	r26, r26
    10b2:	bb 1b       	sub	r27, r27
    10b4:	fd 01       	movw	r30, r26
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__udivmodsi4_ep>

000010b8 <__udivmodsi4_loop>:
    10b8:	aa 1f       	adc	r26, r26
    10ba:	bb 1f       	adc	r27, r27
    10bc:	ee 1f       	adc	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	a2 17       	cp	r26, r18
    10c2:	b3 07       	cpc	r27, r19
    10c4:	e4 07       	cpc	r30, r20
    10c6:	f5 07       	cpc	r31, r21
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__udivmodsi4_ep>
    10ca:	a2 1b       	sub	r26, r18
    10cc:	b3 0b       	sbc	r27, r19
    10ce:	e4 0b       	sbc	r30, r20
    10d0:	f5 0b       	sbc	r31, r21

000010d2 <__udivmodsi4_ep>:
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	1a 94       	dec	r1
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <__udivmodsi4_loop>
    10de:	60 95       	com	r22
    10e0:	70 95       	com	r23
    10e2:	80 95       	com	r24
    10e4:	90 95       	com	r25
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
    10ea:	bd 01       	movw	r22, r26
    10ec:	cf 01       	movw	r24, r30
    10ee:	08 95       	ret

000010f0 <__divmodsi4>:
    10f0:	05 2e       	mov	r0, r21
    10f2:	97 fb       	bst	r25, 7
    10f4:	16 f4       	brtc	.+4      	; 0x10fa <__divmodsi4+0xa>
    10f6:	00 94       	com	r0
    10f8:	0f d0       	rcall	.+30     	; 0x1118 <__negsi2>
    10fa:	57 fd       	sbrc	r21, 7
    10fc:	05 d0       	rcall	.+10     	; 0x1108 <__divmodsi4_neg2>
    10fe:	d6 df       	rcall	.-84     	; 0x10ac <__udivmodsi4>
    1100:	07 fc       	sbrc	r0, 7
    1102:	02 d0       	rcall	.+4      	; 0x1108 <__divmodsi4_neg2>
    1104:	46 f4       	brtc	.+16     	; 0x1116 <__divmodsi4_exit>
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__negsi2>

00001108 <__divmodsi4_neg2>:
    1108:	50 95       	com	r21
    110a:	40 95       	com	r20
    110c:	30 95       	com	r19
    110e:	21 95       	neg	r18
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	4f 4f       	sbci	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255

00001116 <__divmodsi4_exit>:
    1116:	08 95       	ret

00001118 <__negsi2>:
    1118:	90 95       	com	r25
    111a:	80 95       	com	r24
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	08 95       	ret

00001128 <__umulhisi3>:
    1128:	a2 9f       	mul	r26, r18
    112a:	b0 01       	movw	r22, r0
    112c:	b3 9f       	mul	r27, r19
    112e:	c0 01       	movw	r24, r0
    1130:	a3 9f       	mul	r26, r19
    1132:	01 d0       	rcall	.+2      	; 0x1136 <__umulhisi3+0xe>
    1134:	b2 9f       	mul	r27, r18
    1136:	70 0d       	add	r23, r0
    1138:	81 1d       	adc	r24, r1
    113a:	11 24       	eor	r1, r1
    113c:	91 1d       	adc	r25, r1
    113e:	08 95       	ret

00001140 <__mulshisi3>:
    1140:	b7 ff       	sbrs	r27, 7
    1142:	04 c0       	rjmp	.+8      	; 0x114c <__muluhisi3>

00001144 <__mulohisi3>:
    1144:	03 d0       	rcall	.+6      	; 0x114c <__muluhisi3>
    1146:	82 1b       	sub	r24, r18
    1148:	93 0b       	sbc	r25, r19
    114a:	08 95       	ret

0000114c <__muluhisi3>:
    114c:	ed df       	rcall	.-38     	; 0x1128 <__umulhisi3>
    114e:	a5 9f       	mul	r26, r21
    1150:	90 0d       	add	r25, r0
    1152:	b4 9f       	mul	r27, r20
    1154:	90 0d       	add	r25, r0
    1156:	a4 9f       	mul	r26, r20
    1158:	80 0d       	add	r24, r0
    115a:	91 1d       	adc	r25, r1
    115c:	11 24       	eor	r1, r1
    115e:	08 95       	ret

00001160 <__itoa_ncheck>:
    1160:	bb 27       	eor	r27, r27
    1162:	4a 30       	cpi	r20, 0x0A	; 10
    1164:	31 f4       	brne	.+12     	; 0x1172 <__itoa_ncheck+0x12>
    1166:	99 23       	and	r25, r25
    1168:	22 f4       	brpl	.+8      	; 0x1172 <__itoa_ncheck+0x12>
    116a:	bd e2       	ldi	r27, 0x2D	; 45
    116c:	90 95       	com	r25
    116e:	81 95       	neg	r24
    1170:	9f 4f       	sbci	r25, 0xFF	; 255
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <__utoa_common>

00001174 <__utoa_ncheck>:
    1174:	bb 27       	eor	r27, r27

00001176 <__utoa_common>:
    1176:	fb 01       	movw	r30, r22
    1178:	55 27       	eor	r21, r21
    117a:	aa 27       	eor	r26, r26
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	aa 1f       	adc	r26, r26
    1182:	a4 17       	cp	r26, r20
    1184:	10 f0       	brcs	.+4      	; 0x118a <__utoa_common+0x14>
    1186:	a4 1b       	sub	r26, r20
    1188:	83 95       	inc	r24
    118a:	50 51       	subi	r21, 0x10	; 16
    118c:	b9 f7       	brne	.-18     	; 0x117c <__utoa_common+0x6>
    118e:	a0 5d       	subi	r26, 0xD0	; 208
    1190:	aa 33       	cpi	r26, 0x3A	; 58
    1192:	08 f0       	brcs	.+2      	; 0x1196 <__utoa_common+0x20>
    1194:	a9 5d       	subi	r26, 0xD9	; 217
    1196:	a1 93       	st	Z+, r26
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	79 f7       	brne	.-34     	; 0x117a <__utoa_common+0x4>
    119c:	b1 11       	cpse	r27, r1
    119e:	b1 93       	st	Z+, r27
    11a0:	11 92       	st	Z+, r1
    11a2:	cb 01       	movw	r24, r22
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <strrev>

000011a6 <strrev>:
    11a6:	dc 01       	movw	r26, r24
    11a8:	fc 01       	movw	r30, r24
    11aa:	67 2f       	mov	r22, r23
    11ac:	71 91       	ld	r23, Z+
    11ae:	77 23       	and	r23, r23
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <strrev+0x4>
    11b2:	32 97       	sbiw	r30, 0x02	; 2
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <strrev+0x18>
    11b6:	7c 91       	ld	r23, X
    11b8:	6d 93       	st	X+, r22
    11ba:	70 83       	st	Z, r23
    11bc:	62 91       	ld	r22, -Z
    11be:	ae 17       	cp	r26, r30
    11c0:	bf 07       	cpc	r27, r31
    11c2:	c8 f3       	brcs	.-14     	; 0x11b6 <strrev+0x10>
    11c4:	08 95       	ret

000011c6 <eeprom_read_byte>:
    11c6:	f9 99       	sbic	0x1f, 1	; 31
    11c8:	fe cf       	rjmp	.-4      	; 0x11c6 <eeprom_read_byte>
    11ca:	92 bd       	out	0x22, r25	; 34
    11cc:	81 bd       	out	0x21, r24	; 33
    11ce:	f8 9a       	sbi	0x1f, 0	; 31
    11d0:	99 27       	eor	r25, r25
    11d2:	80 b5       	in	r24, 0x20	; 32
    11d4:	08 95       	ret

000011d6 <eeprom_read_word>:
    11d6:	a8 e1       	ldi	r26, 0x18	; 24
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	42 e0       	ldi	r20, 0x02	; 2
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <eeprom_read_blraw>

000011e0 <eeprom_write_byte>:
    11e0:	26 2f       	mov	r18, r22

000011e2 <eeprom_write_r18>:
    11e2:	f9 99       	sbic	0x1f, 1	; 31
    11e4:	fe cf       	rjmp	.-4      	; 0x11e2 <eeprom_write_r18>
    11e6:	1f ba       	out	0x1f, r1	; 31
    11e8:	92 bd       	out	0x22, r25	; 34
    11ea:	81 bd       	out	0x21, r24	; 33
    11ec:	20 bd       	out	0x20, r18	; 32
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	fa 9a       	sbi	0x1f, 2	; 31
    11f4:	f9 9a       	sbi	0x1f, 1	; 31
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	08 95       	ret

000011fc <eeprom_write_word>:
    11fc:	f1 df       	rcall	.-30     	; 0x11e0 <eeprom_write_byte>
    11fe:	27 2f       	mov	r18, r23
    1200:	f0 cf       	rjmp	.-32     	; 0x11e2 <eeprom_write_r18>

00001202 <eeprom_read_block>:
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22

00001206 <eeprom_read_blraw>:
    1206:	fc 01       	movw	r30, r24
    1208:	f9 99       	sbic	0x1f, 1	; 31
    120a:	fe cf       	rjmp	.-4      	; 0x1208 <eeprom_read_blraw+0x2>
    120c:	06 c0       	rjmp	.+12     	; 0x121a <eeprom_read_blraw+0x14>
    120e:	f2 bd       	out	0x22, r31	; 34
    1210:	e1 bd       	out	0x21, r30	; 33
    1212:	f8 9a       	sbi	0x1f, 0	; 31
    1214:	31 96       	adiw	r30, 0x01	; 1
    1216:	00 b4       	in	r0, 0x20	; 32
    1218:	0d 92       	st	X+, r0
    121a:	41 50       	subi	r20, 0x01	; 1
    121c:	50 40       	sbci	r21, 0x00	; 0
    121e:	b8 f7       	brcc	.-18     	; 0x120e <eeprom_read_blraw+0x8>
    1220:	08 95       	ret

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
