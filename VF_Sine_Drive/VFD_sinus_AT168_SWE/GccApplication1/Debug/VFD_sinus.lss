
VFD_sinus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001372  00001426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001372  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800120  00800120  00001446  2**0
                  ALLOC
  3 .eeprom       00000009  00810000  00810000  00001446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  000014c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000027fd  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d0d  00000000  00000000  00003ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012e3  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e8  00000000  00000000  00005e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009e7  00000000  00000000  00006280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000014ca  00000000  00000000  00006c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00008131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__ctors_end>
       4:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
       8:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
       c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      10:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      14:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_5>
      18:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      20:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      24:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      28:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_10>
      2c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      30:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      34:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      38:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_14>
      3c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_14>
      40:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__vector_16>
      44:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      48:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      4c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      50:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      54:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_21>
      58:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      5c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      60:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>
      64:	0c 94 b8 01 	jmp	0x370	; 0x370 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	46 72       	andi	r20, 0x26	; 38
      6a:	65 71       	andi	r22, 0x15	; 21
      6c:	20 20       	and	r2, r0
      6e:	56 2f       	mov	r21, r22
      70:	48 7a       	andi	r20, 0xA8	; 168
      72:	20 20       	and	r2, r0
      74:	41 6d       	ori	r20, 0xD1	; 209
      76:	70 20       	and	r7, r0
	...

00000079 <__c.2456>:
      79:	50 20 20 20 49 20 20 20 44 20 20 20 20 44 54 20     P   I   D    DT 
	...

0000008a <__c.2388>:
      8a:	52 65 61 64 20 44 6f 6e 65 20 20 20 20 20 20 20     Read Done       
	...

0000009b <__c.2386>:
      9b:	52 65 61 64 69 6e 67 20 45 45 50 52 4f 4d 20 20     Reading EEPROM  
	...

000000ac <__c.2529>:
      ac:	46 72 65 71 20 20 56 2f 48 7a 20 20 41 6d 70 20     Freq  V/Hz  Amp 
	...

000000bd <__c.2527>:
      bd:	56 46 20 4d 6f 74 6f 72 20 44 72 69 76 65 0a 00     VF Motor Drive..

000000cd <__c.2441>:
      cd:	53 74 6f 72 65 64 20 20 20 20 20 20 20 20 20 20     Stored          
	...

000000de <__c.2425>:
      de:	53 74 6f 72 69 6e 67 20 45 45 50 52 4f 4d 20 20     Storing EEPROM  
	...

000000ef <cursorpos>:
      ef:	00 06                                               ..

000000f1 <cursorextpos>:
      f1:	00 04 08 0d                                         ....

000000f5 <sineTable>:
      f5:	00 00 dd 08 00 e1 11 00 e5 19 00 e8 21 00 ec 2a     ............!..*
     105:	00 ef 32 00 f1 3a 00 f4 42 00 f6 4a 00 f8 52 00     ..2..:..B..J..R.
     115:	fa 5a 00 fc 62 00 fd 69 00 fe 71 00 fe 78 00 ff     .Z..b..i..q..x..
     125:	80 00 ff 87 00 ff 8e 00 fe 95 00 fe 9b 00 fd a2     ................
     135:	00 fc a8 00 fa ae 00 f8 b4 00 f6 ba 00 f4 c0 00     ................
     145:	f1 c5 00 ef ca 00 ec cf 00 e8 d4 00 e5 d9 00 e1     ................
     155:	dd 00 dd e1 00 d9 e5 00 d4 e8 00 cf ec 00 ca ef     ................
     165:	00 c5 f1 00 c0 f4 00 ba f6 00 b4 f8 00 ae fa 00     ................
     175:	a8 fc 00 a2 fd 00 9b fe 00 95 fe 00 8e ff 00 87     ................
     185:	ff 00 7f ff 00 78 fe 00 71 fe 00 69 fd 00 62 fc     .....x..q..i..b.
     195:	00 5a fa 00 52 f8 00 4a f6 00 42 f4 00 3a f1 00     .Z..R..J..B..:..
     1a5:	32 ef 00 2a ec 00 21 e8 00 19 e5 00 11 e1 00 08     2..*..!.........
     1b5:	dd 00 00 e1 08 00 e5 11 00 e8 19 00 ec 21 00 ef     .............!..
     1c5:	2a 00 f1 32 00 f4 3a 00 f6 42 00 f8 4a 00 fa 52     *..2..:..B..J..R
     1d5:	00 fc 5a 00 fd 62 00 fe 69 00 fe 71 00 ff 78 00     ..Z..b..i..q..x.
     1e5:	ff 7f 00 ff 87 00 fe 8e 00 fe 95 00 fd 9b 00 fc     ................
     1f5:	a2 00 fa a8 00 f8 ae 00 f6 b4 00 f4 ba 00 f1 c0     ................
     205:	00 ef c5 00 ec ca 00 e8 cf 00 e5 d4 00 e1 d9 00     ................
     215:	dd dd 00 d9 e1 00 d4 e5 00 cf e8 00 ca ec 00 c5     ................
     225:	ef 00 c0 f1 00 ba f4 00 b4 f6 00 ae f8 00 a8 fa     ................
     235:	00 a2 fc 00 9b fd 00 95 fe 00 8e fe 00 87 ff 00     ................
     245:	80 ff 00 78 ff 00 71 fe 00 69 fe 00 62 fd 00 5a     ...x..q..i..b..Z
     255:	fc 00 52 fa 00 4a f8 00 42 f6 00 3a f4 00 32 f1     ..R..J..B..:..2.
     265:	00 2a ef 00 21 ec 00 19 e8 00 11 e5 00 08 e1 00     .*..!...........
     275:	00 dd 00 00 e1 08 00 e5 11 00 e8 19 00 ec 21 00     ..............!.
     285:	ef 2a 00 f1 32 00 f4 3a 00 f6 42 00 f8 4a 00 fa     .*..2..:..B..J..
     295:	52 00 fc 5a 00 fd 62 00 fe 69 00 fe 71 00 ff 78     R..Z..b..i..q..x
     2a5:	00 ff 80 00 ff 87 00 fe 8e 00 fe 95 00 fd 9b 00     ................
     2b5:	fc a2 00 fa a8 00 f8 ae 00 f6 b4 00 f4 ba 00 f1     ................
     2c5:	c0 00 ef c5 00 ec ca 00 e8 cf 00 e5 d4 00 e1 d9     ................
     2d5:	00 dd dd 00 d9 e1 00 d4 e5 00 cf e8 00 ca ec 00     ................
     2e5:	c5 ef 00 c0 f1 00 ba f4 00 b4 f6 00 ae f8 00 a8     ................
     2f5:	fa 00 a2 fc 00 9b fd 00 95 fe 00 8e fe 00 87 ff     ................
     305:	00 80 ff 00 78 ff 00 71 fe 00 69 fe 00 62 fd 00     ....x..q..i..b..
     315:	5a fc 00 52 fa 00 4a f8 00 42 f6 00 3a f4 00 32     Z..R..J..B..:..2
     325:	f1 00 2a ef 00 21 ec 00 19 e8 00 11 e5 00 08 e1     ..*..!..........
	...

00000336 <__ctors_end>:
     336:	11 24       	eor	r1, r1
     338:	1f be       	out	0x3f, r1	; 63
     33a:	cf ef       	ldi	r28, 0xFF	; 255
     33c:	d8 e0       	ldi	r29, 0x08	; 8
     33e:	de bf       	out	0x3e, r29	; 62
     340:	cd bf       	out	0x3d, r28	; 61

00000342 <__do_copy_data>:
     342:	11 e0       	ldi	r17, 0x01	; 1
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b1 e0       	ldi	r27, 0x01	; 1
     348:	e2 e7       	ldi	r30, 0x72	; 114
     34a:	f3 e1       	ldi	r31, 0x13	; 19
     34c:	02 c0       	rjmp	.+4      	; 0x352 <__do_copy_data+0x10>
     34e:	05 90       	lpm	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	a0 32       	cpi	r26, 0x20	; 32
     354:	b1 07       	cpc	r27, r17
     356:	d9 f7       	brne	.-10     	; 0x34e <__do_copy_data+0xc>

00000358 <__do_clear_bss>:
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	a0 e2       	ldi	r26, 0x20	; 32
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	01 c0       	rjmp	.+2      	; 0x362 <.do_clear_bss_start>

00000360 <.do_clear_bss_loop>:
     360:	1d 92       	st	X+, r1

00000362 <.do_clear_bss_start>:
     362:	ab 33       	cpi	r26, 0x3B	; 59
     364:	b2 07       	cpc	r27, r18
     366:	e1 f7       	brne	.-8      	; 0x360 <.do_clear_bss_loop>
     368:	0e 94 63 05 	call	0xac6	; 0xac6 <main>
     36c:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_exit>

00000370 <__bad_interrupt>:
     370:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000374 <PID_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void PID_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, pidData_t *pid)
// Set up PID controller parameters
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	dc 01       	movw	r26, r24
     37a:	fb 01       	movw	r30, r22
     37c:	e9 01       	movw	r28, r18
  // Start values for PID controller
  pid->sumError = 0;
     37e:	1a 82       	std	Y+2, r1	; 0x02
     380:	1b 82       	std	Y+3, r1	; 0x03
     382:	1c 82       	std	Y+4, r1	; 0x04
     384:	1d 82       	std	Y+5, r1	; 0x05
  pid->lastProcessValue = 0;
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	18 82       	st	Y, r1
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
     38a:	9f 83       	std	Y+7, r25	; 0x07
     38c:	8e 83       	std	Y+6, r24	; 0x06
  pid->I_Factor = i_factor;
     38e:	79 87       	std	Y+9, r23	; 0x09
     390:	68 87       	std	Y+8, r22	; 0x08
  pid->D_Factor = d_factor;
     392:	5b 87       	std	Y+11, r21	; 0x0b
     394:	4a 87       	std	Y+10, r20	; 0x0a
  // Limits to avoid overflow
  pid->maxError = MAX_INT / pid->P_Factor;
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	9f e7       	ldi	r25, 0x7F	; 127
     39a:	bd 01       	movw	r22, r26
     39c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     3a0:	7d 87       	std	Y+13, r23	; 0x0d
     3a2:	6c 87       	std	Y+12, r22	; 0x0c
  pid->maxSumError = MAX_I_TERM / pid->I_Factor;
     3a4:	9f 01       	movw	r18, r30
     3a6:	ff 0f       	add	r31, r31
     3a8:	44 0b       	sbc	r20, r20
     3aa:	55 0b       	sbc	r21, r21
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	9f e7       	ldi	r25, 0x7F	; 127
     3b4:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodsi4>
     3b8:	2e 87       	std	Y+14, r18	; 0x0e
     3ba:	3f 87       	std	Y+15, r19	; 0x0f
     3bc:	48 8b       	std	Y+16, r20	; 0x10
     3be:	59 8b       	std	Y+17, r21	; 0x11
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <PID_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t PID_Controller(int16_t setPoint, int16_t processValue, pidData_t *pid_st)
{
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	8b 01       	movw	r16, r22
     3d4:	fa 01       	movw	r30, r20
  int16_t error, p_term, d_term;
  int32_t i_term;
  int32_t ret;
  int32_t temp;

  error = setPoint - processValue;
     3d6:	86 1b       	sub	r24, r22
     3d8:	97 0b       	sbc	r25, r23

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError)
     3da:	24 85       	ldd	r18, Z+12	; 0x0c
     3dc:	35 85       	ldd	r19, Z+13	; 0x0d
     3de:	28 17       	cp	r18, r24
     3e0:	39 07       	cpc	r19, r25
     3e2:	84 f0       	brlt	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
  {
    p_term = MAX_INT;
  }
  else if (error < -pid_st->maxError)
     3e4:	31 95       	neg	r19
     3e6:	21 95       	neg	r18
     3e8:	31 09       	sbc	r19, r1
     3ea:	82 17       	cp	r24, r18
     3ec:	93 07       	cpc	r25, r19
     3ee:	6c f0       	brlt	.+26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
  {
    p_term = -MAX_INT;
  }
  else
  {
    p_term = pid_st->P_Factor * error;
     3f0:	26 81       	ldd	r18, Z+6	; 0x06
     3f2:	37 81       	ldd	r19, Z+7	; 0x07
     3f4:	82 9f       	mul	r24, r18
     3f6:	e0 01       	movw	r28, r0
     3f8:	83 9f       	mul	r24, r19
     3fa:	d0 0d       	add	r29, r0
     3fc:	92 9f       	mul	r25, r18
     3fe:	d0 0d       	add	r29, r0
     400:	11 24       	eor	r1, r1
     402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
  error = setPoint - processValue;

  // Calculate Pterm and limit error overflow
  if (error > pid_st->maxError)
  {
    p_term = MAX_INT;
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	df e7       	ldi	r29, 0x7F	; 127
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
  }
  else if (error < -pid_st->maxError)
  {
    p_term = -MAX_INT;
     40a:	c1 e0       	ldi	r28, 0x01	; 1
     40c:	d0 e8       	ldi	r29, 0x80	; 128
  {
    p_term = pid_st->P_Factor * error;
  }

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
     40e:	09 2e       	mov	r0, r25
     410:	00 0c       	add	r0, r0
     412:	aa 0b       	sbc	r26, r26
     414:	bb 0b       	sbc	r27, r27
     416:	42 81       	ldd	r20, Z+2	; 0x02
     418:	53 81       	ldd	r21, Z+3	; 0x03
     41a:	64 81       	ldd	r22, Z+4	; 0x04
     41c:	75 81       	ldd	r23, Z+5	; 0x05
     41e:	9a 01       	movw	r18, r20
     420:	ab 01       	movw	r20, r22
     422:	28 0f       	add	r18, r24
     424:	39 1f       	adc	r19, r25
     426:	4a 1f       	adc	r20, r26
     428:	5b 1f       	adc	r21, r27
  if(temp > pid_st->maxSumError)
     42a:	86 85       	ldd	r24, Z+14	; 0x0e
     42c:	97 85       	ldd	r25, Z+15	; 0x0f
     42e:	a0 89       	ldd	r26, Z+16	; 0x10
     430:	b1 89       	ldd	r27, Z+17	; 0x11
     432:	82 17       	cp	r24, r18
     434:	93 07       	cpc	r25, r19
     436:	a4 07       	cpc	r26, r20
     438:	b5 07       	cpc	r27, r21
     43a:	4c f4       	brge	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
  {
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
     43c:	82 83       	std	Z+2, r24	; 0x02
     43e:	93 83       	std	Z+3, r25	; 0x03
     440:	a4 83       	std	Z+4, r26	; 0x04
     442:	b5 83       	std	Z+5, r27	; 0x05

  // Calculate Iterm and limit integral runaway
  temp = pid_st->sumError + error;
  if(temp > pid_st->maxSumError)
  {
    i_term = MAX_I_TERM;
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	9f e7       	ldi	r25, 0x7F	; 127
     44c:	1d c0       	rjmp	.+58     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError)
     44e:	b0 95       	com	r27
     450:	a0 95       	com	r26
     452:	90 95       	com	r25
     454:	81 95       	neg	r24
     456:	9f 4f       	sbci	r25, 0xFF	; 255
     458:	af 4f       	sbci	r26, 0xFF	; 255
     45a:	bf 4f       	sbci	r27, 0xFF	; 255
     45c:	28 17       	cp	r18, r24
     45e:	39 07       	cpc	r19, r25
     460:	4a 07       	cpc	r20, r26
     462:	5b 07       	cpc	r21, r27
     464:	4c f4       	brge	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
  {
    i_term = -MAX_I_TERM;
    pid_st->sumError = -pid_st->maxSumError;
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	93 83       	std	Z+3, r25	; 0x03
     46a:	a4 83       	std	Z+4, r26	; 0x04
     46c:	b5 83       	std	Z+5, r27	; 0x05
    i_term = MAX_I_TERM;
    pid_st->sumError = pid_st->maxSumError;
  }
  else if(temp < -pid_st->maxSumError)
  {
    i_term = -MAX_I_TERM;
     46e:	6f ef       	ldi	r22, 0xFF	; 255
     470:	7f ef       	ldi	r23, 0xFF	; 255
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e8       	ldi	r25, 0x80	; 128
     476:	08 c0       	rjmp	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
    pid_st->sumError = -pid_st->maxSumError;
  }
  else
  {
    pid_st->sumError = temp;
     478:	22 83       	std	Z+2, r18	; 0x02
     47a:	33 83       	std	Z+3, r19	; 0x03
     47c:	44 83       	std	Z+4, r20	; 0x04
     47e:	55 83       	std	Z+5, r21	; 0x05
    i_term = pid_st->I_Factor * pid_st->sumError;
     480:	a0 85       	ldd	r26, Z+8	; 0x08
     482:	b1 85       	ldd	r27, Z+9	; 0x09
     484:	0e 94 3e 09 	call	0x127c	; 0x127c <__mulshisi3>
  }

  // Calculate Dterm
  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
     488:	20 81       	ld	r18, Z
     48a:	31 81       	ldd	r19, Z+1	; 0x01
     48c:	20 1b       	sub	r18, r16
     48e:	31 0b       	sbc	r19, r17
     490:	a2 85       	ldd	r26, Z+10	; 0x0a
     492:	b3 85       	ldd	r27, Z+11	; 0x0b
     494:	2a 9f       	mul	r18, r26
     496:	70 01       	movw	r14, r0
     498:	2b 9f       	mul	r18, r27
     49a:	f0 0c       	add	r15, r0
     49c:	3a 9f       	mul	r19, r26
     49e:	f0 0c       	add	r15, r0
     4a0:	11 24       	eor	r1, r1

  pid_st->lastProcessValue = processValue;
     4a2:	11 83       	std	Z+1, r17	; 0x01
     4a4:	00 83       	st	Z, r16

  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
     4a6:	8e 01       	movw	r16, r28
     4a8:	dd 0f       	add	r29, r29
     4aa:	22 0b       	sbc	r18, r18
     4ac:	33 0b       	sbc	r19, r19
     4ae:	ab 01       	movw	r20, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	40 0f       	add	r20, r16
     4b4:	51 1f       	adc	r21, r17
     4b6:	62 1f       	adc	r22, r18
     4b8:	73 1f       	adc	r23, r19
     4ba:	c7 01       	movw	r24, r14
     4bc:	ff 0c       	add	r15, r15
     4be:	aa 0b       	sbc	r26, r26
     4c0:	bb 0b       	sbc	r27, r27
     4c2:	48 0f       	add	r20, r24
     4c4:	59 1f       	adc	r21, r25
     4c6:	6a 1f       	adc	r22, r26
     4c8:	7b 1f       	adc	r23, r27
     4ca:	db 01       	movw	r26, r22
     4cc:	ca 01       	movw	r24, r20
     4ce:	77 23       	and	r23, r23
     4d0:	24 f4       	brge	.+8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	9f 4f       	sbci	r25, 0xFF	; 255
     4d6:	af 4f       	sbci	r26, 0xFF	; 255
     4d8:	bf 4f       	sbci	r27, 0xFF	; 255
     4da:	89 2f       	mov	r24, r25
     4dc:	9a 2f       	mov	r25, r26
     4de:	ab 2f       	mov	r26, r27
     4e0:	bb 27       	eor	r27, r27
     4e2:	a7 fd       	sbrc	r26, 7
     4e4:	ba 95       	dec	r27
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	20 e8       	ldi	r18, 0x80	; 128
     4ea:	92 07       	cpc	r25, r18
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	a2 07       	cpc	r26, r18
     4f0:	b2 07       	cpc	r27, r18
     4f2:	24 f4       	brge	.+8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e8       	ldi	r25, 0x80	; 128
     4f8:	af ef       	ldi	r26, 0xFF	; 255
     4fa:	bf ef       	ldi	r27, 0xFF	; 255
  else if(ret < -MAX_INT)
  {
    ret = -MAX_INT;
  }

  return((int16_t)ret);
     4fc:	81 15       	cp	r24, r1
     4fe:	20 e8       	ldi	r18, 0x80	; 128
     500:	92 07       	cpc	r25, r18
     502:	a1 05       	cpc	r26, r1
     504:	b1 05       	cpc	r27, r1
     506:	24 f0       	brlt	.+8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	9f e7       	ldi	r25, 0x7F	; 127
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	08 95       	ret

0000051e <toggle_e>:

    while ( (c = *s++) ) {
        lcd_putc(c);
    }

}/* lcd_puts */
     51e:	28 9a       	sbi	0x05, 0	; 5
     520:	00 c0       	rjmp	.+0      	; 0x522 <toggle_e+0x4>
     522:	28 98       	cbi	0x05, 0	; 5
     524:	08 95       	ret

00000526 <lcd_write>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	d8 2f       	mov	r29, r24
     52c:	66 23       	and	r22, r22
     52e:	11 f0       	breq	.+4      	; 0x534 <lcd_write+0xe>
     530:	2c 9a       	sbi	0x05, 4	; 5
     532:	01 c0       	rjmp	.+2      	; 0x536 <lcd_write+0x10>
     534:	2c 98       	cbi	0x05, 4	; 5
     536:	2d 98       	cbi	0x05, 5	; 5
     538:	87 b1       	in	r24, 0x07	; 7
     53a:	8f 60       	ori	r24, 0x0F	; 15
     53c:	87 b9       	out	0x07, r24	; 7
     53e:	c8 b1       	in	r28, 0x08	; 8
     540:	c0 7f       	andi	r28, 0xF0	; 240
     542:	8d 2f       	mov	r24, r29
     544:	82 95       	swap	r24
     546:	8f 70       	andi	r24, 0x0F	; 15
     548:	8c 2b       	or	r24, r28
     54a:	88 b9       	out	0x08, r24	; 8
     54c:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
     550:	df 70       	andi	r29, 0x0F	; 15
     552:	dc 2b       	or	r29, r28
     554:	d8 b9       	out	0x08, r29	; 8
     556:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
     55a:	cf 60       	ori	r28, 0x0F	; 15
     55c:	c8 b9       	out	0x08, r28	; 8
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <lcd_read>:
     564:	88 23       	and	r24, r24
     566:	11 f0       	breq	.+4      	; 0x56c <lcd_read+0x8>
     568:	2c 9a       	sbi	0x05, 4	; 5
     56a:	01 c0       	rjmp	.+2      	; 0x56e <lcd_read+0xa>
     56c:	2c 98       	cbi	0x05, 4	; 5
     56e:	2d 9a       	sbi	0x05, 5	; 5
     570:	87 b1       	in	r24, 0x07	; 7
     572:	80 7f       	andi	r24, 0xF0	; 240
     574:	87 b9       	out	0x07, r24	; 7
     576:	28 9a       	sbi	0x05, 0	; 5
     578:	00 c0       	rjmp	.+0      	; 0x57a <lcd_read+0x16>
     57a:	96 b1       	in	r25, 0x06	; 6
     57c:	28 98       	cbi	0x05, 0	; 5
     57e:	00 c0       	rjmp	.+0      	; 0x580 <lcd_read+0x1c>
     580:	28 9a       	sbi	0x05, 0	; 5
     582:	00 c0       	rjmp	.+0      	; 0x584 <lcd_read+0x20>
     584:	26 b1       	in	r18, 0x06	; 6
     586:	2f 70       	andi	r18, 0x0F	; 15
     588:	89 2f       	mov	r24, r25
     58a:	82 95       	swap	r24
     58c:	80 7f       	andi	r24, 0xF0	; 240
     58e:	28 98       	cbi	0x05, 0	; 5
     590:	82 2b       	or	r24, r18
     592:	08 95       	ret

00000594 <lcd_waitbusy>:
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 b2 02 	call	0x564	; 0x564 <lcd_read>
     59a:	88 23       	and	r24, r24
     59c:	dc f3       	brlt	.-10     	; 0x594 <lcd_waitbusy>
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <lcd_waitbusy+0xe>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 b2 02 	call	0x564	; 0x564 <lcd_read>
     5ac:	08 95       	ret

000005ae <lcd_command>:
     5ae:	cf 93       	push	r28
     5b0:	c8 2f       	mov	r28, r24
     5b2:	0e 94 ca 02 	call	0x594	; 0x594 <lcd_waitbusy>
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	8c 2f       	mov	r24, r28
     5ba:	0e 94 93 02 	call	0x526	; 0x526 <lcd_write>
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <lcd_gotoxy>:
     5c2:	61 11       	cpse	r22, r1
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <lcd_gotoxy+0xc>
     5c6:	80 58       	subi	r24, 0x80	; 128
     5c8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
     5cc:	08 95       	ret
     5ce:	80 54       	subi	r24, 0x40	; 64
     5d0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
     5d4:	08 95       	ret

000005d6 <lcd_clrscr>:
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
     5dc:	08 95       	ret

000005de <lcd_home>:
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
     5e4:	08 95       	ret

000005e6 <lcd_putc>:
     5e6:	cf 93       	push	r28
     5e8:	c8 2f       	mov	r28, r24
     5ea:	0e 94 ca 02 	call	0x594	; 0x594 <lcd_waitbusy>
     5ee:	ca 30       	cpi	r28, 0x0A	; 10
     5f0:	49 f4       	brne	.+18     	; 0x604 <lcd_putc+0x1e>
     5f2:	80 34       	cpi	r24, 0x40	; 64
     5f4:	10 f0       	brcs	.+4      	; 0x5fa <lcd_putc+0x14>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <lcd_putc+0x16>
     5fa:	80 e4       	ldi	r24, 0x40	; 64
     5fc:	80 58       	subi	r24, 0x80	; 128
     5fe:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
     602:	04 c0       	rjmp	.+8      	; 0x60c <lcd_putc+0x26>
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	8c 2f       	mov	r24, r28
     608:	0e 94 93 02 	call	0x526	; 0x526 <lcd_write>
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     614:	ec 01       	movw	r28, r24
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	fc 01       	movw	r30, r24
     61a:	84 91       	lpm	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	39 f0       	breq	.+14     	; 0x62e <lcd_puts_p+0x1e>
        lcd_putc(c);
     620:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     624:	fe 01       	movw	r30, r28
     626:	84 91       	lpm	r24, Z
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	81 11       	cpse	r24, r1
     62c:	f9 cf       	rjmp	.-14     	; 0x620 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     63c:	87 b1       	in	r24, 0x07	; 7
     63e:	8f 60       	ori	r24, 0x0F	; 15
     640:	87 b9       	out	0x07, r24	; 7
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     642:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     644:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     646:	20 9a       	sbi	0x04, 0	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	9a ef       	ldi	r25, 0xFA	; 250
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     650:	41 9a       	sbi	0x08, 1	; 8
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     652:	40 9a       	sbi	0x08, 0	; 8
    lcd_e_toggle();
     654:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	9e e4       	ldi	r25, 0x4E	; 78
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     660:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	d1 e0       	ldi	r29, 0x01	; 1
     668:	ce 01       	movw	r24, r28
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     66e:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     672:	ce 01       	movw	r24, r28
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     678:	40 98       	cbi	0x08, 0	; 8
    lcd_e_toggle();
     67a:	0e 94 8f 02 	call	0x51e	; 0x51e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     67e:	21 97       	sbiw	r28, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     682:	88 e2       	ldi	r24, 0x28	; 40
     684:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     68e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     698:	81 2f       	mov	r24, r17
     69a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>

}/* lcd_init */
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <DisablePWMOutputs>:
 *  all PWM pins as inputs, thus overriding the PWM. The PWM configuration
 *  itself is not altered in any way by running this function.
 */
static void DisablePWMOutputs(void)
{
  DDRB &= ~PWM_PATTERN_PORTB;
     6a6:	84 b1       	in	r24, 0x04	; 4
     6a8:	81 7f       	andi	r24, 0xF1	; 241
     6aa:	84 b9       	out	0x04, r24	; 4
  DDRD &= ~PWM_PATTERN_PORTD;
     6ac:	8a b1       	in	r24, 0x0a	; 10
     6ae:	87 79       	andi	r24, 0x97	; 151
     6b0:	8a b9       	out	0x0a, r24	; 10
     6b2:	08 95       	ret

000006b4 <InsertDeadband>:
 * \param compareHighPtr Pointer used to return high side compare value with dead band.
 * \param compareLowPtr  Pointer used to return low side compare value with dead band.
 */
static void InsertDeadband(const uint8_t compareValue, uint8_t * compareHighPtr, uint8_t * compareLowPtr)
{
  if (compareValue <= DEAD_TIME_HALF)
     6b4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     6b8:	98 17       	cp	r25, r24
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <InsertDeadband+0x12>
  {
    *compareHighPtr = 0x00;
     6bc:	fb 01       	movw	r30, r22
     6be:	10 82       	st	Z, r1
    *compareLowPtr = compareValue;
     6c0:	fa 01       	movw	r30, r20
     6c2:	80 83       	st	Z, r24
     6c4:	08 95       	ret
  }
  else if (compareValue >= (0xff - DEAD_TIME_HALF))
     6c6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     6ca:	e8 2f       	mov	r30, r24
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	29 1b       	sub	r18, r25
     6d4:	31 09       	sbc	r19, r1
     6d6:	e2 17       	cp	r30, r18
     6d8:	f3 07       	cpc	r31, r19
     6da:	54 f0       	brlt	.+20     	; 0x6f0 <InsertDeadband+0x3c>
  {
    *compareHighPtr = 0xff - (2 * DEAD_TIME_HALF);
     6dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     6e0:	88 0f       	add	r24, r24
     6e2:	80 95       	com	r24
     6e4:	fb 01       	movw	r30, r22
     6e6:	80 83       	st	Z, r24
    *compareLowPtr = 0xff;
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	fa 01       	movw	r30, r20
     6ec:	80 83       	st	Z, r24
     6ee:	08 95       	ret
  }
  else
  {
    *compareHighPtr = compareValue - DEAD_TIME_HALF;
     6f0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     6f4:	f8 2f       	mov	r31, r24
     6f6:	f9 1b       	sub	r31, r25
     6f8:	9f 2f       	mov	r25, r31
     6fa:	fb 01       	movw	r30, r22
     6fc:	90 83       	st	Z, r25
    *compareLowPtr = compareValue + DEAD_TIME_HALF;
     6fe:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     702:	89 0f       	add	r24, r25
     704:	fa 01       	movw	r30, r20
     706:	80 83       	st	Z, r24
     708:	08 95       	ret

0000070a <printbyte>:
 * but hey, no money back for saved memory
*/
char hextable[18] = "0123456789ABCDEF";
/* very simple output to hex */
static void printbyte(const unsigned char data)
{
     70a:	cf 93       	push	r28
     70c:	c8 2f       	mov	r28, r24
	lcd_putc(hextable[data >> 4]);
     70e:	e8 2f       	mov	r30, r24
     710:	e2 95       	swap	r30
     712:	ef 70       	andi	r30, 0x0F	; 15
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	e4 5f       	subi	r30, 0xF4	; 244
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	80 81       	ld	r24, Z
     71c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
	lcd_putc(hextable[data & 0x0f]);
     720:	cf 70       	andi	r28, 0x0F	; 15
     722:	ec 2f       	mov	r30, r28
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	e4 5f       	subi	r30, 0xF4	; 244
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	80 81       	ld	r24, Z
     72c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
}
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <printword>:
static void printword(const unsigned int data)
{
     734:	cf 93       	push	r28
     736:	c8 2f       	mov	r28, r24
	printbyte(data >> 8);
     738:	89 2f       	mov	r24, r25
     73a:	0e 94 85 03 	call	0x70a	; 0x70a <printbyte>
	printbyte(data);
     73e:	8c 2f       	mov	r24, r28
     740:	0e 94 85 03 	call	0x70a	; 0x70a <printbyte>
}
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <printspc>:
 return i; 
}
// Console//LCD utilities
static void printspc(void)
{
 lcd_putc(' ');
     748:	80 e2       	ldi	r24, 0x20	; 32
     74a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
     74e:	08 95       	ret

00000750 <printdec>:
	printbyte(data);
}
/* output a number in decimal style */
char dectable[12] = "000000000000";
char a;
static void printdec(int16_t number) {
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     75e:	4a e0       	ldi	r20, 0x0A	; 10
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__itoa_ncheck>
uint8_t n,i;
/* yeah, yeah warning "pointer to integer without a cast" 
 * Am i tired of this or what 
 */
	a = itoa(number,dectable,10);
     768:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <a>
	i = strlen(dectable);
     76c:	e0 e0       	ldi	r30, 0x00	; 0
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	01 90       	ld	r0, Z+
     772:	00 20       	and	r0, r0
     774:	e9 f7       	brne	.-6      	; 0x770 <printdec+0x20>
     776:	31 97       	sbiw	r30, 0x01	; 1
     778:	e0 50       	subi	r30, 0x00	; 0
     77a:	f1 40       	sbci	r31, 0x01	; 1
     77c:	de 2e       	mov	r13, r30
	for (n=0;n < i;n++) {
     77e:	ee 23       	and	r30, r30
     780:	b9 f0       	breq	.+46     	; 0x7b0 <printdec+0x60>
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	11 e0       	ldi	r17, 0x01	; 1
     786:	c0 e0       	ldi	r28, 0x00	; 0
     788:	d0 e0       	ldi	r29, 0x00	; 0
		if (n == i-1) lcd_putc('.');		
     78a:	ff 27       	eor	r31, r31
     78c:	7f 01       	movw	r14, r30
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	e8 1a       	sub	r14, r24
     792:	f1 08       	sbc	r15, r1
     794:	ce 15       	cp	r28, r14
     796:	df 05       	cpc	r29, r15
     798:	19 f4       	brne	.+6      	; 0x7a0 <printdec+0x50>
     79a:	8e e2       	ldi	r24, 0x2E	; 46
     79c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
		lcd_putc(dectable[n]);
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 91       	ld	r24, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
     7aa:	21 96       	adiw	r28, 0x01	; 1
/* yeah, yeah warning "pointer to integer without a cast" 
 * Am i tired of this or what 
 */
	a = itoa(number,dectable,10);
	i = strlen(dectable);
	for (n=0;n < i;n++) {
     7ac:	cd 15       	cp	r28, r13
     7ae:	90 f3       	brcs	.-28     	; 0x794 <printdec+0x44>
		if (n == i-1) lcd_putc('.');		
		lcd_putc(dectable[n]);
	}
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	df 90       	pop	r13
     7be:	08 95       	ret

000007c0 <keyin>:
 * note that debouncing is not really necessary here as the polling routine 
 * just happens to pass by.
 */
char keyin(void){
uint8_t i = 0;
i = ~BUTTON_PORT;
     7c0:	89 b1       	in	r24, 0x09	; 9
     7c2:	80 95       	com	r24
i &= BUTTON_MASK;
 return i; 
}
     7c4:	87 70       	andi	r24, 0x07	; 7
     7c6:	08 95       	ret

000007c8 <wrEEPROM>:
 * IRQs must be disabled before writing and are re-enabled afterwards
 * therefore disabling the PWM is safest. Reestablishing sine driving is done
 * by resetting the waveform to undefined. The timer IRQ will handle the remains. 
 */
void wrEEPROM(void) {
 	lcd_gotoxy(0,1);
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	lcd_puts_P( "Storing EEPROM  " );
     7d0:	8e ed       	ldi	r24, 0xDE	; 222
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
	cli();
     7d8:	f8 94       	cli
	DisablePWMOutputs();
     7da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DisablePWMOutputs>
// real writing is here
	eeprom_busy_wait();
     7de:	f9 99       	sbic	0x1f, 1	; 31
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <wrEEPROM+0x16>
	eeprom_write_byte(&ee_DEAD_TIME_HALF,DEAD_TIME_HALF);
     7e2:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     7e6:	88 e0       	ldi	r24, 0x08	; 8
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 94 09 	call	0x1328	; 0x1328 <eeprom_write_byte>
	eeprom_busy_wait();
     7ee:	f9 99       	sbic	0x1f, 1	; 31
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <wrEEPROM+0x26>
	eeprom_write_byte(&ee_Inco,Inco);
     7f2:	68 2d       	mov	r22, r8
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 94 09 	call	0x1328	; 0x1328 <eeprom_write_byte>
	eeprom_busy_wait();
     7fc:	f9 99       	sbic	0x1f, 1	; 31
     7fe:	fe cf       	rjmp	.-4      	; 0x7fc <wrEEPROM+0x34>
	eeprom_write_byte(&ee_VperHz,VperHz);
     800:	67 2d       	mov	r22, r7
     802:	86 e0       	ldi	r24, 0x06	; 6
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 94 09 	call	0x1328	; 0x1328 <eeprom_write_byte>
	eeprom_busy_wait();
     80a:	f9 99       	sbic	0x1f, 1	; 31
     80c:	fe cf       	rjmp	.-4      	; 0x80a <wrEEPROM+0x42>
// write PID values
	eeprom_write_word(&ee_pid_P,pidParameters.P_Factor);
     80e:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <pidParameters+0x6>
     812:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <pidParameters+0x7>
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 a2 09 	call	0x1344	; 0x1344 <eeprom_write_word>
	eeprom_busy_wait();
     81e:	f9 99       	sbic	0x1f, 1	; 31
     820:	fe cf       	rjmp	.-4      	; 0x81e <wrEEPROM+0x56>
	eeprom_write_word(&ee_pid_I,pidParameters.I_Factor);
     822:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <pidParameters+0x8>
     826:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <pidParameters+0x9>
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 a2 09 	call	0x1344	; 0x1344 <eeprom_write_word>
	eeprom_busy_wait();
     832:	f9 99       	sbic	0x1f, 1	; 31
     834:	fe cf       	rjmp	.-4      	; 0x832 <wrEEPROM+0x6a>
	eeprom_write_word(&ee_pid_D,pidParameters.D_Factor);
     836:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <pidParameters+0xa>
     83a:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <pidParameters+0xb>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 a2 09 	call	0x1344	; 0x1344 <eeprom_write_word>
	eeprom_busy_wait();
     846:	f9 99       	sbic	0x1f, 1	; 31
     848:	fe cf       	rjmp	.-4      	; 0x846 <wrEEPROM+0x7e>
// tell the interrupt to reestablish Sine Driving
	fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     84a:	29 2d       	mov	r18, r9
     84c:	2c 60       	ori	r18, 0x0C	; 12
     84e:	92 2e       	mov	r9, r18
	sei();
     850:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     852:	8f e9       	ldi	r24, 0x9F	; 159
     854:	96 e8       	ldi	r25, 0x86	; 134
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	20 40       	sbci	r18, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <wrEEPROM+0x90>
     860:	00 c0       	rjmp	.+0      	; 0x862 <wrEEPROM+0x9a>
     862:	00 00       	nop
// tell the user
	_delay_ms(500);
	lcd_gotoxy(0,1);
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	lcd_puts_P( "Stored          " );
     86c:	8d ec       	ldi	r24, 0xCD	; 205
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
     874:	8f e9       	ldi	r24, 0x9F	; 159
     876:	96 e8       	ldi	r25, 0x86	; 134
     878:	21 e0       	ldi	r18, 0x01	; 1
     87a:	81 50       	subi	r24, 0x01	; 1
     87c:	90 40       	sbci	r25, 0x00	; 0
     87e:	20 40       	sbci	r18, 0x00	; 0
     880:	e1 f7       	brne	.-8      	; 0x87a <wrEEPROM+0xb2>
     882:	00 c0       	rjmp	.+0      	; 0x884 <wrEEPROM+0xbc>
     884:	00 00       	nop
	_delay_ms(500);
	// wait for button release
	if (keyin() > 0){};
     886:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     88a:	08 95       	ret

0000088c <execExtendedCommand>:
 * Adjust in a safe environment with current monitoring. 
 * Place on the LCD is limited, thus PID and DT is displayed as Hex.
 * Wrap around on these values should be avoided, thus the range check
*/
static void execExtendedCommand(void)
{
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
char n=0;
uint8_t j=0;

 lcd_home();  
     89c:	0e 94 ef 02 	call	0x5de	; 0x5de <lcd_home>
 // this line is  only written once, actual values are always displayed in line 2
 lcd_puts_P( "P   I   D    DT " );
     8a0:	89 e7       	ldi	r24, 0x79	; 121
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
 parameter = 0;
     8a8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
 // wait for button release
 while (keyin()!=0){};
     8ac:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     8b0:	81 11       	cpse	r24, r1
     8b2:	fc cf       	rjmp	.-8      	; 0x8ac <execExtendedCommand+0x20>
     8b4:	10 e0       	ldi	r17, 0x00	; 0
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     8b6:	c5 e2       	ldi	r28, 0x25	; 37
     8b8:	d1 e0       	ldi	r29, 0x01	; 1
					 break;
				case 2 : if (pidParameters.D_Factor > 65534) pidParameters.D_Factor = 65534; 
 					  pidParameters.D_Factor++;
					  break;
				case 3 : DEAD_TIME_HALF++; 
					if (DEAD_TIME_HALF > 200) DEAD_TIME_HALF = 200;
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f8 ec       	ldi	r31, 0xC8	; 200
     8be:	cf 2e       	mov	r12, r31
     8c0:	f0 2d       	mov	r31, r0
		case 2 : 
			switch (parameter) {
			 	case 0 : if (pidParameters.P_Factor < 1) pidParameters.P_Factor = 1; 
				 	 pidParameters.P_Factor--; 
					 break;
				case 1 : if (pidParameters.I_Factor < 1) pidParameters.I_Factor = 1; 
     8c2:	ee 24       	eor	r14, r14
     8c4:	e3 94       	inc	r14
     8c6:	f1 2c       	mov	r15, r1
					 break;
				case 2 : if (pidParameters.D_Factor < 1) pidParameters.D_Factor = 1;
					 pidParameters.D_Factor--;
					 break;
				case 3 : DEAD_TIME_HALF--; 
					 if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     8c8:	68 94       	set
     8ca:	dd 24       	eor	r13, r13
     8cc:	d3 f8       	bld	r13, 3
 parameter = 0;
 // wait for button release
 while (keyin()!=0){};
// pressing black and green button simultaneously exits this menu
while (n != 5) {
	n = keyin();
     8ce:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     8d2:	08 2f       	mov	r16, r24
	switch (n) 
     8d4:	83 30       	cpi	r24, 0x03	; 3
     8d6:	09 f4       	brne	.+2      	; 0x8da <execExtendedCommand+0x4e>
     8d8:	85 c0       	rjmp	.+266    	; 0x9e4 <__stack+0xe5>
     8da:	28 f4       	brcc	.+10     	; 0x8e6 <execExtendedCommand+0x5a>
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	51 f0       	breq	.+20     	; 0x8f4 <execExtendedCommand+0x68>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__stack+0xf>
     8e4:	d8 c0       	rjmp	.+432    	; 0xa96 <__stack+0x197>
     8e6:	84 30       	cpi	r24, 0x04	; 4
     8e8:	09 f4       	brne	.+2      	; 0x8ec <execExtendedCommand+0x60>
     8ea:	4e c0       	rjmp	.+156    	; 0x988 <__stack+0x89>
     8ec:	85 30       	cpi	r24, 0x05	; 5
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <execExtendedCommand+0x66>
     8f0:	7b c0       	rjmp	.+246    	; 0x9e8 <__stack+0xe9>
     8f2:	d1 c0       	rjmp	.+418    	; 0xa96 <__stack+0x197>
		{
// cycle through parameters
		case 1 : parameter++; if (parameter > EXTNUMPARAMS) parameter = 0;
     8f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <parameter>
     8fe:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     902:	84 30       	cpi	r24, 0x04	; 4
     904:	08 f4       	brcc	.+2      	; 0x908 <__stack+0x9>
     906:	70 c0       	rjmp	.+224    	; 0x9e8 <__stack+0xe9>
     908:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
     90c:	6d c0       	rjmp	.+218    	; 0x9e8 <__stack+0xe9>
			break;
// red button decrements parameter
		case 2 : 
			switch (parameter) {
     90e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	99 f0       	breq	.+38     	; 0x93c <__stack+0x3d>
     916:	28 f0       	brcs	.+10     	; 0x922 <__stack+0x23>
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	e9 f0       	breq	.+58     	; 0x956 <__stack+0x57>
     91c:	83 30       	cpi	r24, 0x03	; 3
     91e:	41 f1       	breq	.+80     	; 0x970 <__stack+0x71>
     920:	63 c0       	rjmp	.+198    	; 0x9e8 <__stack+0xe9>
			 	case 0 : if (pidParameters.P_Factor < 1) pidParameters.P_Factor = 1; 
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	9f 81       	ldd	r25, Y+7	; 0x07
     926:	18 16       	cp	r1, r24
     928:	19 06       	cpc	r1, r25
     92a:	14 f0       	brlt	.+4      	; 0x930 <__stack+0x31>
     92c:	ff 82       	std	Y+7, r15	; 0x07
     92e:	ee 82       	std	Y+6, r14	; 0x06
				 	 pidParameters.P_Factor--; 
     930:	8e 81       	ldd	r24, Y+6	; 0x06
     932:	9f 81       	ldd	r25, Y+7	; 0x07
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	9f 83       	std	Y+7, r25	; 0x07
     938:	8e 83       	std	Y+6, r24	; 0x06
					 break;
     93a:	56 c0       	rjmp	.+172    	; 0x9e8 <__stack+0xe9>
				case 1 : if (pidParameters.I_Factor < 1) pidParameters.I_Factor = 1; 
     93c:	88 85       	ldd	r24, Y+8	; 0x08
     93e:	99 85       	ldd	r25, Y+9	; 0x09
     940:	18 16       	cp	r1, r24
     942:	19 06       	cpc	r1, r25
     944:	14 f0       	brlt	.+4      	; 0x94a <__stack+0x4b>
     946:	f9 86       	std	Y+9, r15	; 0x09
     948:	e8 86       	std	Y+8, r14	; 0x08
					 pidParameters.I_Factor--;
     94a:	88 85       	ldd	r24, Y+8	; 0x08
     94c:	99 85       	ldd	r25, Y+9	; 0x09
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	99 87       	std	Y+9, r25	; 0x09
     952:	88 87       	std	Y+8, r24	; 0x08
					 break;
     954:	49 c0       	rjmp	.+146    	; 0x9e8 <__stack+0xe9>
				case 2 : if (pidParameters.D_Factor < 1) pidParameters.D_Factor = 1;
     956:	8a 85       	ldd	r24, Y+10	; 0x0a
     958:	9b 85       	ldd	r25, Y+11	; 0x0b
     95a:	18 16       	cp	r1, r24
     95c:	19 06       	cpc	r1, r25
     95e:	14 f0       	brlt	.+4      	; 0x964 <__stack+0x65>
     960:	fb 86       	std	Y+11, r15	; 0x0b
     962:	ea 86       	std	Y+10, r14	; 0x0a
					 pidParameters.D_Factor--;
     964:	8a 85       	ldd	r24, Y+10	; 0x0a
     966:	9b 85       	ldd	r25, Y+11	; 0x0b
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	9b 87       	std	Y+11, r25	; 0x0b
     96c:	8a 87       	std	Y+10, r24	; 0x0a
					 break;
     96e:	3c c0       	rjmp	.+120    	; 0x9e8 <__stack+0xe9>
				case 3 : DEAD_TIME_HALF--; 
     970:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     974:	81 50       	subi	r24, 0x01	; 1
     976:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
					 if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     97a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     97e:	88 30       	cpi	r24, 0x08	; 8
     980:	98 f5       	brcc	.+102    	; 0x9e8 <__stack+0xe9>
     982:	d0 92 1e 01 	sts	0x011E, r13	; 0x80011e <DEAD_TIME_HALF>
     986:	30 c0       	rjmp	.+96     	; 0x9e8 <__stack+0xe9>
				default : break;
			}
			break;
// green button increments parameter
		case 4 : 
			switch (parameter) {
     988:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	71 f0       	breq	.+28     	; 0x9ac <__stack+0xad>
     990:	28 f0       	brcs	.+10     	; 0x99c <__stack+0x9d>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	99 f0       	breq	.+38     	; 0x9bc <__stack+0xbd>
     996:	83 30       	cpi	r24, 0x03	; 3
     998:	c9 f0       	breq	.+50     	; 0x9cc <__stack+0xcd>
     99a:	26 c0       	rjmp	.+76     	; 0x9e8 <__stack+0xe9>
			 	case 0 : if (pidParameters.P_Factor > 65534) pidParameters.P_Factor = 65534; 
     99c:	8e 81       	ldd	r24, Y+6	; 0x06
     99e:	9f 81       	ldd	r25, Y+7	; 0x07
 					 pidParameters.P_Factor++;
     9a0:	8e 81       	ldd	r24, Y+6	; 0x06
     9a2:	9f 81       	ldd	r25, Y+7	; 0x07
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	9f 83       	std	Y+7, r25	; 0x07
     9a8:	8e 83       	std	Y+6, r24	; 0x06
					 break;
     9aa:	1e c0       	rjmp	.+60     	; 0x9e8 <__stack+0xe9>
				case 1 : if (pidParameters.I_Factor > 65534) pidParameters.I_Factor = 65534; 
     9ac:	88 85       	ldd	r24, Y+8	; 0x08
     9ae:	99 85       	ldd	r25, Y+9	; 0x09
 					 pidParameters.I_Factor++;
     9b0:	88 85       	ldd	r24, Y+8	; 0x08
     9b2:	99 85       	ldd	r25, Y+9	; 0x09
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	99 87       	std	Y+9, r25	; 0x09
     9b8:	88 87       	std	Y+8, r24	; 0x08
					 break;
     9ba:	16 c0       	rjmp	.+44     	; 0x9e8 <__stack+0xe9>
				case 2 : if (pidParameters.D_Factor > 65534) pidParameters.D_Factor = 65534; 
     9bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     9be:	9b 85       	ldd	r25, Y+11	; 0x0b
 					  pidParameters.D_Factor++;
     9c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     9c2:	9b 85       	ldd	r25, Y+11	; 0x0b
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	9b 87       	std	Y+11, r25	; 0x0b
     9c8:	8a 87       	std	Y+10, r24	; 0x0a
					  break;
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <__stack+0xe9>
				case 3 : DEAD_TIME_HALF++; 
     9cc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
					if (DEAD_TIME_HALF > 200) DEAD_TIME_HALF = 200;
     9d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     9da:	89 3c       	cpi	r24, 0xC9	; 201
     9dc:	28 f0       	brcs	.+10     	; 0x9e8 <__stack+0xe9>
     9de:	c0 92 1e 01 	sts	0x011E, r12	; 0x80011e <DEAD_TIME_HALF>
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
					 break;
				default : break;
				}
			break;
// pressing black (1) and red (2) button simultaneously writes EEPROM
		case 3 : wrEEPROM(); break;
     9e4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <wrEEPROM>
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     9e8:	4a 85       	ldd	r20, Y+10	; 0x0a
     9ea:	5b 85       	ldd	r21, Y+11	; 0x0b
     9ec:	68 85       	ldd	r22, Y+8	; 0x08
     9ee:	79 85       	ldd	r23, Y+9	; 0x09
     9f0:	8e 81       	ldd	r24, Y+6	; 0x06
     9f2:	9f 81       	ldd	r25, Y+7	; 0x07
     9f4:	9e 01       	movw	r18, r28
     9f6:	0e 94 ba 01 	call	0x374	; 0x374 <PID_Init>
// includes a little autorepeat accelerator
	if (keyin() > 0) {
     9fa:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     9fe:	88 23       	and	r24, r24
     a00:	99 f0       	breq	.+38     	; 0xa28 <__stack+0x129>
		j++;
     a02:	1f 5f       	subi	r17, 0xFF	; 255
		if (j<10) _delay_ms(60);
     a04:	1a 30       	cpi	r17, 0x0A	; 10
     a06:	48 f4       	brcc	.+18     	; 0xa1a <__stack+0x11b>
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <__stack+0x10d>
		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
// includes a little autorepeat accelerator
	if (keyin() > 0) {
		j++;
     a0a:	11 e0       	ldi	r17, 0x01	; 1
     a0c:	87 e9       	ldi	r24, 0x97	; 151
     a0e:	9a e3       	ldi	r25, 0x3A	; 58
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <__stack+0x111>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <__stack+0x117>
     a16:	00 00       	nop
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <__stack+0x129>
     a1a:	83 ec       	ldi	r24, 0xC3	; 195
     a1c:	99 e0       	ldi	r25, 0x09	; 9
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <__stack+0x11f>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <__stack+0x125>
     a24:	00 00       	nop
		if (j<10) _delay_ms(60);
		else {
			_delay_ms(10);
			j = 11;
     a26:	1b e0       	ldi	r17, 0x0B	; 11

static void showExtendedPars(void)
{
const uint8_t *p = cursorextpos;

	lcd_gotoxy(0,1);  	
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	printword(pidParameters.P_Factor);
     a30:	8e 81       	ldd	r24, Y+6	; 0x06
     a32:	9f 81       	ldd	r25, Y+7	; 0x07
     a34:	0e 94 9a 03 	call	0x734	; 0x734 <printword>
	printword(pidParameters.I_Factor);
     a38:	88 85       	ldd	r24, Y+8	; 0x08
     a3a:	99 85       	ldd	r25, Y+9	; 0x09
     a3c:	0e 94 9a 03 	call	0x734	; 0x734 <printword>
	printword(pidParameters.D_Factor);printspc();
     a40:	8a 85       	ldd	r24, Y+10	; 0x0a
     a42:	9b 85       	ldd	r25, Y+11	; 0x0b
     a44:	0e 94 9a 03 	call	0x734	; 0x734 <printword>
     a48:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
	printbyte(DEAD_TIME_HALF);printspc();
     a4c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     a50:	0e 94 85 03 	call	0x70a	; 0x70a <printbyte>
     a54:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
	lcd_gotoxy(pgm_read_byte(p+parameter),1); // set cursor below active parameter
     a58:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <parameter>
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ef 50       	subi	r30, 0x0F	; 15
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	84 91       	lpm	r24, Z
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
     a6a:	81 ee       	ldi	r24, 0xE1	; 225
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <__stack+0x16f>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <__stack+0x175>
     a74:	00 00       	nop
 lcd_puts_P( "P   I   D    DT " );
 parameter = 0;
 // wait for button release
 while (keyin()!=0){};
// pressing black and green button simultaneously exits this menu
while (n != 5) {
     a76:	05 30       	cpi	r16, 0x05	; 5
     a78:	09 f0       	breq	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	29 cf       	rjmp	.-430    	; 0x8ce <execExtendedCommand+0x42>
			j = 11;
			}
	}
	showExtendedPars();
	} // while
  parameter = 0;
     a7c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
  lcd_clrscr();
     a80:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <lcd_clrscr>
 // restore original diplay
  lcd_puts_P( "Freq  V/Hz  Amp " );
     a84:	88 e6       	ldi	r24, 0x68	; 104
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
 // wait for button release
 while (keyin()!=0){};
     a8c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     a90:	81 11       	cpse	r24, r1
     a92:	fc cf       	rjmp	.-8      	; 0xa8c <__stack+0x18d>
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <__stack+0x1b5>
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
		} // switch
	PID_Init(pidParameters.P_Factor, pidParameters.I_Factor, pidParameters.D_Factor,(pidData_t *) &pidParameters);
     a96:	4a 85       	ldd	r20, Y+10	; 0x0a
     a98:	5b 85       	ldd	r21, Y+11	; 0x0b
     a9a:	68 85       	ldd	r22, Y+8	; 0x08
     a9c:	79 85       	ldd	r23, Y+9	; 0x09
     a9e:	8e 81       	ldd	r24, Y+6	; 0x06
     aa0:	9f 81       	ldd	r25, Y+7	; 0x07
     aa2:	9e 01       	movw	r18, r28
     aa4:	0e 94 ba 01 	call	0x374	; 0x374 <PID_Init>
// includes a little autorepeat accelerator
	if (keyin() > 0) {
     aa8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     aac:	81 11       	cpse	r24, r1
     aae:	ad cf       	rjmp	.-166    	; 0xa0a <__stack+0x10b>
// pressing black (1) and red (2) button simultaneously writes EEPROM
		case 3 : wrEEPROM(); break;
// pressing black and green(4) button simultaneously exits this menu
		case 5 : break;

		default: j = 0; break;
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	ba cf       	rjmp	.-140    	; 0xa28 <__stack+0x129>
  lcd_clrscr();
 // restore original diplay
  lcd_puts_P( "Freq  V/Hz  Amp " );
 // wait for button release
 while (keyin()!=0){};
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	08 95       	ret

00000ac6 <main>:
 *  Lets initialize all variables here - even if its only for completeness
 *******************************************************************************************+
 */
int main(void)
{
  cli();
     ac6:	f8 94       	cli
//  variables
  amplitude = 0 ;
     ac8:	61 2c       	mov	r6, r1
  speedInput = 0 ;
     aca:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <speedInput>
  Inco = 1;
     ace:	88 24       	eor	r8, r8
     ad0:	83 94       	inc	r8
  parameter = 0;
     ad2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
 */
static void PortsInit(void)
{
// Port C is LCD Data Output and ADC Input
// the LCD lib does this on its own, but here for completeness
  DDRC = 0b00001111;
     ad6:	8f e0       	ldi	r24, 0x0F	; 15
     ad8:	87 b9       	out	0x07, r24	; 7
// PORTB, PORTD outputs
// clr pullups but do nothing else here. The sine driver will take care of the output states
  PORTB &= ~(PWM_PATTERN_PORTB);
     ada:	85 b1       	in	r24, 0x05	; 5
     adc:	81 7f       	andi	r24, 0xF1	; 241
     ade:	85 b9       	out	0x05, r24	; 5
  PORTD &= ~(PWM_PATTERN_PORTD);
     ae0:	8b b1       	in	r24, 0x0b	; 11
     ae2:	87 79       	andi	r24, 0x97	; 151
     ae4:	8b b9       	out	0x0b, r24	; 11
// Set the inputs on Port D for the three buttons
  DDRD &= ~BUTTON_MASK;
     ae6:	8a b1       	in	r24, 0x0a	; 10
     ae8:	88 7f       	andi	r24, 0xF8	; 248
     aea:	8a b9       	out	0x0a, r24	; 10
// Enable pull-up on input signals.
  PORTD |= _BV(DIRECTION_COMMAND_PIN) | _BV(EXTERNAL_CONTROL_PIN) | BUTTON_MASK ;
     aec:	8b b1       	in	r24, 0x0b	; 11
     aee:	87 69       	ori	r24, 0x97	; 151
     af0:	8b b9       	out	0x0b, r24	; 11
  Inco = 1;
  parameter = 0;
 //Initialize peripherals.
  PortsInit();
 /* initialize display, cursor off */
  lcd_init(LCD_DISP_ON);
     af2:	8c e0       	ldi	r24, 0x0C	; 12
     af4:	0e 94 1a 03 	call	0x634	; 0x634 <lcd_init>
  lcd_home();
     af8:	0e 94 ef 02 	call	0x5de	; 0x5de <lcd_home>
#ifdef PURE_SINE_DRIVE
  lcd_puts_P( "VF Sinus Drive\n" );
#else
  lcd_puts_P( "VF Motor Drive\n" );
     afc:	8d eb       	ldi	r24, 0xBD	; 189
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
#endif
 lcd_putc('0');  // diagnostic outputs
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
 *  all PWM signals are aligned.
 */
static void TimersInit(void)
{
  //Set all timers in "Phase correct mode". Do not enable outputs yet.
  TCCR0A = (1 << WGM00);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	84 bd       	out	0x24, r24	; 36
  TCCR1A = (1 << WGM11);	
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR2A = (1 << WGM20);
     b14:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
//Set top value of Timer/counter1.
  ICR1 = 0xff;
     b18:	2f ef       	ldi	r18, 0xFF	; 255
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b20:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
//Synchronize timers. These values were determined by running the simulator
  TCNT0 = 0;
     b24:	16 bc       	out	0x26, r1	; 38
  TCNT1 = 3;
     b26:	23 e0       	ldi	r18, 0x03	; 3
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b2e:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TCNT2 = 5;
     b32:	95 e0       	ldi	r25, 0x05	; 5
     b34:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  // Start all 3 timers.
  TCCR0B = (0 << CS01) | (1 << CS00);
     b38:	85 bd       	out	0x25, r24	; 37
  TCCR1B = (1 << WGM13) | (0 << CS11) | (1 << CS10);
     b3a:	91 e1       	ldi	r25, 0x11	; 17
     b3c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR2B = (0 << CS21) | (1 << CS20);
     b40:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  lcd_puts_P( "VF Motor Drive\n" );
#endif
 lcd_putc('0');  // diagnostic outputs
// timers
  TimersInit();
  lcd_putc('1');
     b44:	81 e3       	ldi	r24, 0x31	; 49
     b46:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
 */
static void PinChangeIntInit(void)
{
  // Initialize pin change interrupt on direction command pin
  // PD7 is PCINT23
  PCMSK2 = _BV(PCINT23);
     b4a:	80 e8       	ldi	r24, 0x80	; 128
     b4c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
  // Enable pin change interrupt on ports with pin change signals
  PCICR = (1 << PCIE2);
     b50:	84 e0       	ldi	r24, 0x04	; 4
     b52:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
// timers
  TimersInit();
  lcd_putc('1');
// jumpers 
  PinChangeIntInit();
  lcd_putc('2');
     b56:	82 e3       	ldi	r24, 0x32	; 50
     b58:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
 * remember this is init only and will only be run ONCE... 
*/

static void ADCInit(void)
{
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (1 << ADIF) | (0 << ADIE) | (ADC_PRESCALER);
     b5c:	ca e7       	ldi	r28, 0x7A	; 122
     b5e:	d0 e0       	ldi	r29, 0x00	; 0
     b60:	86 e9       	ldi	r24, 0x96	; 150
     b62:	88 83       	st	Y, r24
  // disable digital inputs on analog channels
  DIDR0 = ( 1 << ADC_CHANNEL_FREQUENCY) | (1 << ADC_CHANNEL_AMPLITUDE ); 
     b64:	80 e3       	ldi	r24, 0x30	; 48
     b66:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 //Select initial AD conversion channel.
  ADMUX = ADMUX_FREQUENCY;
     b6a:	84 e6       	ldi	r24, 0x64	; 100
     b6c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  //Set trigger source to free run
  ADCSRB = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
     b70:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  //Initialize ADC and start once, no IRQ 
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (ADC_PRESCALER);
     b74:	86 ec       	ldi	r24, 0xC6	; 198
     b76:	88 83       	st	Y, r24
/* This really does nothing except restarting the ADC with IRQ enabled
 * If you want to calibrate, do it here.
 */
static void CalibADC(void)
{
 DisablePWMOutputs();
     b78:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DisablePWMOutputs>
     b7c:	8f e4       	ldi	r24, 0x4F	; 79
     b7e:	93 ec       	ldi	r25, 0xC3	; 195
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	f1 f7       	brne	.-4      	; 0xb80 <main+0xba>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <main+0xc0>
     b86:	00 00       	nop
 _delay_ms(200);
//Initialize ADC and restart, now with IRQ 
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (1 << ADIF) | (1 << ADIE) | (ADC_PRESCALER); 
     b88:	8e ed       	ldi	r24, 0xDE	; 222
     b8a:	88 83       	st	Y, r24
// jumpers 
  PinChangeIntInit();
  lcd_putc('2');
// analog 
  ADCInit();
  lcd_putc('3');
     b8c:	83 e3       	ldi	r24, 0x33	; 51
     b8e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
  PID_Init(PID_K_P, PID_K_I, PID_K_D,(pidData_t *) &pidParameters);
     b92:	25 e2       	ldi	r18, 0x25	; 37
     b94:	31 e0       	ldi	r19, 0x01	; 1
     b96:	40 e1       	ldi	r20, 0x10	; 16
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	68 e0       	ldi	r22, 0x08	; 8
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e6       	ldi	r24, 0x60	; 96
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 ba 01 	call	0x374	; 0x374 <PID_Init>
  lcd_putc('4');
     ba6:	84 e3       	ldi	r24, 0x34	; 52
     ba8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
  //Initialize fastflags
  {
    fastFlags.externalControl = FALSE;
     bac:	e8 94       	clt
     bae:	90 f8       	bld	r9, 0
    fastFlags.desiredDirection = DIRECTION_FORWARD;
     bb0:	e8 94       	clt
     bb2:	91 f8       	bld	r9, 1
    fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     bb4:	99 2d       	mov	r25, r9
     bb6:	9c 60       	ori	r25, 0x0C	; 12
     bb8:	99 2e       	mov	r9, r25
  }
  lcd_putc('5');
     bba:	85 e3       	ldi	r24, 0x35	; 53
     bbc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
 *  Running this function triggers a reading of the direction
 *  input pin. The desiredDirection flag is set accordingly.
 */
static void DesiredDirectionUpdate(void)
{
 if ( bit_is_clear(PIND,DIRECTION_COMMAND_PIN) )
     bc0:	89 b1       	in	r24, 0x09	; 9
  {
    fastFlags.desiredDirection = DIRECTION_REVERSE;
     bc2:	80 95       	com	r24
     bc4:	88 1f       	adc	r24, r24
     bc6:	88 27       	eor	r24, r24
     bc8:	88 1f       	adc	r24, r24
     bca:	80 fb       	bst	r24, 0
     bcc:	91 f8       	bld	r9, 1
/* select control method by examining the EXTERNAL_CONTROL_PIN
 * if it is jumpered to ground, we derive V/Hz and Inco from analog signals
 */
static void DesiredControlUpdate(void)
{
 if ( bit_is_clear(PIND,EXTERNAL_CONTROL_PIN) )
     bce:	4c 99       	sbic	0x09, 4	; 9
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <main+0x112>
  {
    fastFlags.externalControl = TRUE;
     bd2:	68 94       	set
     bd4:	90 f8       	bld	r9, 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <main+0x116>
  }
  else
  {
    fastFlags.externalControl = FALSE;
     bd8:	e8 94       	clt
     bda:	90 f8       	bld	r9, 0
  lcd_putc('5');
// read the port pins and set fastFlags accordingly
  DesiredDirectionUpdate();
  DesiredControlUpdate();
// Enable Timer1 capture event interrupt.
  TIFR1 = _BV(ICF1) | _BV(OCF1B) | _BV(OCF1A) | _BV(TOV1) ;
     bdc:	87 e2       	ldi	r24, 0x27	; 39
     bde:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = _BV(ICIE1);
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  lcd_putc('6');
     be6:	86 e3       	ldi	r24, 0x36	; 54
     be8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
     bec:	2f e9       	ldi	r18, 0x9F	; 159
     bee:	86 e8       	ldi	r24, 0x86	; 134
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	90 40       	sbci	r25, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <main+0x12c>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <main+0x136>
     bfc:	00 00       	nop
 * A fail here would be fatal to the PA. So if somehow a wrong value is read
 * we set to MIN_DEAD_TIME to save the life of the PA.
 */
static void EEPROMInit(void)
{
 	lcd_gotoxy(0,1);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	lcd_puts_P( "Reading EEPROM  ");
     c06:	8b e9       	ldi	r24, 0x9B	; 155
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
	DEAD_TIME_HALF = eeprom_read_byte(&ee_DEAD_TIME_HALF);
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 86 09 	call	0x130c	; 0x130c <eeprom_read_byte>
     c16:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>

	if (DEAD_TIME_HALF < MIN_DEAD_TIME) DEAD_TIME_HALF = MIN_DEAD_TIME;
     c1a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DEAD_TIME_HALF>
     c1e:	88 30       	cpi	r24, 0x08	; 8
     c20:	18 f4       	brcc	.+6      	; 0xc28 <main+0x162>
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DEAD_TIME_HALF>
// Working parameters
	Inco = eeprom_read_byte(&ee_Inco);
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 86 09 	call	0x130c	; 0x130c <eeprom_read_byte>
     c30:	88 2e       	mov	r8, r24
	VperHz = eeprom_read_byte(&ee_VperHz);
     c32:	86 e0       	ldi	r24, 0x06	; 6
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 86 09 	call	0x130c	; 0x130c <eeprom_read_byte>
     c3a:	78 2e       	mov	r7, r24
// PID values
	pidParameters.P_Factor = eeprom_read_word(&ee_pid_P);
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 8e 09 	call	0x131c	; 0x131c <eeprom_read_word>
     c44:	c5 e2       	ldi	r28, 0x25	; 37
     c46:	d1 e0       	ldi	r29, 0x01	; 1
     c48:	9f 83       	std	Y+7, r25	; 0x07
     c4a:	8e 83       	std	Y+6, r24	; 0x06
	pidParameters.I_Factor = eeprom_read_word(&ee_pid_I);
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 8e 09 	call	0x131c	; 0x131c <eeprom_read_word>
     c54:	99 87       	std	Y+9, r25	; 0x09
     c56:	88 87       	std	Y+8, r24	; 0x08
	pidParameters.D_Factor = eeprom_read_word(&ee_pid_D);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 8e 09 	call	0x131c	; 0x131c <eeprom_read_word>
     c60:	9b 87       	std	Y+11, r25	; 0x0b
     c62:	8a 87       	std	Y+10, r24	; 0x0a
     c64:	2f e9       	ldi	r18, 0x9F	; 159
     c66:	86 e8       	ldi	r24, 0x86	; 134
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0x1a4>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <main+0x1ae>
     c74:	00 00       	nop
	_delay_ms(500);
	lcd_gotoxy(0,1);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	lcd_puts_P( "Read Done       ");
     c7e:	8a e8       	ldi	r24, 0x8A	; 138
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
     c86:	2f e9       	ldi	r18, 0x9F	; 159
     c88:	86 e8       	ldi	r24, 0x86	; 134
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	90 40       	sbci	r25, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <main+0x1c6>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <main+0x1d0>
     c96:	00 00       	nop
/* wait for button release
 * Don't ask why this is here --- ok, you may ask: Its here if some fool powers
 * up the VFD and keeps the buttons pressed or the buttons somehow are stuck.
 * That would probly lead to undesired operation and so - - - lets wait
 */ 
	if (keyin() > 0){};   
     c98:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
  TIMSK1 = _BV(ICIE1);
  lcd_putc('6');
  _delay_ms(500);
// read in stored values
  EEPROMInit();
  lcd_putc('7');
     c9c:	87 e3       	ldi	r24, 0x37	; 55
     c9e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
  lcd_clrscr();
     ca2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <lcd_clrscr>
  lcd_command(LCD_DISP_ON_CURSOR);
     ca6:	8e e0       	ldi	r24, 0x0E	; 14
     ca8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <lcd_command>
 // this line is  only written once, actual values are always displayed in line 2
  lcd_puts_P( "Freq  V/Hz  Amp " );
     cac:	8c ea       	ldi	r24, 0xAC	; 172
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 08 03 	call	0x610	; 0x610 <lcd_puts_p>
/* activate the engine by  enabling interrupts globally and let sine driver take over. */
  sei();
     cb4:	78 94       	sei
	if (keyin() > 0) {
	i++;
	if (i<10) _delay_ms(60);
	else {
		_delay_ms(10);
		i = 11;
     cb6:	0f 2e       	mov	r0, r31
     cb8:	fb e0       	ldi	r31, 0x0B	; 11
     cba:	ef 2e       	mov	r14, r31
     cbc:	f0 2d       	mov	r31, r0
     cbe:	0f 2e       	mov	r0, r31
     cc0:	f4 e6       	ldi	r31, 0x64	; 100
     cc2:	ff 2e       	mov	r15, r31
     cc4:	f0 2d       	mov	r31, r0
 */
static void execCommand(void)
{
char n;
static uint8_t i;
n = keyin();
     cc6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
// first make sure we get inputs from buttons and not from analog inputs
if (!fastFlags.externalControl){
     cca:	90 fc       	sbrc	r9, 0
     ccc:	49 c0       	rjmp	.+146    	; 0xd60 <main+0x29a>
		switch (n) 
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	a9 f0       	breq	.+42     	; 0xcfc <main+0x236>
     cd2:	18 f4       	brcc	.+6      	; 0xcda <main+0x214>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	31 f0       	breq	.+12     	; 0xce4 <main+0x21e>
     cd8:	40 c0       	rjmp	.+128    	; 0xd5a <main+0x294>
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	d9 f1       	breq	.+118    	; 0xd54 <main+0x28e>
     cde:	84 30       	cpi	r24, 0x04	; 4
     ce0:	01 f1       	breq	.+64     	; 0xd22 <main+0x25c>
     ce2:	3b c0       	rjmp	.+118    	; 0xd5a <main+0x294>
		{
// black button - cycle through parameters
		case 1 : parameter++; if (parameter > NUMPARAMS) parameter = 0;
     ce4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <parameter>
     cee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	e0 f1       	brcs	.+120    	; 0xd6e <main+0x2a8>
     cf6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <parameter>
     cfa:	39 c0       	rjmp	.+114    	; 0xd6e <main+0x2a8>
			break;
// red button  - decrement parameter
		case 2 :
			switch (parameter) {
     cfc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     d00:	88 23       	and	r24, r24
     d02:	19 f0       	breq	.+6      	; 0xd0a <main+0x244>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	39 f0       	breq	.+14     	; 0xd16 <main+0x250>
     d08:	32 c0       	rjmp	.+100    	; 0xd6e <main+0x2a8>
			case 0 : if (Inco < 1) Inco = 1; 
     d0a:	81 10       	cpse	r8, r1
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <main+0x24c>
     d0e:	88 24       	eor	r8, r8
     d10:	83 94       	inc	r8
				Inco--; 
     d12:	8a 94       	dec	r8
     d14:	2c c0       	rjmp	.+88     	; 0xd6e <main+0x2a8>
				break;
			case 1 : if (VperHz < 1) VperHz = 1; 
     d16:	71 10       	cpse	r7, r1
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <main+0x258>
     d1a:	77 24       	eor	r7, r7
     d1c:	73 94       	inc	r7
 				VperHz--; 
     d1e:	7a 94       	dec	r7
     d20:	26 c0       	rjmp	.+76     	; 0xd6e <main+0x2a8>
			default : break;
			}
			break;
// green button - increment parameter
		case 4 : 
			switch (parameter) {
     d22:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <parameter>
     d26:	88 23       	and	r24, r24
     d28:	19 f0       	breq	.+6      	; 0xd30 <main+0x26a>
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	51 f0       	breq	.+20     	; 0xd42 <main+0x27c>
     d2e:	1f c0       	rjmp	.+62     	; 0xd6e <main+0x2a8>
			case 0 :if (Inco > 254) Inco = 254; 
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	82 12       	cpse	r8, r18
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <main+0x278>
     d36:	0f 2e       	mov	r0, r31
     d38:	fe ef       	ldi	r31, 0xFE	; 254
     d3a:	8f 2e       	mov	r8, r31
     d3c:	f0 2d       	mov	r31, r0
 				Inco++;  
     d3e:	83 94       	inc	r8
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <main+0x2a8>
				break;
			case 1 :if (VperHz > 254) VperHz = 254; 
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	78 12       	cpse	r7, r24
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <main+0x28a>
     d48:	0f 2e       	mov	r0, r31
     d4a:	fe ef       	ldi	r31, 0xFE	; 254
     d4c:	7f 2e       	mov	r7, r31
     d4e:	f0 2d       	mov	r31, r0
 				VperHz++; 
     d50:	73 94       	inc	r7
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <main+0x2a8>
				break;
			default : break;
			}
			break;
// pressing first black (1) and then red (2) button simultaneously goes to extended menu
		case 3 : execExtendedCommand();
     d54:	0e 94 46 04 	call	0x88c	; 0x88c <execExtendedCommand>
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <main+0x2a8>
			 break;
		default: i = 0; break;
     d5a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i.2500>
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <main+0x2a8>
		} // switch
    } else { // external control
// with external control we only can go to the extended menu
		switch (n) 
     d60:	83 30       	cpi	r24, 0x03	; 3
     d62:	19 f4       	brne	.+6      	; 0xd6a <main+0x2a4>
		{
// pressing black (1) and red (2) button simultaneously goes to sub menu
		case 3 : execExtendedCommand();
     d64:	0e 94 46 04 	call	0x88c	; 0x88c <execExtendedCommand>
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <main+0x2a8>
			 break;
		default: i = 0; break;
     d6a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i.2500>
		} // switch
   }  // external control
// simple autorepeater
	if (keyin() > 0) {
     d6e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <keyin>
     d72:	88 23       	and	r24, r24
     d74:	b1 f0       	breq	.+44     	; 0xda2 <main+0x2dc>
	i++;
     d76:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <i.2500>
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <i.2500>
	if (i<10) _delay_ms(60);
     d80:	8a 30       	cpi	r24, 0x0A	; 10
     d82:	38 f4       	brcc	.+14     	; 0xd92 <main+0x2cc>
     d84:	87 e9       	ldi	r24, 0x97	; 151
     d86:	9a e3       	ldi	r25, 0x3A	; 58
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <main+0x2c2>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <main+0x2c8>
     d8e:	00 00       	nop
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <main+0x2dc>
     d92:	83 ec       	ldi	r24, 0xC3	; 195
     d94:	99 e0       	ldi	r25, 0x09	; 9
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <main+0x2d0>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <main+0x2d6>
     d9c:	00 00       	nop
	else {
		_delay_ms(10);
		i = 11;
     d9e:	e0 92 21 01 	sts	0x0121, r14	; 0x800121 <i.2500>
 */
static void showPars(void)
{
const uint8_t *p = cursorpos;

	lcd_gotoxy(0,1);  	
     da2:	61 e0       	ldi	r22, 0x01	; 1
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	printdec(freq);printspc();lcd_gotoxy(6,1);
     daa:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <freq>
     dae:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <freq+0x1>
     db2:	0e 94 a8 03 	call	0x750	; 0x750 <printdec>
     db6:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
	printdec(VperHz);printspc();printspc();lcd_gotoxy(12,1);
     dc2:	87 2d       	mov	r24, r7
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 a8 03 	call	0x750	; 0x750 <printdec>
     dca:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
     dce:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
     dda:	f6 9c       	mul	r15, r6
     ddc:	90 01       	movw	r18, r0
     dde:	11 24       	eor	r1, r1
     de0:	a1 e8       	ldi	r26, 0x81	; 129
     de2:	b0 e8       	ldi	r27, 0x80	; 128
     de4:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     de8:	4a e0       	ldi	r20, 0x0A	; 10
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	71 e0       	ldi	r23, 0x01	; 1
     dee:	88 0f       	add	r24, r24
     df0:	89 2f       	mov	r24, r25
     df2:	88 1f       	adc	r24, r24
     df4:	99 0b       	sbc	r25, r25
     df6:	91 95       	neg	r25
     df8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__itoa_ncheck>
		lcd_putc(dectable[n]);
	}
}
static void printnum(int16_t number) {
uint8_t n,i;
	a = itoa(number,dectable,10);
     dfc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <a>
	i = strlen(dectable);
     e00:	e0 e0       	ldi	r30, 0x00	; 0
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	00 20       	and	r0, r0
     e08:	e9 f7       	brne	.-6      	; 0xe04 <main+0x33e>
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	e0 50       	subi	r30, 0x00	; 0
     e0e:	f1 40       	sbci	r31, 0x01	; 1
	for (n=0;n < i;n++) {
     e10:	ee 23       	and	r30, r30
     e12:	69 f0       	breq	.+26     	; 0xe2e <main+0x368>
     e14:	c0 e0       	ldi	r28, 0x00	; 0
     e16:	d1 e0       	ldi	r29, 0x01	; 1
     e18:	e1 50       	subi	r30, 0x01	; 1
     e1a:	0e 2f       	mov	r16, r30
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	0f 5f       	subi	r16, 0xFF	; 255
     e20:	1e 4f       	sbci	r17, 0xFE	; 254
		lcd_putc(dectable[n]);
     e22:	89 91       	ld	r24, Y+
     e24:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
}
static void printnum(int16_t number) {
uint8_t n,i;
	a = itoa(number,dectable,10);
	i = strlen(dectable);
	for (n=0;n < i;n++) {
     e28:	c0 17       	cp	r28, r16
     e2a:	d1 07       	cpc	r29, r17
     e2c:	d1 f7       	brne	.-12     	; 0xe22 <main+0x35c>
const uint8_t *p = cursorpos;

	lcd_gotoxy(0,1);  	
	printdec(freq);printspc();lcd_gotoxy(6,1);
	printdec(VperHz);printspc();printspc();lcd_gotoxy(12,1);
	printnum((uint16_t)(amplitude*100)/255);lcd_putc('%');printspc();
     e2e:	85 e2       	ldi	r24, 0x25	; 37
     e30:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <lcd_putc>
     e34:	0e 94 a4 03 	call	0x748	; 0x748 <printspc>
	lcd_gotoxy(pgm_read_byte(p+parameter),1); // set cursor below active parameter
     e38:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <parameter>
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	e1 51       	subi	r30, 0x11	; 17
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	84 91       	lpm	r24, Z
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lcd_gotoxy>
     e4a:	81 ee       	ldi	r24, 0xE1	; 225
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <main+0x388>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <main+0x38e>
     e54:	00 00       	nop
     e56:	37 cf       	rjmp	.-402    	; 0xcc6 <main+0x200>

00000e58 <__vector_5>:
 *
 *  This ISR is called every time the direction input pin changes
 *  state. The desired direction flag is updated accordingly. 
 */
ISR(PCINT2_vect)
{
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
 *  Running this function triggers a reading of the direction
 *  input pin. The desiredDirection flag is set accordingly.
 */
static void DesiredDirectionUpdate(void)
{
 if ( bit_is_clear(PIND,DIRECTION_COMMAND_PIN) )
     e7a:	89 b1       	in	r24, 0x09	; 9
  {
    fastFlags.desiredDirection = DIRECTION_REVERSE;
     e7c:	80 95       	com	r24
     e7e:	88 1f       	adc	r24, r24
     e80:	88 27       	eor	r24, r24
     e82:	88 1f       	adc	r24, r24
     e84:	80 fb       	bst	r24, 0
     e86:	91 f8       	bld	r9, 1
}
void ChangeDirection(void)
{
  DesiredDirectionUpdate();
  //Disable driver signals
  DisablePWMOutputs();
     e88:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DisablePWMOutputs>
  fastFlags.driveWaveform = WAVEFORM_UNDEFINED;
     e8c:	89 2d       	mov	r24, r9
     e8e:	8c 60       	ori	r24, 0x0C	; 12
     e90:	98 2e       	mov	r9, r24
 */
ISR(PCINT2_vect)
{
  //Call the routine to actually stop the motor and reverse
	ChangeDirection();
}
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	bf 91       	pop	r27
     e98:	af 91       	pop	r26
     e9a:	9f 91       	pop	r25
     e9c:	8f 91       	pop	r24
     e9e:	7f 91       	pop	r23
     ea0:	6f 91       	pop	r22
     ea2:	5f 91       	pop	r21
     ea4:	4f 91       	pop	r20
     ea6:	3f 91       	pop	r19
     ea8:	2f 91       	pop	r18
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_16>:
// 
EMPTY_INTERRUPT(TIMER0_OVF_vect);
     eb4:	18 95       	reti

00000eb6 <__vector_14>:

// ISR stub for  unused irqs. The AVRs sometimes need to fire an interupt and 
// execute it before OC registers are updated
EMPTY_INTERRUPT(TIMER0_COMPB_vect);
     eb6:	18 95       	reti

00000eb8 <__vector_10>:
 * reaches TOP (0xff). New sinusoidal output values are calculated and the
 * timers are updated to reflect the new values.
 * The core routine of the VF Drive
 */
ISR(TIMER1_CAPT_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	00 d0       	rcall	.+0      	; 0xeec <__vector_10+0x34>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
static uint8_t speedRegTicks = 0;
uint8_t tempU, tempV, tempW;
    {
  if (fastFlags.driveWaveform != WAVEFORM_SINUSOIDAL) TimersSetModeSinusoidal();
     ef0:	89 2d       	mov	r24, r9
     ef2:	86 95       	lsr	r24
     ef4:	86 95       	lsr	r24
     ef6:	83 70       	andi	r24, 0x03	; 3
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	11 f1       	breq	.+68     	; 0xf40 <__vector_10+0x88>
 *  through.
 */
static void TimersSetModeSinusoidal(void)
{
  //Set PWM pins to input (Hi-Z) while changing modes.
  DisablePWMOutputs();
     efc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <DisablePWMOutputs>

  //Sets all 3 timers in inverted pair mode.
  TCCR0A = (1 << COM0A1) | (0 << COM0A0) | (1 << COM0B1) | (1 << COM0B0) | (1 << WGM00);
     f00:	81 eb       	ldi	r24, 0xB1	; 177
     f02:	84 bd       	out	0x24, r24	; 36
  TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << WGM11);
     f04:	92 eb       	ldi	r25, 0xB2	; 178
     f06:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR2A = (1 << COM2A1) | (0 << COM2A0) | (1 << COM2B1) | (1 << COM2B0) | (1 << WGM20);
     f0a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

  //Make sure all outputs are turned off before PWM outputs are enabled.
  OCR0A = OCR1AL = OCR2A = 0;
     f0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     f12:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f16:	17 bc       	out	0x27, r1	; 39
  OCR0B = OCR1BL = OCR2B = 0xff;
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     f1e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f22:	88 bd       	out	0x28, r24	; 40
 *  does not occur in the transition between two output waveform generation modes.
 */
static void TimersWaitForNextPWMCycle(void)
{
  //Clear Timer1 Capture event flag.
  TIFR1 = (1 << ICF1);
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	86 bb       	out	0x16, r24	; 22

  //Wait for new Timer1 Capture event flag.
  while ( !(TIFR1 & (1 << ICF1)) )
     f28:	b5 9b       	sbis	0x16, 5	; 22
     f2a:	fe cf       	rjmp	.-4      	; 0xf28 <__vector_10+0x70>
  OCR0B = OCR1BL = OCR2B = 0xff;

  //Wait for next PWM cycle to ensure that all outputs are updated.
  TimersWaitForNextPWMCycle();

  fastFlags.driveWaveform = WAVEFORM_SINUSOIDAL;
     f2c:	89 2d       	mov	r24, r9
     f2e:	83 7f       	andi	r24, 0xF3	; 243
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	98 2e       	mov	r9, r24
 *  all PWM pins as output. The PWM configuration itself is not altered
 *  in any way by running this function.
 */
static void EnablePWMOutputs(void)
{
  DDRB |= PWM_PATTERN_PORTB;
     f34:	84 b1       	in	r24, 0x04	; 4
     f36:	8e 60       	ori	r24, 0x0E	; 14
     f38:	84 b9       	out	0x04, r24	; 4
  DDRD |= PWM_PATTERN_PORTD;
     f3a:	8a b1       	in	r24, 0x0a	; 10
     f3c:	88 66       	ori	r24, 0x68	; 104
     f3e:	8a b9       	out	0x0a, r24	; 10
static uint8_t speedRegTicks = 0;
uint8_t tempU, tempV, tempW;
    {
  if (fastFlags.driveWaveform != WAVEFORM_SINUSOIDAL) TimersSetModeSinusoidal();
      const uint8_t *sineTablePtr = sineTable ;  // set to start of sine table
      sineTableIncrement = Inco;			// stepwidth = frequency selection
     f40:	28 2c       	mov	r2, r8
     f42:	31 2c       	mov	r3, r1
 *
 *  \param increment The increment (in 8.8 format) added to the sine table index.
 */
static void AdjustSineTableIndex(const uint16_t increment)
{
  sineTableIndex += increment ;
     f44:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     f48:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     f4c:	82 0d       	add	r24, r2
     f4e:	93 1d       	adc	r25, r3
     f50:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sineTableIndex+0x1>
     f54:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sineTableIndex>

  // If the table index is out of bounds, wrap the index around the table end
  // to continue from the beginning. Also wrap the next sector start index.
  if ((sineTableIndex >> 8) >= SINE_TABLE_LENGTH)
     f58:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     f5c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     f60:	81 15       	cp	r24, r1
     f62:	90 4c       	sbci	r25, 0xC0	; 192
     f64:	48 f0       	brcs	.+18     	; 0xf78 <__vector_10+0xc0>
  {
    sineTableIndex -= (SINE_TABLE_LENGTH << 8);
     f66:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <sineTableIndex>
     f6a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <sineTableIndex+0x1>
     f6e:	90 5c       	subi	r25, 0xC0	; 192
     f70:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <sineTableIndex+0x1>
     f74:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <sineTableIndex>
      sineTableIncrement = Inco;			// stepwidth = frequency selection
      AdjustSineTableIndex(sineTableIncrement);  // call the routine to update the pointer

      //Add sine table offset to pointer. Must be multiplied by 3, since one
      //value for each phase is stored in the table.
      sineTablePtr += (sineTableIndex >> 8) * 3;
     f78:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <sineTableIndex>
     f7c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <sineTableIndex+0x1>
     f80:	ef 2f       	mov	r30, r31
     f82:	ff 27       	eor	r31, r31
     f84:	cf 01       	movw	r24, r30
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	e8 0f       	add	r30, r24
     f8c:	f9 1f       	adc	r31, r25
     f8e:	9f 01       	movw	r18, r30
     f90:	2b 50       	subi	r18, 0x0B	; 11
     f92:	3f 4f       	sbci	r19, 0xFF	; 255

      tempU = pgm_read_byte(sineTablePtr++);
     f94:	cf 01       	movw	r24, r30
     f96:	8a 50       	subi	r24, 0x0A	; 10
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	f9 01       	movw	r30, r18
     f9c:	44 91       	lpm	r20, Z
      if (fastFlags.desiredDirection == DIRECTION_FORWARD)
     f9e:	91 fc       	sbrc	r9, 1
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <__vector_10+0xf6>
      {
        tempW = pgm_read_byte(sineTablePtr++);
     fa2:	fc 01       	movw	r30, r24
     fa4:	e4 90       	lpm	r14, Z
     fa6:	f9 01       	movw	r30, r18
     fa8:	32 96       	adiw	r30, 0x02	; 2
        tempV = pgm_read_byte(sineTablePtr);
     faa:	04 91       	lpm	r16, Z
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <__vector_10+0x100>
      }
      else
      {
        tempV = pgm_read_byte(sineTablePtr++);
     fae:	fc 01       	movw	r30, r24
     fb0:	04 91       	lpm	r16, Z
     fb2:	f9 01       	movw	r30, r18
     fb4:	32 96       	adiw	r30, 0x02	; 2
        tempW = pgm_read_byte(sineTablePtr);
     fb6:	e4 90       	lpm	r14, Z
#ifdef PURE_SINE_DRIVE
    tempU = 128 - ((uint16_t)(amplitude * tempU) >> 9);
    tempV = 128 - ((uint16_t)(amplitude * tempV) >> 9);
    tempW = 128 - ((uint16_t)(amplitude * tempW) >> 9);
#else
    tempU = ((uint16_t)(amplitude * tempU) >> 8);
     fb8:	64 9e       	mul	r6, r20
     fba:	f0 01       	movw	r30, r0
     fbc:	11 24       	eor	r1, r1
    tempV = ((uint16_t)(amplitude * tempV) >> 8);
     fbe:	60 9e       	mul	r6, r16
     fc0:	80 01       	movw	r16, r0
     fc2:	11 24       	eor	r1, r1
    tempW = ((uint16_t)(amplitude * tempW) >> 8);
     fc4:	6e 9c       	mul	r6, r14
     fc6:	70 01       	movw	r14, r0
     fc8:	11 24       	eor	r1, r1
#endif
    {
    	uint8_t compareHigh, compareLow;
    	InsertDeadband(tempU, &compareHigh, &compareLow);
     fca:	ae 01       	movw	r20, r28
     fcc:	4f 5f       	subi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	be 01       	movw	r22, r28
     fd2:	6e 5f       	subi	r22, 0xFE	; 254
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 2f       	mov	r24, r31
     fd8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <InsertDeadband>
		OCR0A = compareHigh;
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	87 bd       	out	0x27, r24	; 39
		OCR0B = compareLow;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 bd       	out	0x28, r24	; 40

    	InsertDeadband(tempV, &compareHigh, &compareLow);
     fe4:	ae 01       	movw	r20, r28
     fe6:	4f 5f       	subi	r20, 0xFF	; 255
     fe8:	5f 4f       	sbci	r21, 0xFF	; 255
     fea:	be 01       	movw	r22, r28
     fec:	6e 5f       	subi	r22, 0xFE	; 254
     fee:	7f 4f       	sbci	r23, 0xFF	; 255
     ff0:	81 2f       	mov	r24, r17
     ff2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <InsertDeadband>
		OCR1AL = compareHigh;
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1BL = compareLow;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

    	InsertDeadband(tempW, &compareHigh, &compareLow);
    1002:	ae 01       	movw	r20, r28
    1004:	4f 5f       	subi	r20, 0xFF	; 255
    1006:	5f 4f       	sbci	r21, 0xFF	; 255
    1008:	be 01       	movw	r22, r28
    100a:	6e 5f       	subi	r22, 0xFE	; 254
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 2d       	mov	r24, r15
    1010:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <InsertDeadband>
		OCR2A = compareHigh;
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		OCR2B = compareLow;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    }
// regular task calls the SpeedController 
  	speedRegTicks++;
    1020:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
    if (speedRegTicks >= SPEED_CONTROLLER_TIME_BASE)
    102a:	88 3c       	cpi	r24, 0xC8	; 200
    102c:	08 f4       	brcc	.+2      	; 0x1030 <__vector_10+0x178>
    102e:	58 c0       	rjmp	.+176    	; 0x10e0 <__vector_10+0x228>
 */
static void SpeedController(void)
{
int32_t outputValue, amplitudeValue;
 // calculate the frequency
if (fastFlags.externalControl) {
    1030:	90 fe       	sbrs	r9, 0
    1032:	16 c0       	rjmp	.+44     	; 0x1060 <__vector_10+0x1a8>
//Calculate an increment setpoint from the analog speed input.
	  int16_t incrementSetpoint = ((uint32_t)speedInput * SPEED_CONTROLLER_MAX_INCREMENT) / SPEED_CONTROLLER_MAX_INPUT;
    1034:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <speedInput>
//PID regulator with feed forward from speed input.
	  outputValue = (uint32_t)speedInput;
    1038:	c0 90 39 01 	lds	r12, 0x0139	; 0x800139 <speedInput>
	  outputValue += PID_Controller(incrementSetpoint, ((uint16_t)Inco),(pidData_t *) &pidParameters);
    103c:	e8 2d       	mov	r30, r8
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	af ef       	ldi	r26, 0xFF	; 255
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
    104a:	bb 27       	eor	r27, r27
    104c:	a9 2f       	mov	r26, r25
    104e:	98 2f       	mov	r25, r24
    1050:	87 2f       	mov	r24, r23
    1052:	45 e2       	ldi	r20, 0x25	; 37
    1054:	51 e0       	ldi	r21, 0x01	; 1
    1056:	bf 01       	movw	r22, r30
    1058:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <PID_Controller>
	  Inco = (uint16_t)outputValue;
    105c:	8c 0d       	add	r24, r12
    105e:	88 2e       	mov	r8, r24
 }
// clamp
 freq = DIVISIONEER/(SINE_TABLE_DISP/Inco);
    1060:	68 2d       	mov	r22, r8
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	9b e4       	ldi	r25, 0x4B	; 75
    1068:	0e 94 c6 08 	call	0x118c	; 0x118c <__udivmodhi4>
    106c:	9b 01       	movw	r18, r22
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	66 ed       	ldi	r22, 0xD6	; 214
    1074:	7c ed       	ldi	r23, 0xDC	; 220
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodsi4>
    107e:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <freq+0x1>
    1082:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <freq>
 amplitudeValue = (freq/10)*VperHz;
    1086:	ad ec       	ldi	r26, 0xCD	; 205
    1088:	bc ec       	ldi	r27, 0xCC	; 204
    108a:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	78 9e       	mul	r7, r24
    109c:	b0 01       	movw	r22, r0
    109e:	79 9e       	mul	r7, r25
    10a0:	70 0d       	add	r23, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
 if (amplitudeValue < 1)
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	19 06       	cpc	r1, r25
    10b0:	5c f4       	brge	.+22     	; 0x10c8 <__vector_10+0x210>
  	{
    		amplitudeValue = 0;
  	}
 else if (amplitudeValue > 2549)
    10b2:	66 3f       	cpi	r22, 0xF6	; 246
    10b4:	f9 e0       	ldi	r31, 0x09	; 9
    10b6:	7f 07       	cpc	r23, r31
    10b8:	81 05       	cpc	r24, r1
    10ba:	91 05       	cpc	r25, r1
    10bc:	44 f0       	brlt	.+16     	; 0x10ce <__vector_10+0x216>
  	{
    		amplitudeValue = 2550;
    10be:	66 ef       	ldi	r22, 0xF6	; 246
    10c0:	79 e0       	ldi	r23, 0x09	; 9
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <__vector_10+0x216>
// clamp
 freq = DIVISIONEER/(SINE_TABLE_DISP/Inco);
 amplitudeValue = (freq/10)*VperHz;
 if (amplitudeValue < 1)
  	{
    		amplitudeValue = 0;
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	cb 01       	movw	r24, r22
  	}
 else if (amplitudeValue > 2549)
  	{
    		amplitudeValue = 2550;
  	}
 amplitude = amplitudeValue / 10;
    10ce:	2a e0       	ldi	r18, 0x0A	; 10
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodsi4>
    10da:	62 2e       	mov	r6, r18
// regular task calls the SpeedController 
  	speedRegTicks++;
    if (speedRegTicks >= SPEED_CONTROLLER_TIME_BASE)
    {
		SpeedController();
     	speedRegTicks = 0; 
    10dc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	}
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_21>:
 *  this is declared as non-blocking
 *
 *  Only the 8 most significant bits of the ADC result are used.
 */
ISR(ADC_vect, ISR_NOBLOCK)
{
    1116:	78 94       	sei
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	2f 93       	push	r18
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
  if (fastFlags.externalControl) {
    1128:	90 fe       	sbrs	r9, 0
    112a:	28 c0       	rjmp	.+80     	; 0x117c <__vector_21+0x66>
  switch (ADMUX)
    112c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1130:	84 36       	cpi	r24, 0x64	; 100
    1132:	19 f0       	breq	.+6      	; 0x113a <__vector_21+0x24>
    1134:	85 36       	cpi	r24, 0x65	; 101
    1136:	81 f0       	breq	.+32     	; 0x1158 <__vector_21+0x42>
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <__vector_21+0x5a>
  {
  case ADMUX_FREQUENCY:
    	speedInput = (speedInput + ADCH) >> 1; // do some averaging
    113a:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <speedInput>
    113e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	82 0f       	add	r24, r18
    1146:	91 1d       	adc	r25, r1
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <speedInput>
    	ADMUX = ADMUX_AMPLITUDE;
    1150:	85 e6       	ldi	r24, 0x65	; 101
    1152:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    	break;
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <__vector_21+0x60>
  case ADMUX_AMPLITUDE:
    	VperHz = (VperHz + ADCH) >> 1;
    1158:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	87 0d       	add	r24, r7
    1160:	91 1d       	adc	r25, r1
    1162:	95 95       	asr	r25
    1164:	87 95       	ror	r24
    1166:	78 2e       	mov	r7, r24
    	ADMUX = ADMUX_FREQUENCY; 
    1168:	84 e6       	ldi	r24, 0x64	; 100
    116a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    	break;
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <__vector_21+0x60>
  default:
    //This is probably an error and should be handled. Instead we set the multiplexer and just run away
    	ADMUX = ADMUX_FREQUENCY; 
    1170:	84 e6       	ldi	r24, 0x64	; 100
    1172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    break;
  } 
// restart the ADC
  ADCSRA = (1 << ADEN) | (1 << ADSC) | (0 << ADATE) | (1 << ADIF) | (1 << ADIE) | ADC_PRESCALER;
    1176:	8e ed       	ldi	r24, 0xDE	; 222
    1178:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 }
}
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	0f 90       	pop	r0
    1188:	1f 90       	pop	r1
    118a:	18 95       	reti

0000118c <__udivmodhi4>:
    118c:	aa 1b       	sub	r26, r26
    118e:	bb 1b       	sub	r27, r27
    1190:	51 e1       	ldi	r21, 0x11	; 17
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__udivmodhi4_ep>

00001194 <__udivmodhi4_loop>:
    1194:	aa 1f       	adc	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	a6 17       	cp	r26, r22
    119a:	b7 07       	cpc	r27, r23
    119c:	10 f0       	brcs	.+4      	; 0x11a2 <__udivmodhi4_ep>
    119e:	a6 1b       	sub	r26, r22
    11a0:	b7 0b       	sbc	r27, r23

000011a2 <__udivmodhi4_ep>:
    11a2:	88 1f       	adc	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	5a 95       	dec	r21
    11a8:	a9 f7       	brne	.-22     	; 0x1194 <__udivmodhi4_loop>
    11aa:	80 95       	com	r24
    11ac:	90 95       	com	r25
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	08 95       	ret

000011b4 <__divmodhi4>:
    11b4:	97 fb       	bst	r25, 7
    11b6:	07 2e       	mov	r0, r23
    11b8:	16 f4       	brtc	.+4      	; 0x11be <__divmodhi4+0xa>
    11ba:	00 94       	com	r0
    11bc:	07 d0       	rcall	.+14     	; 0x11cc <__divmodhi4_neg1>
    11be:	77 fd       	sbrc	r23, 7
    11c0:	09 d0       	rcall	.+18     	; 0x11d4 <__divmodhi4_neg2>
    11c2:	0e 94 c6 08 	call	0x118c	; 0x118c <__udivmodhi4>
    11c6:	07 fc       	sbrc	r0, 7
    11c8:	05 d0       	rcall	.+10     	; 0x11d4 <__divmodhi4_neg2>
    11ca:	3e f4       	brtc	.+14     	; 0x11da <__divmodhi4_exit>

000011cc <__divmodhi4_neg1>:
    11cc:	90 95       	com	r25
    11ce:	81 95       	neg	r24
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__divmodhi4_neg2>:
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255

000011da <__divmodhi4_exit>:
    11da:	08 95       	ret

000011dc <__udivmodsi4>:
    11dc:	a1 e2       	ldi	r26, 0x21	; 33
    11de:	1a 2e       	mov	r1, r26
    11e0:	aa 1b       	sub	r26, r26
    11e2:	bb 1b       	sub	r27, r27
    11e4:	fd 01       	movw	r30, r26
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <__udivmodsi4_ep>

000011e8 <__udivmodsi4_loop>:
    11e8:	aa 1f       	adc	r26, r26
    11ea:	bb 1f       	adc	r27, r27
    11ec:	ee 1f       	adc	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	a2 17       	cp	r26, r18
    11f2:	b3 07       	cpc	r27, r19
    11f4:	e4 07       	cpc	r30, r20
    11f6:	f5 07       	cpc	r31, r21
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <__udivmodsi4_ep>
    11fa:	a2 1b       	sub	r26, r18
    11fc:	b3 0b       	sbc	r27, r19
    11fe:	e4 0b       	sbc	r30, r20
    1200:	f5 0b       	sbc	r31, r21

00001202 <__udivmodsi4_ep>:
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	1a 94       	dec	r1
    120c:	69 f7       	brne	.-38     	; 0x11e8 <__udivmodsi4_loop>
    120e:	60 95       	com	r22
    1210:	70 95       	com	r23
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	bd 01       	movw	r22, r26
    121c:	cf 01       	movw	r24, r30
    121e:	08 95       	ret

00001220 <__divmodsi4>:
    1220:	05 2e       	mov	r0, r21
    1222:	97 fb       	bst	r25, 7
    1224:	1e f4       	brtc	.+6      	; 0x122c <__divmodsi4+0xc>
    1226:	00 94       	com	r0
    1228:	0e 94 27 09 	call	0x124e	; 0x124e <__negsi2>
    122c:	57 fd       	sbrc	r21, 7
    122e:	07 d0       	rcall	.+14     	; 0x123e <__divmodsi4_neg2>
    1230:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodsi4>
    1234:	07 fc       	sbrc	r0, 7
    1236:	03 d0       	rcall	.+6      	; 0x123e <__divmodsi4_neg2>
    1238:	4e f4       	brtc	.+18     	; 0x124c <__divmodsi4_exit>
    123a:	0c 94 27 09 	jmp	0x124e	; 0x124e <__negsi2>

0000123e <__divmodsi4_neg2>:
    123e:	50 95       	com	r21
    1240:	40 95       	com	r20
    1242:	30 95       	com	r19
    1244:	21 95       	neg	r18
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	4f 4f       	sbci	r20, 0xFF	; 255
    124a:	5f 4f       	sbci	r21, 0xFF	; 255

0000124c <__divmodsi4_exit>:
    124c:	08 95       	ret

0000124e <__negsi2>:
    124e:	90 95       	com	r25
    1250:	80 95       	com	r24
    1252:	70 95       	com	r23
    1254:	61 95       	neg	r22
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__umulhisi3>:
    125e:	a2 9f       	mul	r26, r18
    1260:	b0 01       	movw	r22, r0
    1262:	b3 9f       	mul	r27, r19
    1264:	c0 01       	movw	r24, r0
    1266:	a3 9f       	mul	r26, r19
    1268:	70 0d       	add	r23, r0
    126a:	81 1d       	adc	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	91 1d       	adc	r25, r1
    1270:	b2 9f       	mul	r27, r18
    1272:	70 0d       	add	r23, r0
    1274:	81 1d       	adc	r24, r1
    1276:	11 24       	eor	r1, r1
    1278:	91 1d       	adc	r25, r1
    127a:	08 95       	ret

0000127c <__mulshisi3>:
    127c:	b7 ff       	sbrs	r27, 7
    127e:	0c 94 46 09 	jmp	0x128c	; 0x128c <__muluhisi3>

00001282 <__mulohisi3>:
    1282:	0e 94 46 09 	call	0x128c	; 0x128c <__muluhisi3>
    1286:	82 1b       	sub	r24, r18
    1288:	93 0b       	sbc	r25, r19
    128a:	08 95       	ret

0000128c <__muluhisi3>:
    128c:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
    1290:	a5 9f       	mul	r26, r21
    1292:	90 0d       	add	r25, r0
    1294:	b4 9f       	mul	r27, r20
    1296:	90 0d       	add	r25, r0
    1298:	a4 9f       	mul	r26, r20
    129a:	80 0d       	add	r24, r0
    129c:	91 1d       	adc	r25, r1
    129e:	11 24       	eor	r1, r1
    12a0:	08 95       	ret

000012a2 <__itoa_ncheck>:
    12a2:	bb 27       	eor	r27, r27
    12a4:	4a 30       	cpi	r20, 0x0A	; 10
    12a6:	31 f4       	brne	.+12     	; 0x12b4 <__itoa_ncheck+0x12>
    12a8:	99 23       	and	r25, r25
    12aa:	22 f4       	brpl	.+8      	; 0x12b4 <__itoa_ncheck+0x12>
    12ac:	bd e2       	ldi	r27, 0x2D	; 45
    12ae:	90 95       	com	r25
    12b0:	81 95       	neg	r24
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__utoa_common>

000012b8 <__utoa_ncheck>:
    12b8:	bb 27       	eor	r27, r27

000012ba <__utoa_common>:
    12ba:	fb 01       	movw	r30, r22
    12bc:	55 27       	eor	r21, r21
    12be:	aa 27       	eor	r26, r26
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	aa 1f       	adc	r26, r26
    12c6:	a4 17       	cp	r26, r20
    12c8:	10 f0       	brcs	.+4      	; 0x12ce <__utoa_common+0x14>
    12ca:	a4 1b       	sub	r26, r20
    12cc:	83 95       	inc	r24
    12ce:	50 51       	subi	r21, 0x10	; 16
    12d0:	b9 f7       	brne	.-18     	; 0x12c0 <__utoa_common+0x6>
    12d2:	a0 5d       	subi	r26, 0xD0	; 208
    12d4:	aa 33       	cpi	r26, 0x3A	; 58
    12d6:	08 f0       	brcs	.+2      	; 0x12da <__utoa_common+0x20>
    12d8:	a9 5d       	subi	r26, 0xD9	; 217
    12da:	a1 93       	st	Z+, r26
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	79 f7       	brne	.-34     	; 0x12be <__utoa_common+0x4>
    12e0:	b1 11       	cpse	r27, r1
    12e2:	b1 93       	st	Z+, r27
    12e4:	11 92       	st	Z+, r1
    12e6:	cb 01       	movw	r24, r22
    12e8:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <strrev>

000012ec <strrev>:
    12ec:	dc 01       	movw	r26, r24
    12ee:	fc 01       	movw	r30, r24
    12f0:	67 2f       	mov	r22, r23
    12f2:	71 91       	ld	r23, Z+
    12f4:	77 23       	and	r23, r23
    12f6:	e1 f7       	brne	.-8      	; 0x12f0 <strrev+0x4>
    12f8:	32 97       	sbiw	r30, 0x02	; 2
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <strrev+0x18>
    12fc:	7c 91       	ld	r23, X
    12fe:	6d 93       	st	X+, r22
    1300:	70 83       	st	Z, r23
    1302:	62 91       	ld	r22, -Z
    1304:	ae 17       	cp	r26, r30
    1306:	bf 07       	cpc	r27, r31
    1308:	c8 f3       	brcs	.-14     	; 0x12fc <strrev+0x10>
    130a:	08 95       	ret

0000130c <eeprom_read_byte>:
    130c:	f9 99       	sbic	0x1f, 1	; 31
    130e:	fe cf       	rjmp	.-4      	; 0x130c <eeprom_read_byte>
    1310:	92 bd       	out	0x22, r25	; 34
    1312:	81 bd       	out	0x21, r24	; 33
    1314:	f8 9a       	sbi	0x1f, 0	; 31
    1316:	99 27       	eor	r25, r25
    1318:	80 b5       	in	r24, 0x20	; 32
    131a:	08 95       	ret

0000131c <eeprom_read_word>:
    131c:	a8 e1       	ldi	r26, 0x18	; 24
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	42 e0       	ldi	r20, 0x02	; 2
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <eeprom_read_blraw>

00001328 <eeprom_write_byte>:
    1328:	26 2f       	mov	r18, r22

0000132a <eeprom_write_r18>:
    132a:	f9 99       	sbic	0x1f, 1	; 31
    132c:	fe cf       	rjmp	.-4      	; 0x132a <eeprom_write_r18>
    132e:	1f ba       	out	0x1f, r1	; 31
    1330:	92 bd       	out	0x22, r25	; 34
    1332:	81 bd       	out	0x21, r24	; 33
    1334:	20 bd       	out	0x20, r18	; 32
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	fa 9a       	sbi	0x1f, 2	; 31
    133c:	f9 9a       	sbi	0x1f, 1	; 31
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	08 95       	ret

00001344 <eeprom_write_word>:
    1344:	0e 94 94 09 	call	0x1328	; 0x1328 <eeprom_write_byte>
    1348:	27 2f       	mov	r18, r23
    134a:	0c 94 95 09 	jmp	0x132a	; 0x132a <eeprom_write_r18>

0000134e <eeprom_read_block>:
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22

00001352 <eeprom_read_blraw>:
    1352:	fc 01       	movw	r30, r24
    1354:	f9 99       	sbic	0x1f, 1	; 31
    1356:	fe cf       	rjmp	.-4      	; 0x1354 <eeprom_read_blraw+0x2>
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <eeprom_read_blraw+0x14>
    135a:	f2 bd       	out	0x22, r31	; 34
    135c:	e1 bd       	out	0x21, r30	; 33
    135e:	f8 9a       	sbi	0x1f, 0	; 31
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	00 b4       	in	r0, 0x20	; 32
    1364:	0d 92       	st	X+, r0
    1366:	41 50       	subi	r20, 0x01	; 1
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	b8 f7       	brcc	.-18     	; 0x135a <eeprom_read_blraw+0x8>
    136c:	08 95       	ret

0000136e <_exit>:
    136e:	f8 94       	cli

00001370 <__stop_program>:
    1370:	ff cf       	rjmp	.-2      	; 0x1370 <__stop_program>
