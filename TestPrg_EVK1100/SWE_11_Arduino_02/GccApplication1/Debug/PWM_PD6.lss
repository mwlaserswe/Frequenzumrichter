
PWM_PD6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a2  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000613  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  00000f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006923  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00007c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000270d  00000000  00000000  00007c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	76 c0       	rjmp	.+236    	; 0x174 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
	// F¸r PD6 ist Timer 0 zust‰ndig
	// es gibt zwei TC0 Control Register: TCCR0A und TCCR0B
	//    WGM01,WGM00 = 1,1    heiﬂt Fast PWM
	//    COM0A1,COM0A0 = 1,0  heiﬂt Clear OC0A on compare match, set OC0A at BOTTOM (Non-inverting mode)
	//    CS01,CS00 = 1,1      heiﬂt clk/1 (no prescaling)
	TCCR0A = ((1 << COM0A1) | (1 << WGM01) | (1 << WGM00) );
  8a:	83 e8       	ldi	r24, 0x83	; 131
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = ((1 << CS10) | (1 << CS00));
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	85 bd       	out	0x25, r24	; 37
	
	// Port PD6 auf Output setzen
	DDRD |= (1 << PIND6);
  92:	56 9a       	sbi	0x0a, 6	; 10
	
		
	while(1)
	{
		// duty cycle setzen
		OCR0A = 70;
  94:	36 e4       	ldi	r19, 0x46	; 70
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
			
		// duty cycle setzen
		OCR0A = 200;
  96:	28 ec       	ldi	r18, 0xC8	; 200
	
		
	while(1)
	{
		// duty cycle setzen
		OCR0A = 70;
  98:	37 bd       	out	0x27, r19	; 39
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
  9a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  9e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  a2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
  a6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
  aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  b6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  ba:	81 35       	cpi	r24, 0x51	; 81
  bc:	93 4c       	sbci	r25, 0xC3	; 195
  be:	a1 05       	cpc	r26, r1
  c0:	b1 05       	cpc	r27, r1
  c2:	00 f5       	brcc	.+64     	; 0x104 <main+0x7a>
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  fa:	81 35       	cpi	r24, 0x51	; 81
  fc:	93 4c       	sbci	r25, 0xC3	; 195
  fe:	a1 05       	cpc	r26, r1
 100:	b1 05       	cpc	r27, r1
 102:	00 f3       	brcs	.-64     	; 0xc4 <main+0x3a>
			
		// duty cycle setzen
		OCR0A = 200;
 104:	27 bd       	out	0x27, r18	; 39
		for (cnt=0; cnt<=DisplayDelay; cnt++) {;}
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 10a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 10e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 112:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 122:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 126:	81 35       	cpi	r24, 0x51	; 81
 128:	93 4c       	sbci	r25, 0xC3	; 195
 12a:	a1 05       	cpc	r26, r1
 12c:	b1 05       	cpc	r27, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <main+0xa8>
 130:	b3 cf       	rjmp	.-154    	; 0x98 <main+0xe>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 13a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 13e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 150:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 154:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 168:	81 35       	cpi	r24, 0x51	; 81
 16a:	93 4c       	sbci	r25, 0xC3	; 195
 16c:	a1 05       	cpc	r26, r1
 16e:	b1 05       	cpc	r27, r1
 170:	00 f3       	brcs	.-64     	; 0x132 <main+0xa8>
 172:	92 cf       	rjmp	.-220    	; 0x98 <main+0xe>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
